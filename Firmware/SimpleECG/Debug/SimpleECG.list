
SimpleECG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009690  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800979c  0800979c  0001979c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099ac  080099ac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080099ac  080099ac  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099ac  080099ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  080099b8  080099b8  000199b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080099c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c0  200001e0  08009ba4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014a0  08009ba4  000214a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e6aa  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041d7  00000000  00000000  0003e8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00042a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00043930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e192  00000000  00000000  00044638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bf2  00000000  00000000  000627ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009681f  00000000  00000000  000753bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010bbdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005368  00000000  00000000  0010bc30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009784 	.word	0x08009784

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08009784 	.word	0x08009784

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_Z7wait_nsm>:
PinOutput nRESET = PinOutput(nRESET_GPIO_Port, nRESET_Pin);
PinOutput START = PinOutput(START_GPIO_Port, START_Pin);

uint8_t* registers;

void wait_ns(uint32_t ns) {
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    // Enable the cycle counter
    DWT->CTRL |= (1 << DWT_CTRL_CYCCNTENA_Pos) | DWT_CTRL_CYCCNTENA_Msk;
 8000164:	4b12      	ldr	r3, [pc, #72]	; (80001b0 <_Z7wait_nsm+0x54>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a11      	ldr	r2, [pc, #68]	; (80001b0 <_Z7wait_nsm+0x54>)
 800016a:	f043 0301 	orr.w	r3, r3, #1
 800016e:	6013      	str	r3, [r2, #0]

    // Calculate the number of cycles needed to wait for the specified number of nanoseconds
    uint32_t cycles = SystemCoreClock / 1000000000 * ns;
 8000170:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <_Z7wait_nsm+0x58>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	0a5b      	lsrs	r3, r3, #9
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <_Z7wait_nsm+0x5c>)
 8000178:	fba2 2303 	umull	r2, r3, r2, r3
 800017c:	09da      	lsrs	r2, r3, #7
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	fb02 f303 	mul.w	r3, r2, r3
 8000184:	60fb      	str	r3, [r7, #12]

    // Wait for the specified number of cycles
    uint32_t start = DWT->CYCCNT;
 8000186:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <_Z7wait_nsm+0x54>)
 8000188:	685b      	ldr	r3, [r3, #4]
 800018a:	60bb      	str	r3, [r7, #8]
    while (DWT->CYCCNT - start < cycles);
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <_Z7wait_nsm+0x54>)
 800018e:	685a      	ldr	r2, [r3, #4]
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	1ad3      	subs	r3, r2, r3
 8000194:	68fa      	ldr	r2, [r7, #12]
 8000196:	429a      	cmp	r2, r3
 8000198:	bf8c      	ite	hi
 800019a:	2301      	movhi	r3, #1
 800019c:	2300      	movls	r3, #0
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d000      	beq.n	80001a6 <_Z7wait_nsm+0x4a>
 80001a4:	e7f2      	b.n	800018c <_Z7wait_nsm+0x30>
}
 80001a6:	bf00      	nop
 80001a8:	3714      	adds	r7, #20
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	e0001000 	.word	0xe0001000
 80001b4:	20000000 	.word	0x20000000
 80001b8:	00044b83 	.word	0x00044b83

080001bc <_ZN7ADS1298C1EP19__SPI_HandleTypeDef>:

void wait_us(uint32_t us) {
	wait_ns(us*1000);
}

ADS1298::ADS1298(SPI_HandleTypeDef *hspi) {
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
 80001c4:	6039      	str	r1, [r7, #0]
 80001c6:	4a0b      	ldr	r2, [pc, #44]	; (80001f4 <_ZN7ADS1298C1EP19__SPI_HandleTypeDef+0x38>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	3323      	adds	r3, #35	; 0x23
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
 80001d8:	60da      	str	r2, [r3, #12]
 80001da:	611a      	str	r2, [r3, #16]
 80001dc:	615a      	str	r2, [r3, #20]
 80001de:	f8c3 2017 	str.w	r2, [r3, #23]
	spi = hspi;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	683a      	ldr	r2, [r7, #0]
 80001e6:	605a      	str	r2, [r3, #4]
}
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4618      	mov	r0, r3
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	08009848 	.word	0x08009848

080001f8 <_ZN7ADS1298D1Ev>:

ADS1298::~ADS1298() {
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <_ZN7ADS1298D1Ev+0x1c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	601a      	str	r2, [r3, #0]
    // destructor code here
}
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4618      	mov	r0, r3
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	08009848 	.word	0x08009848

08000218 <_ZN7ADS1298D0Ev>:
ADS1298::~ADS1298() {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
}
 8000220:	6878      	ldr	r0, [r7, #4]
 8000222:	f7ff ffe9 	bl	80001f8 <_ZN7ADS1298D1Ev>
 8000226:	2160      	movs	r1, #96	; 0x60
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f008 fb23 	bl	8008874 <_ZdlPvj>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4618      	mov	r0, r3
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <_ZN7ADS12985RESETEv>:


void ADS1298::RESET() {
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
    //nCS.low();

    nRESET.low();
 8000240:	4809      	ldr	r0, [pc, #36]	; (8000268 <_ZN7ADS12985RESETEv+0x30>)
 8000242:	f000 fa4f 	bl	80006e4 <_ZN9PinOutput3lowEv>
    wait_ns(2 * T_CLK_NS);
 8000246:	f240 5034 	movw	r0, #1332	; 0x534
 800024a:	f7ff ff87 	bl	800015c <_Z7wait_nsm>
    HAL_Delay(1);
 800024e:	2001      	movs	r0, #1
 8000250:	f001 f81a 	bl	8001288 <HAL_Delay>
    nRESET.high();
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <_ZN7ADS12985RESETEv+0x30>)
 8000256:	f000 fa35 	bl	80006c4 <_ZN9PinOutput4highEv>
    //wait_ns(18 * T_CLK_NS);
    HAL_Delay(1);
 800025a:	2001      	movs	r0, #1
 800025c:	f001 f814 	bl	8001288 <HAL_Delay>

    //nCS.high();
}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000208 	.word	0x20000208

0800026c <_ZN7ADS12986SDATACEv>:

void ADS1298::SDATAC() {
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
    sendCommand(CMD_SDATAC);
 8000274:	2111      	movs	r1, #17
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f000 f818 	bl	80002ac <_ZN7ADS129811sendCommandEh>
    wait_ns(4 * T_CLK_NS);
 800027c:	f640 2068 	movw	r0, #2664	; 0xa68
 8000280:	f7ff ff6c 	bl	800015c <_Z7wait_nsm>
}
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <_ZN7ADS12986RDATACEv>:

void ADS1298::RDATAC() {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
    sendCommand(CMD_RDATAC);
 8000294:	2110      	movs	r1, #16
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 f808 	bl	80002ac <_ZN7ADS129811sendCommandEh>
    wait_ns(4 * T_CLK_NS);
 800029c:	f640 2068 	movw	r0, #2664	; 0xa68
 80002a0:	f7ff ff5c 	bl	800015c <_Z7wait_nsm>
}
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <_ZN7ADS129811sendCommandEh>:

void ADS1298::sendCommand(uint8_t cmd) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	460b      	mov	r3, r1
 80002b6:	70fb      	strb	r3, [r7, #3]
    //nCS.low();

    uint8_t tx[1] = { cmd };
 80002b8:	78fb      	ldrb	r3, [r7, #3]
 80002ba:	733b      	strb	r3, [r7, #12]
    HAL_SPI_Transmit(spi, tx, 1, 100);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	6858      	ldr	r0, [r3, #4]
 80002c0:	f107 010c 	add.w	r1, r7, #12
 80002c4:	2364      	movs	r3, #100	; 0x64
 80002c6:	2201      	movs	r2, #1
 80002c8:	f003 fcaa 	bl	8003c20 <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f003 ff83 	bl	80041dc <HAL_SPI_GetState>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b01      	cmp	r3, #1
 80002da:	bf14      	ite	ne
 80002dc:	2301      	movne	r3, #1
 80002de:	2300      	moveq	r3, #0
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d000      	beq.n	80002e8 <_ZN7ADS129811sendCommandEh+0x3c>
 80002e6:	e7f1      	b.n	80002cc <_ZN7ADS129811sendCommandEh+0x20>

    wait_ns(4 * T_CLK_NS);
 80002e8:	f640 2068 	movw	r0, #2664	; 0xa68
 80002ec:	f7ff ff36 	bl	800015c <_Z7wait_nsm>

    //nCS.high();
}
 80002f0:	bf00      	nop
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <_ZN7ADS129820useInternalReferenceEv>:

void ADS1298::useInternalReference() {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
    ADS1298::writeRegister(REG_ADDR_CONFIG3, 0xC0);
 8000300:	22c0      	movs	r2, #192	; 0xc0
 8000302:	2103      	movs	r1, #3
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f000 f861 	bl	80003cc <_ZN7ADS129813writeRegisterEhh>
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}

08000312 <_ZN7ADS129816useRegularSignalEh>:
void ADS1298::useTestSignal(uint8_t channelNo) {
    writeRegister(REG_ADDR_CONFIG2, 0x10);
    writeRegister(REG_ADDR_CH1SET + channelNo - 1, 0x05);
}

void ADS1298::useRegularSignal(uint8_t channelNo) {
 8000312:	b580      	push	{r7, lr}
 8000314:	b082      	sub	sp, #8
 8000316:	af00      	add	r7, sp, #0
 8000318:	6078      	str	r0, [r7, #4]
 800031a:	460b      	mov	r3, r1
 800031c:	70fb      	strb	r3, [r7, #3]
    writeRegister(REG_ADDR_CONFIG2, 0x02);
 800031e:	2202      	movs	r2, #2
 8000320:	2102      	movs	r1, #2
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	f000 f852 	bl	80003cc <_ZN7ADS129813writeRegisterEhh>
    writeRegister(REG_ADDR_CH1SET + channelNo - 1, 0x00);
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	3304      	adds	r3, #4
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2200      	movs	r2, #0
 8000330:	4619      	mov	r1, r3
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	f000 f84a 	bl	80003cc <_ZN7ADS129813writeRegisterEhh>
    writeRegister(REG_ADDR_CONFIG3, 0b1100'1100);
 8000338:	22cc      	movs	r2, #204	; 0xcc
 800033a:	2103      	movs	r1, #3
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f000 f845 	bl	80003cc <_ZN7ADS129813writeRegisterEhh>
    writeRegister(REG_ADDR_RLD_SENSP, 0b0000'0011);
 8000342:	2203      	movs	r2, #3
 8000344:	210d      	movs	r1, #13
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f000 f840 	bl	80003cc <_ZN7ADS129813writeRegisterEhh>
}
 800034c:	bf00      	nop
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}

08000354 <_ZN7ADS12985setupEv>:

void ADS1298::setup()
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
    nRESET.high();
 800035c:	4818      	ldr	r0, [pc, #96]	; (80003c0 <_ZN7ADS12985setupEv+0x6c>)
 800035e:	f000 f9b1 	bl	80006c4 <_ZN9PinOutput4highEv>
    nCS.low(); // TODO: Is something wrong with the toggling of CS? seems fucked
 8000362:	4818      	ldr	r0, [pc, #96]	; (80003c4 <_ZN7ADS12985setupEv+0x70>)
 8000364:	f000 f9be 	bl	80006e4 <_ZN9PinOutput3lowEv>
    HAL_Delay(T_POR_MS);
 8000368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800036c:	f000 ff8c 	bl	8001288 <HAL_Delay>
    RESET();
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f7ff ff61 	bl	8000238 <_ZN7ADS12985RESETEv>
    SDATAC();
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f7ff ff78 	bl	800026c <_ZN7ADS12986SDATACEv>

    useInternalReference();
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f7ff ffbb 	bl	80002f8 <_ZN7ADS129820useInternalReferenceEv>
    writeRegister(REG_ADDR_CONFIG1, 0x85); // high resolution, 1kSPS
 8000382:	2285      	movs	r2, #133	; 0x85
 8000384:	2101      	movs	r1, #1
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f000 f820 	bl	80003cc <_ZN7ADS129813writeRegisterEhh>
    //useTestSignal(1);
    useRegularSignal(1);
 800038c:	2101      	movs	r1, #1
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f7ff ffbf 	bl	8000312 <_ZN7ADS129816useRegularSignalEh>
    useRegularSignal(2);
 8000394:	2102      	movs	r1, #2
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f7ff ffbb 	bl	8000312 <_ZN7ADS129816useRegularSignalEh>
    useRegularSignal(3);
 800039c:	2103      	movs	r1, #3
 800039e:	6878      	ldr	r0, [r7, #4]
 80003a0:	f7ff ffb7 	bl	8000312 <_ZN7ADS129816useRegularSignalEh>
    useRegularSignal(4);
 80003a4:	2104      	movs	r1, #4
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f7ff ffb3 	bl	8000312 <_ZN7ADS129816useRegularSignalEh>


    START.high();
 80003ac:	4806      	ldr	r0, [pc, #24]	; (80003c8 <_ZN7ADS12985setupEv+0x74>)
 80003ae:	f000 f989 	bl	80006c4 <_ZN9PinOutput4highEv>
    RDATAC();
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f7ff ff6a 	bl	800028c <_ZN7ADS12986RDATACEv>
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000208 	.word	0x20000208
 80003c4:	200001fc 	.word	0x200001fc
 80003c8:	20000214 	.word	0x20000214

080003cc <_ZN7ADS129813writeRegisterEhh>:

void ADS1298::writeRegister(uint8_t registerAddr, uint8_t newValue) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	70fb      	strb	r3, [r7, #3]
 80003d8:	4613      	mov	r3, r2
 80003da:	70bb      	strb	r3, [r7, #2]
    //nCS.low();

    uint8_t tx = CMD_WREG | registerAddr;
 80003dc:	78fb      	ldrb	r3, [r7, #3]
 80003de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(spi, &tx, 1, HAL_MAX_DELAY);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	6858      	ldr	r0, [r3, #4]
 80003ea:	f107 010f 	add.w	r1, r7, #15
 80003ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003f2:	2201      	movs	r2, #1
 80003f4:	f003 fc14 	bl	8003c20 <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f003 feed 	bl	80041dc <HAL_SPI_GetState>
 8000402:	4603      	mov	r3, r0
 8000404:	2b01      	cmp	r3, #1
 8000406:	bf14      	ite	ne
 8000408:	2301      	movne	r3, #1
 800040a:	2300      	moveq	r3, #0
 800040c:	b2db      	uxtb	r3, r3
 800040e:	2b00      	cmp	r3, #0
 8000410:	d000      	beq.n	8000414 <_ZN7ADS129813writeRegisterEhh+0x48>
 8000412:	e7f1      	b.n	80003f8 <_ZN7ADS129813writeRegisterEhh+0x2c>

    wait_ns(4 * T_CLK_NS);
 8000414:	f640 2068 	movw	r0, #2664	; 0xa68
 8000418:	f7ff fea0 	bl	800015c <_Z7wait_nsm>

    tx = 0x00;
 800041c:	2300      	movs	r3, #0
 800041e:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(spi, &tx, 1, HAL_MAX_DELAY); // 0x00 means only one register, not multiple
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	6858      	ldr	r0, [r3, #4]
 8000424:	f107 010f 	add.w	r1, r7, #15
 8000428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800042c:	2201      	movs	r2, #1
 800042e:	f003 fbf7 	bl	8003c20 <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	4618      	mov	r0, r3
 8000438:	f003 fed0 	bl	80041dc <HAL_SPI_GetState>
 800043c:	4603      	mov	r3, r0
 800043e:	2b01      	cmp	r3, #1
 8000440:	bf14      	ite	ne
 8000442:	2301      	movne	r3, #1
 8000444:	2300      	moveq	r3, #0
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b00      	cmp	r3, #0
 800044a:	d000      	beq.n	800044e <_ZN7ADS129813writeRegisterEhh+0x82>
 800044c:	e7f1      	b.n	8000432 <_ZN7ADS129813writeRegisterEhh+0x66>

    wait_ns(4 * T_CLK_NS);
 800044e:	f640 2068 	movw	r0, #2664	; 0xa68
 8000452:	f7ff fe83 	bl	800015c <_Z7wait_nsm>

    tx = newValue;
 8000456:	78bb      	ldrb	r3, [r7, #2]
 8000458:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(spi, &tx, 1, HAL_MAX_DELAY);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6858      	ldr	r0, [r3, #4]
 800045e:	f107 010f 	add.w	r1, r7, #15
 8000462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000466:	2201      	movs	r2, #1
 8000468:	f003 fbda 	bl	8003c20 <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	4618      	mov	r0, r3
 8000472:	f003 feb3 	bl	80041dc <HAL_SPI_GetState>
 8000476:	4603      	mov	r3, r0
 8000478:	2b01      	cmp	r3, #1
 800047a:	bf14      	ite	ne
 800047c:	2301      	movne	r3, #1
 800047e:	2300      	moveq	r3, #0
 8000480:	b2db      	uxtb	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d000      	beq.n	8000488 <_ZN7ADS129813writeRegisterEhh+0xbc>
 8000486:	e7f1      	b.n	800046c <_ZN7ADS129813writeRegisterEhh+0xa0>

    wait_ns(4 * T_CLK_NS);
 8000488:	f640 2068 	movw	r0, #2664	; 0xa68
 800048c:	f7ff fe66 	bl	800015c <_Z7wait_nsm>

    //nCS.high();
}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <_Z6getBitlm>:
    else {
    	return 0xFF;
    }
}

int32_t getBit(int32_t x, uint32_t i) {
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
    return (x & (1 << i)) >> i;
 80004a2:	2201      	movs	r2, #1
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	409a      	lsls	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	401a      	ands	r2, r3
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	fa42 f303 	asr.w	r3, r2, r3
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <_ZN7ADS129814getChannelDataEPl>:

HAL_StatusTypeDef ADS1298::getChannelData(int32_t *channels) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b094      	sub	sp, #80	; 0x50
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
    //nCS.low();
	HAL_StatusTypeDef hal_status;
	uint8_t tx_data[27];
	uint8_t rx_data[27];
	for (int i = 0; i < 27; i++) {
 80004c6:	2300      	movs	r3, #0
 80004c8:	647b      	str	r3, [r7, #68]	; 0x44
 80004ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004cc:	2b1a      	cmp	r3, #26
 80004ce:	dc0f      	bgt.n	80004f0 <_ZN7ADS129814getChannelDataEPl+0x34>
		tx_data[i] = 0x00;
 80004d0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80004d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004d6:	4413      	add	r3, r2
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
		rx_data[i] = 0x00;
 80004dc:	f107 0208 	add.w	r2, r7, #8
 80004e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004e2:	4413      	add	r3, r2
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 27; i++) {
 80004e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004ea:	3301      	adds	r3, #1
 80004ec:	647b      	str	r3, [r7, #68]	; 0x44
 80004ee:	e7ec      	b.n	80004ca <_ZN7ADS129814getChannelDataEPl+0xe>
	}


	hal_status = HAL_SPI_TransmitReceive(spi, tx_data, rx_data, 27, HAL_MAX_DELAY);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6858      	ldr	r0, [r3, #4]
 80004f4:	f107 0208 	add.w	r2, r7, #8
 80004f8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80004fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	231b      	movs	r3, #27
 8000504:	f003 fcc8 	bl	8003e98 <HAL_SPI_TransmitReceive>
 8000508:	4603      	mov	r3, r0
 800050a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	while(HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	4618      	mov	r0, r3
 8000514:	f003 fe62 	bl	80041dc <HAL_SPI_GetState>
 8000518:	4603      	mov	r3, r0
 800051a:	2b01      	cmp	r3, #1
 800051c:	bf14      	ite	ne
 800051e:	2301      	movne	r3, #1
 8000520:	2300      	moveq	r3, #0
 8000522:	b2db      	uxtb	r3, r3
 8000524:	2b00      	cmp	r3, #0
 8000526:	d000      	beq.n	800052a <_ZN7ADS129814getChannelDataEPl+0x6e>
 8000528:	e7f1      	b.n	800050e <_ZN7ADS129814getChannelDataEPl+0x52>

    for (int i = 0; i < 8; i++) {
 800052a:	2300      	movs	r3, #0
 800052c:	643b      	str	r3, [r7, #64]	; 0x40
 800052e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000530:	2b07      	cmp	r3, #7
 8000532:	dc4a      	bgt.n	80005ca <_ZN7ADS129814getChannelDataEPl+0x10e>
    	channels[i] = 0 | (rx_data[3 + 3*i] << 16) | (rx_data[4 + 3*i] << 8) | rx_data[5 + 3*i];
 8000534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	4613      	mov	r3, r2
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	4413      	add	r3, r2
 800053e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000542:	4413      	add	r3, r2
 8000544:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000548:	0419      	lsls	r1, r3, #16
 800054a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800054c:	4613      	mov	r3, r2
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	4413      	add	r3, r2
 8000552:	3304      	adds	r3, #4
 8000554:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000558:	4413      	add	r3, r2
 800055a:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800055e:	021b      	lsls	r3, r3, #8
 8000560:	4319      	orrs	r1, r3
 8000562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000564:	4613      	mov	r3, r2
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	4413      	add	r3, r2
 800056a:	3305      	adds	r3, #5
 800056c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000570:	4413      	add	r3, r2
 8000572:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000576:	4618      	mov	r0, r3
 8000578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	4413      	add	r3, r2
 8000580:	ea41 0200 	orr.w	r2, r1, r0
 8000584:	601a      	str	r2, [r3, #0]

        if (getBit(channels[i], 23) == 1) {
 8000586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	683a      	ldr	r2, [r7, #0]
 800058c:	4413      	add	r3, r2
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2117      	movs	r1, #23
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ff80 	bl	8000498 <_Z6getBitlm>
 8000598:	4603      	mov	r3, r0
 800059a:	2b01      	cmp	r3, #1
 800059c:	bf0c      	ite	eq
 800059e:	2301      	moveq	r3, #1
 80005a0:	2300      	movne	r3, #0
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00c      	beq.n	80005c2 <_ZN7ADS129814getChannelDataEPl+0x106>
        	channels[i] = channels[i] | 0xFF000000;
 80005a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f043 417f 	orr.w	r1, r3, #4278190080	; 0xff000000
 80005b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	683a      	ldr	r2, [r7, #0]
 80005bc:	4413      	add	r3, r2
 80005be:	460a      	mov	r2, r1
 80005c0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 80005c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005c4:	3301      	adds	r3, #1
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
 80005c8:	e7b1      	b.n	800052e <_ZN7ADS129814getChannelDataEPl+0x72>
        }
    }

    //nCS.high();
    return hal_status;
 80005ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3748      	adds	r7, #72	; 0x48
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <_Z41__static_initialization_and_destruction_0ii>:
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d113      	bne.n	8000610 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d10e      	bne.n	8000610 <_Z41__static_initialization_and_destruction_0ii+0x38>
PinOutput nCS = PinOutput(nCS_GPIO_Port, nCS_Pin);
 80005f2:	2201      	movs	r2, #1
 80005f4:	4911      	ldr	r1, [pc, #68]	; (800063c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80005f6:	4812      	ldr	r0, [pc, #72]	; (8000640 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80005f8:	f000 f838 	bl	800066c <_ZN9PinOutputC1EP12GPIO_TypeDeft>
PinOutput nRESET = PinOutput(nRESET_GPIO_Port, nRESET_Pin);
 80005fc:	2204      	movs	r2, #4
 80005fe:	490f      	ldr	r1, [pc, #60]	; (800063c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000600:	4810      	ldr	r0, [pc, #64]	; (8000644 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000602:	f000 f833 	bl	800066c <_ZN9PinOutputC1EP12GPIO_TypeDeft>
PinOutput START = PinOutput(START_GPIO_Port, START_Pin);
 8000606:	2202      	movs	r2, #2
 8000608:	490c      	ldr	r1, [pc, #48]	; (800063c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800060a:	480f      	ldr	r0, [pc, #60]	; (8000648 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800060c:	f000 f82e 	bl	800066c <_ZN9PinOutputC1EP12GPIO_TypeDeft>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d10d      	bne.n	8000632 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800061c:	4293      	cmp	r3, r2
 800061e:	d108      	bne.n	8000632 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000622:	f000 f86f 	bl	8000704 <_ZN9PinOutputD1Ev>
PinOutput nRESET = PinOutput(nRESET_GPIO_Port, nRESET_Pin);
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000628:	f000 f86c 	bl	8000704 <_ZN9PinOutputD1Ev>
PinOutput nCS = PinOutput(nCS_GPIO_Port, nCS_Pin);
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800062e:	f000 f869 	bl	8000704 <_ZN9PinOutputD1Ev>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40010c00 	.word	0x40010c00
 8000640:	200001fc 	.word	0x200001fc
 8000644:	20000208 	.word	0x20000208
 8000648:	20000214 	.word	0x20000214

0800064c <_GLOBAL__sub_I_nCS>:
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
 8000650:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ffbf 	bl	80005d8 <_Z41__static_initialization_and_destruction_0ii>
 800065a:	bd80      	pop	{r7, pc}

0800065c <_GLOBAL__sub_D_nCS>:
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
 8000660:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000664:	2000      	movs	r0, #0
 8000666:	f7ff ffb7 	bl	80005d8 <_Z41__static_initialization_and_destruction_0ii>
 800066a:	bd80      	pop	{r7, pc}

0800066c <_ZN9PinOutputC1EP12GPIO_TypeDeft>:
 *      Author: jojo
 */

#include "PinOutput.hpp"

PinOutput::PinOutput(GPIO_TypeDef* port, uint16_t pin) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	4613      	mov	r3, r2
 8000678:	80fb      	strh	r3, [r7, #6]
 800067a:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <_ZN9PinOutputC1EP12GPIO_TypeDeft+0x54>)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	601a      	str	r2, [r3, #0]
	_port = port;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	605a      	str	r2, [r3, #4]
	_pin = pin;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	88fa      	ldrh	r2, [r7, #6]
 800068a:	811a      	strh	r2, [r3, #8]

	// Define GPIO pin configuration parameters
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = pin;
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61fb      	str	r3, [r7, #28]

	// Initialize GPIO pin
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	4619      	mov	r1, r3
 80006b0:	68b8      	ldr	r0, [r7, #8]
 80006b2:	f000 ff1b 	bl	80014ec <HAL_GPIO_Init>
}
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4618      	mov	r0, r3
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08009858 	.word	0x08009858

080006c4 <_ZN9PinOutput4highEv>:

void PinOutput::high() {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PinOutput::_port, PinOutput::_pin, GPIO_PIN_SET);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6858      	ldr	r0, [r3, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	891b      	ldrh	r3, [r3, #8]
 80006d4:	2201      	movs	r2, #1
 80006d6:	4619      	mov	r1, r3
 80006d8:	f001 f8a3 	bl	8001822 <HAL_GPIO_WritePin>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <_ZN9PinOutput3lowEv>:

void PinOutput::low() {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_port, _pin, GPIO_PIN_RESET);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6858      	ldr	r0, [r3, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	891b      	ldrh	r3, [r3, #8]
 80006f4:	2200      	movs	r2, #0
 80006f6:	4619      	mov	r1, r3
 80006f8:	f001 f893 	bl	8001822 <HAL_GPIO_WritePin>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <_ZN9PinOutputD1Ev>:

PinOutput::~PinOutput() {
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	4a04      	ldr	r2, [pc, #16]	; (8000720 <_ZN9PinOutputD1Ev+0x1c>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	08009858 	.word	0x08009858

08000724 <_ZN9PinOutputD0Ev>:
PinOutput::~PinOutput() {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
}
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ffe9 	bl	8000704 <_ZN9PinOutputD1Ev>
 8000732:	210c      	movs	r1, #12
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f008 f89d 	bl	8008874 <_ZdlPvj>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af02      	add	r7, sp, #8
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <_ZNSt7__cxx119to_stringEi+0x24>)
 8000756:	2210      	movs	r2, #16
 8000758:	4904      	ldr	r1, [pc, #16]	; (800076c <_ZNSt7__cxx119to_stringEi+0x28>)
 800075a:	f000 fa5e 	bl	8000c1a <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	0800979c 	.word	0x0800979c
 800076c:	0800910d 	.word	0x0800910d

08000770 <_ZNSt7__cxx119to_stringEl>:
					   4 * sizeof(unsigned),
					   "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af02      	add	r7, sp, #8
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
					   "%ld", __val); }
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <_ZNSt7__cxx119to_stringEl+0x24>)
 8000782:	2210      	movs	r2, #16
 8000784:	4904      	ldr	r1, [pc, #16]	; (8000798 <_ZNSt7__cxx119to_stringEl+0x28>)
 8000786:	f000 fa48 	bl	8000c1a <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	080097a0 	.word	0x080097a0
 8000798:	0800910d 	.word	0x0800910d

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0e0      	sub	sp, #384	; 0x180
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a2:	f000 fd0f 	bl	80011c4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a6:	f000 f913 	bl	80009d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f000 f9b7 	bl	8000b1c <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 80007ae:	f007 fbc5 	bl	8007f3c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80007b2:	f000 f977 	bl	8000aa4 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(nRESET_GPIO_Port, nRESET_Pin, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2104      	movs	r1, #4
 80007ba:	487f      	ldr	r0, [pc, #508]	; (80009b8 <main+0x21c>)
 80007bc:	f001 f831 	bl	8001822 <HAL_GPIO_WritePin>

	ads1298.setup();
 80007c0:	487e      	ldr	r0, [pc, #504]	; (80009bc <main+0x220>)
 80007c2:	f7ff fdc7 	bl	8000354 <_ZN7ADS12985setupEv>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  uint8_t id = ads1298.readRegister(REG_ADDR_ID);

	  if (HAL_GPIO_ReadPin(nDRDY_GPIO_Port, nDRDY_Pin) == GPIO_PIN_RESET) {
 80007c6:	2110      	movs	r1, #16
 80007c8:	487d      	ldr	r0, [pc, #500]	; (80009c0 <main+0x224>)
 80007ca:	f001 f813 	bl	80017f4 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf0c      	ite	eq
 80007d4:	2301      	moveq	r3, #1
 80007d6:	2300      	movne	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0f3      	beq.n	80007c6 <main+0x2a>
		  int32_t channels[8];
		  HAL_StatusTypeDef status = ads1298.getChannelData(channels);
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	4876      	ldr	r0, [pc, #472]	; (80009bc <main+0x220>)
 80007e4:	f7ff fe6a 	bl	80004bc <_ZN7ADS129814getChannelDataEPl>
 80007e8:	4603      	mov	r3, r0
 80007ea:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f

		  if (status == HAL_OK) {
 80007ee:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 80a5 	bne.w	8000942 <main+0x1a6>
			  const char *buffer = (std::to_string(channels[0]) + "," + std::to_string(channels[1]) + "," + std::to_string(channels[2]) + "," + std::to_string(channels[3]) + "\r\n").c_str();
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000800:	4611      	mov	r1, r2
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ffb4 	bl	8000770 <_ZNSt7__cxx119to_stringEl>
 8000808:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800080c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000810:	4a6c      	ldr	r2, [pc, #432]	; (80009c4 <main+0x228>)
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fa39 	bl	8000c8a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	685a      	ldr	r2, [r3, #4]
 800081c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ffa4 	bl	8000770 <_ZNSt7__cxx119to_stringEl>
 8000828:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800082c:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8000830:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fa3f 	bl	8000cb8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 800083a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800083e:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8000842:	4a60      	ldr	r2, [pc, #384]	; (80009c4 <main+0x228>)
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fa20 	bl	8000c8a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff8b 	bl	8000770 <_ZNSt7__cxx119to_stringEl>
 800085a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800085e:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8000862:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fa26 	bl	8000cb8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 800086c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000870:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000874:	4a53      	ldr	r2, [pc, #332]	; (80009c4 <main+0x228>)
 8000876:	4618      	mov	r0, r3
 8000878:	f000 fa07 	bl	8000c8a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	68da      	ldr	r2, [r3, #12]
 8000880:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff72 	bl	8000770 <_ZNSt7__cxx119to_stringEl>
 800088c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000890:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000894:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fa0d 	bl	8000cb8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80008a6:	4a48      	ldr	r2, [pc, #288]	; (80009c8 <main+0x22c>)
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f9ee 	bl	8000c8a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	4618      	mov	r0, r3
 80008b4:	f008 fa64 	bl	8008d80 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80008b8:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	4618      	mov	r0, r3
 80008c2:	f008 f962 	bl	8008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80008c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008ca:	4618      	mov	r0, r3
 80008cc:	f008 f95d 	bl	8008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80008d0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80008d4:	4618      	mov	r0, r3
 80008d6:	f008 f958 	bl	8008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80008da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008de:	4618      	mov	r0, r3
 80008e0:	f008 f953 	bl	8008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80008e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008e8:	4618      	mov	r0, r3
 80008ea:	f008 f94e 	bl	8008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80008ee:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80008f2:	4618      	mov	r0, r3
 80008f4:	f008 f949 	bl	8008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80008f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80008fc:	4618      	mov	r0, r3
 80008fe:	f008 f944 	bl	8008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000902:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000906:	4618      	mov	r0, r3
 8000908:	f008 f93f 	bl	8008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800090c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000910:	4618      	mov	r0, r3
 8000912:	f008 f93a 	bl	8008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000916:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800091a:	4618      	mov	r0, r3
 800091c:	f008 f935 	bl	8008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000920:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000924:	4618      	mov	r0, r3
 8000926:	f008 f930 	bl	8008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			  CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 800092a:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 800092e:	f7ff fc0d 	bl	800014c <strlen>
 8000932:	4603      	mov	r3, r0
 8000934:	b29b      	uxth	r3, r3
 8000936:	4619      	mov	r1, r3
 8000938:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 800093c:	f007 fbbc 	bl	80080b8 <CDC_Transmit_FS>
 8000940:	e741      	b.n	80007c6 <main+0x2a>
		  } else {
			  const char *buffer = ("HAL status: " + std::to_string(status) + "\r\n").c_str();
 8000942:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 8000946:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fef9 	bl	8000744 <_ZNSt7__cxx119to_stringEi>
 8000952:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000956:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 800095a:	491c      	ldr	r1, [pc, #112]	; (80009cc <main+0x230>)
 800095c:	4618      	mov	r0, r3
 800095e:	f000 f9ec 	bl	8000d3a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8000962:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000966:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <main+0x22c>)
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f98c 	bl	8000c8a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8000972:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000976:	4618      	mov	r0, r3
 8000978:	f008 fa02 	bl	8008d80 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800097c:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8000980:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000984:	4618      	mov	r0, r3
 8000986:	f008 f900 	bl	8008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800098a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800098e:	4618      	mov	r0, r3
 8000990:	f008 f8fb 	bl	8008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000994:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8000998:	4618      	mov	r0, r3
 800099a:	f008 f8f6 	bl	8008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			  CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 800099e:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 80009a2:	f7ff fbd3 	bl	800014c <strlen>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	4619      	mov	r1, r3
 80009ac:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 80009b0:	f007 fb82 	bl	80080b8 <CDC_Transmit_FS>
//	  CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
//	  HAL_Delay(500);

	  //HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
//	  HAL_Delay(500);
  }
 80009b4:	e707      	b.n	80007c6 <main+0x2a>
 80009b6:	bf00      	nop
 80009b8:	40010c00 	.word	0x40010c00
 80009bc:	20000278 	.word	0x20000278
 80009c0:	40010800 	.word	0x40010800
 80009c4:	080097a4 	.word	0x080097a4
 80009c8:	080097a8 	.word	0x080097a8
 80009cc:	080097ac 	.word	0x080097ac

080009d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	; 0x50
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009da:	2228      	movs	r2, #40	; 0x28
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f008 fa66 	bl	8008eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a12:	2302      	movs	r3, #2
 8000a14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000a1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fbd8 	bl	80031dc <HAL_RCC_OscConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bf14      	ite	ne
 8000a32:	2301      	movne	r3, #1
 8000a34:	2300      	moveq	r3, #0
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000a3c:	f000 f8e8 	bl	8000c10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	230f      	movs	r3, #15
 8000a42:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a50:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 fe3d 	bl	80036dc <HAL_RCC_ClockConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf14      	ite	ne
 8000a68:	2301      	movne	r3, #1
 8000a6a:	2300      	moveq	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8000a72:	f000 f8cd 	bl	8000c10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a76:	2310      	movs	r3, #16
 8000a78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000a7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a7e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 ff92 	bl	80039ac <HAL_RCCEx_PeriphCLKConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bf14      	ite	ne
 8000a8e:	2301      	movne	r3, #1
 8000a90:	2300      	moveq	r3, #0
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8000a98:	f000 f8ba 	bl	8000c10 <Error_Handler>
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3750      	adds	r7, #80	; 0x50
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <_ZL12MX_SPI1_Initv+0x70>)
 8000aaa:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <_ZL12MX_SPI1_Initv+0x74>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <_ZL12MX_SPI1_Initv+0x70>)
 8000ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <_ZL12MX_SPI1_Initv+0x70>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <_ZL12MX_SPI1_Initv+0x70>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <_ZL12MX_SPI1_Initv+0x70>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <_ZL12MX_SPI1_Initv+0x70>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <_ZL12MX_SPI1_Initv+0x70>)
 8000ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <_ZL12MX_SPI1_Initv+0x70>)
 8000ad8:	2208      	movs	r2, #8
 8000ada:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <_ZL12MX_SPI1_Initv+0x70>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <_ZL12MX_SPI1_Initv+0x70>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <_ZL12MX_SPI1_Initv+0x70>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <_ZL12MX_SPI1_Initv+0x70>)
 8000af0:	220a      	movs	r2, #10
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <_ZL12MX_SPI1_Initv+0x70>)
 8000af6:	f003 f80f 	bl	8003b18 <HAL_SPI_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	bf14      	ite	ne
 8000b00:	2301      	movne	r3, #1
 8000b02:	2300      	moveq	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000b0a:	f000 f881 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000220 	.word	0x20000220
 8000b18:	40013000 	.word	0x40013000

08000b1c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b30:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <_ZL12MX_GPIO_Initv+0xe4>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a32      	ldr	r2, [pc, #200]	; (8000c00 <_ZL12MX_GPIO_Initv+0xe4>)
 8000b36:	f043 0310 	orr.w	r3, r3, #16
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <_ZL12MX_GPIO_Initv+0xe4>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0310 	and.w	r3, r3, #16
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b48:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <_ZL12MX_GPIO_Initv+0xe4>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a2c      	ldr	r2, [pc, #176]	; (8000c00 <_ZL12MX_GPIO_Initv+0xe4>)
 8000b4e:	f043 0320 	orr.w	r3, r3, #32
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <_ZL12MX_GPIO_Initv+0xe4>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0320 	and.w	r3, r3, #32
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <_ZL12MX_GPIO_Initv+0xe4>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a26      	ldr	r2, [pc, #152]	; (8000c00 <_ZL12MX_GPIO_Initv+0xe4>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <_ZL12MX_GPIO_Initv+0xe4>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <_ZL12MX_GPIO_Initv+0xe4>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a20      	ldr	r2, [pc, #128]	; (8000c00 <_ZL12MX_GPIO_Initv+0xe4>)
 8000b7e:	f043 0308 	orr.w	r3, r3, #8
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <_ZL12MX_GPIO_Initv+0xe4>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0308 	and.w	r3, r3, #8
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_ERROR_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000b96:	481b      	ldr	r0, [pc, #108]	; (8000c04 <_ZL12MX_GPIO_Initv+0xe8>)
 8000b98:	f000 fe43 	bl	8001822 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nCS_Pin|START_Pin|nRESET_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2107      	movs	r1, #7
 8000ba0:	4819      	ldr	r0, [pc, #100]	; (8000c08 <_ZL12MX_GPIO_Initv+0xec>)
 8000ba2:	f000 fe3e 	bl	8001822 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_ERROR_Pin LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_ERROR_Pin|LED_STATUS_Pin;
 8000ba6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4811      	ldr	r0, [pc, #68]	; (8000c04 <_ZL12MX_GPIO_Initv+0xe8>)
 8000bc0:	f000 fc94 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : nDRDY_Pin */
  GPIO_InitStruct.Pin = nDRDY_Pin;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(nDRDY_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480d      	ldr	r0, [pc, #52]	; (8000c0c <_ZL12MX_GPIO_Initv+0xf0>)
 8000bd8:	f000 fc88 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pins : nCS_Pin START_Pin nRESET_Pin */
  GPIO_InitStruct.Pin = nCS_Pin|START_Pin|nRESET_Pin;
 8000bdc:	2307      	movs	r3, #7
 8000bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <_ZL12MX_GPIO_Initv+0xec>)
 8000bf4:	f000 fc7a 	bl	80014ec <HAL_GPIO_Init>

}
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40011000 	.word	0x40011000
 8000c08:	40010c00 	.word	0x40010c00
 8000c0c:	40010800 	.word	0x40010800

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>

08000c1a <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8000c1a:	b408      	push	{r3}
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3307      	adds	r3, #7
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	ebad 0d03 	sub.w	sp, sp, r3
 8000c34:	466b      	mov	r3, sp
 8000c36:	3307      	adds	r3, #7
 8000c38:	08db      	lsrs	r3, r3, #3
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8000c3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c42:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8000c44:	68bc      	ldr	r4, [r7, #8]
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	69f8      	ldr	r0, [r7, #28]
 8000c4e:	47a0      	blx	r4
 8000c50:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	69fa      	ldr	r2, [r7, #28]
 8000c56:	18d4      	adds	r4, r2, r3
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f007 fe0b 	bl	8008878 <_ZNSaIcEC1Ev>
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4622      	mov	r2, r4
 8000c68:	69f9      	ldr	r1, [r7, #28]
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	f000 f87d 	bl	8000d6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4618      	mov	r0, r3
 8000c76:	f007 fe00 	bl	800887a <_ZNSaIcED1Ev>
 8000c7a:	bf00      	nop
    }
 8000c7c:	68f8      	ldr	r0, [r7, #12]
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000c86:	b001      	add	sp, #4
 8000c88:	4770      	bx	lr

08000c8a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b084      	sub	sp, #16
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	68b8      	ldr	r0, [r7, #8]
 8000c9a:	f008 f85b 	bl	8008d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f87d 	bl	8000da0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f007 ff53 	bl	8008b56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b087      	sub	sp, #28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
      const auto __size = __lhs.size() + __rhs.size();
 8000cc4:	68b8      	ldr	r0, [r7, #8]
 8000cc6:	f007 ff66 	bl	8008b96 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f007 ff62 	bl	8008b96 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4423      	add	r3, r4
 8000cd6:	617b      	str	r3, [r7, #20]
      const bool __cond = (__size > __lhs.capacity()
 8000cd8:	68b8      	ldr	r0, [r7, #8]
 8000cda:	f007 ff5e 	bl	8008b9a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8000cde:	4602      	mov	r2, r0
			   && __size <= __rhs.capacity());
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d908      	bls.n	8000cf8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x40>
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f007 ff57 	bl	8008b9a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8000cec:	4602      	mov	r2, r0
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d801      	bhi.n	8000cf8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x40>
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x42>
 8000cf8:	2300      	movs	r3, #0
      const bool __cond = (__size > __lhs.capacity()
 8000cfa:	74fb      	strb	r3, [r7, #19]
	            : std::move(__lhs.append(__rhs));
 8000cfc:	7cfb      	ldrb	r3, [r7, #19]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00a      	beq.n	8000d18 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x60>
      return __cond ? std::move(__rhs.insert(0, __lhs))
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	2100      	movs	r1, #0
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f007 ffe4 	bl	8008cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f846 	bl	8000da0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8000d14:	4603      	mov	r3, r0
 8000d16:	e008      	b.n	8000d2a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x72>
	            : std::move(__lhs.append(__rhs));
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	68b8      	ldr	r0, [r7, #8]
 8000d1c:	f008 f814 	bl	8008d48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f83c 	bl	8000da0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f007 ff12 	bl	8008b56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8000d32:	68f8      	ldr	r0, [r7, #12]
 8000d34:	371c      	adds	r7, #28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd90      	pop	{r4, r7, pc}

08000d3a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f007 ffcc 	bl	8008ce8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f824 	bl	8000da0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f007 fefa 	bl	8008b56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8000d6a:	b590      	push	{r4, r7, lr}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8000d78:	68fc      	ldr	r4, [r7, #12]
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f007 fe3d 	bl	80089fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000d80:	4603      	mov	r3, r0
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	4620      	mov	r0, r4
 8000d88:	f007 fffc 	bl	8008d84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	68b9      	ldr	r1, [r7, #8]
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f000 f80f 	bl	8000db4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd90      	pop	{r4, r7, pc}

08000da0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f000 f804 	bl	8000dd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8000dd2:	b590      	push	{r4, r7, lr}
 8000dd4:	b087      	sub	sp, #28
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8000de0:	4623      	mov	r3, r4
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f000 f804 	bl	8000df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8000dec:	bf00      	nop
 8000dee:	371c      	adds	r7, #28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd90      	pop	{r4, r7, pc}

08000df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8000e02:	68b8      	ldr	r0, [r7, #8]
 8000e04:	f000 f83e 	bl	8000e84 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d005      	beq.n	8000e1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d001      	beq.n	8000e1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8000e16:	2301      	movs	r3, #1
 8000e18:	e000      	b.n	8000e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8000e20:	4817      	ldr	r0, [pc, #92]	; (8000e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8000e22:	f007 fd2e 	bl	8008882 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	68b8      	ldr	r0, [r7, #8]
 8000e2a:	f000 f83a 	bl	8000ea2 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d910      	bls.n	8000e5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4619      	mov	r1, r3
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f007 fde3 	bl	8008a0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	68f8      	ldr	r0, [r7, #12]
 8000e4c:	f007 fdd1 	bl	80089f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	4619      	mov	r1, r3
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f007 fdd2 	bl	80089fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f007 fdcb 	bl	80089f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8000e60:	4603      	mov	r3, r0
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f007 fe35 	bl	8008ad6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f007 fdc6 	bl	8008a02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	080097bc 	.word	0x080097bc

08000e84 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	bf0c      	ite	eq
 8000e92:	2301      	moveq	r3, #1
 8000e94:	2300      	movne	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8000ea2:	b5b0      	push	{r4, r5, r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8000eac:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 f80a 	bl	8000eca <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8000eb6:	462a      	mov	r2, r5
 8000eb8:	6839      	ldr	r1, [r7, #0]
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f000 f80e 	bl	8000edc <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8000ec0:	4603      	mov	r3, r0
    }
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bdb0      	pop	{r4, r5, r7, pc}

08000eca <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	1ad3      	subs	r3, r2, r3
    }
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d108      	bne.n	8000f1a <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d103      	bne.n	8000f1a <_Z41__static_initialization_and_destruction_0ii+0x22>
ADS1298 ads1298(&hspi1);
 8000f12:	4909      	ldr	r1, [pc, #36]	; (8000f38 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000f16:	f7ff f951 	bl	80001bc <_ZN7ADS1298C1EP19__SPI_HandleTypeDef>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d107      	bne.n	8000f30 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d102      	bne.n	8000f30 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000f2c:	f7ff f964 	bl	80001f8 <_ZN7ADS1298D1Ev>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000220 	.word	0x20000220
 8000f3c:	20000278 	.word	0x20000278

08000f40 <_GLOBAL__sub_I_hspi1>:
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff ffd5 	bl	8000ef8 <_Z41__static_initialization_and_destruction_0ii>
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_GLOBAL__sub_D_hspi1>:
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff ffcd 	bl	8000ef8 <_Z41__static_initialization_and_destruction_0ii>
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_MspInit+0x5c>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <HAL_MspInit+0x5c>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6193      	str	r3, [r2, #24]
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_MspInit+0x5c>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <HAL_MspInit+0x5c>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <HAL_MspInit+0x5c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_MspInit+0x5c>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_MspInit+0x60>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_MspInit+0x60>)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a1b      	ldr	r2, [pc, #108]	; (800104c <HAL_SPI_MspInit+0x88>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d12f      	bne.n	8001044 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_SPI_MspInit+0x8c>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a19      	ldr	r2, [pc, #100]	; (8001050 <HAL_SPI_MspInit+0x8c>)
 8000fea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_SPI_MspInit+0x8c>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_SPI_MspInit+0x8c>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <HAL_SPI_MspInit+0x8c>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_SPI_MspInit+0x8c>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001014:	23a0      	movs	r3, #160	; 0xa0
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <HAL_SPI_MspInit+0x90>)
 8001028:	f000 fa60 	bl	80014ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800102c:	2340      	movs	r3, #64	; 0x40
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_SPI_MspInit+0x90>)
 8001040:	f000 fa54 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40013000 	.word	0x40013000
 8001050:	40021000 	.word	0x40021000
 8001054:	40010800 	.word	0x40010800

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109e:	f000 f8d7 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010ae:	f000 fd01 	bl	8001ab4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200011a4 	.word	0x200011a4

080010bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
	return 1;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <_kill>:

int _kill(int pid, int sig)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010d4:	f007 fe7c 	bl	8008dd0 <__errno>
 80010d8:	4603      	mov	r3, r0
 80010da:	2216      	movs	r2, #22
 80010dc:	601a      	str	r2, [r3, #0]
	return -1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_exit>:

void _exit (int status)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffe7 	bl	80010ca <_kill>
	while (1) {}		/* Make sure we hang here */
 80010fc:	e7fe      	b.n	80010fc <_exit+0x12>
	...

08001100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001108:	4a14      	ldr	r2, [pc, #80]	; (800115c <_sbrk+0x5c>)
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <_sbrk+0x60>)
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d102      	bne.n	8001122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <_sbrk+0x64>)
 800111e:	4a12      	ldr	r2, [pc, #72]	; (8001168 <_sbrk+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	429a      	cmp	r2, r3
 800112e:	d207      	bcs.n	8001140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001130:	f007 fe4e 	bl	8008dd0 <__errno>
 8001134:	4603      	mov	r3, r0
 8001136:	220c      	movs	r2, #12
 8001138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800113e:	e009      	b.n	8001154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <_sbrk+0x64>)
 8001150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20005000 	.word	0x20005000
 8001160:	00000400 	.word	0x00000400
 8001164:	200002d8 	.word	0x200002d8
 8001168:	200014a0 	.word	0x200014a0

0800116c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800117a:	490d      	ldr	r1, [pc, #52]	; (80011b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001190:	4c0a      	ldr	r4, [pc, #40]	; (80011bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800119e:	f7ff ffe5 	bl	800116c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f007 fe1b 	bl	8008ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a6:	f7ff faf9 	bl	800079c <main>
  bx lr
 80011aa:	4770      	bx	lr
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80011b4:	080099c4 	.word	0x080099c4
  ldr r2, =_sbss
 80011b8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80011bc:	200014a0 	.word	0x200014a0

080011c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC1_2_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_Init+0x28>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_Init+0x28>)
 80011ce:	f043 0310 	orr.w	r3, r3, #16
 80011d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f947 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	200f      	movs	r0, #15
 80011dc:	f000 f808 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff febe 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40022000 	.word	0x40022000

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x54>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f95f 	bl	80014d2 <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800122c:	f000 f927 	bl	800147e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_InitTick+0x5c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000000 	.word	0x20000000
 8001248:	20000008 	.word	0x20000008
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x1c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_IncTick+0x20>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a03      	ldr	r2, [pc, #12]	; (8001270 <HAL_IncTick+0x20>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	20000008 	.word	0x20000008
 8001270:	2000050c 	.word	0x2000050c

08001274 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b02      	ldr	r3, [pc, #8]	; (8001284 <HAL_GetTick+0x10>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	2000050c 	.word	0x2000050c

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff fff0 	bl	8001274 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_Delay+0x44>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffe0 	bl	8001274 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000008 	.word	0x20000008

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4906      	ldr	r1, [pc, #24]	; (8001368 <__NVIC_EnableIRQ+0x34>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	; (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001434:	d301      	bcc.n	800143a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001436:	2301      	movs	r3, #1
 8001438:	e00f      	b.n	800145a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <SysTick_Config+0x40>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001442:	210f      	movs	r1, #15
 8001444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001448:	f7ff ff90 	bl	800136c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <SysTick_Config+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <SysTick_Config+0x40>)
 8001454:	2207      	movs	r2, #7
 8001456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff2d 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001490:	f7ff ff42 	bl	8001318 <__NVIC_GetPriorityGrouping>
 8001494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	6978      	ldr	r0, [r7, #20]
 800149c:	f7ff ff90 	bl	80013c0 <NVIC_EncodePriority>
 80014a0:	4602      	mov	r2, r0
 80014a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff5f 	bl	800136c <__NVIC_SetPriority>
}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff35 	bl	8001334 <__NVIC_EnableIRQ>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ffa2 	bl	8001424 <SysTick_Config>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b08b      	sub	sp, #44	; 0x2c
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fe:	e169      	b.n	80017d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001500:	2201      	movs	r2, #1
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	429a      	cmp	r2, r3
 800151a:	f040 8158 	bne.w	80017ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a9a      	ldr	r2, [pc, #616]	; (800178c <HAL_GPIO_Init+0x2a0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d05e      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 8001528:	4a98      	ldr	r2, [pc, #608]	; (800178c <HAL_GPIO_Init+0x2a0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d875      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 800152e:	4a98      	ldr	r2, [pc, #608]	; (8001790 <HAL_GPIO_Init+0x2a4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d058      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 8001534:	4a96      	ldr	r2, [pc, #600]	; (8001790 <HAL_GPIO_Init+0x2a4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d86f      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 800153a:	4a96      	ldr	r2, [pc, #600]	; (8001794 <HAL_GPIO_Init+0x2a8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d052      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 8001540:	4a94      	ldr	r2, [pc, #592]	; (8001794 <HAL_GPIO_Init+0x2a8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d869      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 8001546:	4a94      	ldr	r2, [pc, #592]	; (8001798 <HAL_GPIO_Init+0x2ac>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d04c      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 800154c:	4a92      	ldr	r2, [pc, #584]	; (8001798 <HAL_GPIO_Init+0x2ac>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d863      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 8001552:	4a92      	ldr	r2, [pc, #584]	; (800179c <HAL_GPIO_Init+0x2b0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d046      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
 8001558:	4a90      	ldr	r2, [pc, #576]	; (800179c <HAL_GPIO_Init+0x2b0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d85d      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 800155e:	2b12      	cmp	r3, #18
 8001560:	d82a      	bhi.n	80015b8 <HAL_GPIO_Init+0xcc>
 8001562:	2b12      	cmp	r3, #18
 8001564:	d859      	bhi.n	800161a <HAL_GPIO_Init+0x12e>
 8001566:	a201      	add	r2, pc, #4	; (adr r2, 800156c <HAL_GPIO_Init+0x80>)
 8001568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156c:	080015e7 	.word	0x080015e7
 8001570:	080015c1 	.word	0x080015c1
 8001574:	080015d3 	.word	0x080015d3
 8001578:	08001615 	.word	0x08001615
 800157c:	0800161b 	.word	0x0800161b
 8001580:	0800161b 	.word	0x0800161b
 8001584:	0800161b 	.word	0x0800161b
 8001588:	0800161b 	.word	0x0800161b
 800158c:	0800161b 	.word	0x0800161b
 8001590:	0800161b 	.word	0x0800161b
 8001594:	0800161b 	.word	0x0800161b
 8001598:	0800161b 	.word	0x0800161b
 800159c:	0800161b 	.word	0x0800161b
 80015a0:	0800161b 	.word	0x0800161b
 80015a4:	0800161b 	.word	0x0800161b
 80015a8:	0800161b 	.word	0x0800161b
 80015ac:	0800161b 	.word	0x0800161b
 80015b0:	080015c9 	.word	0x080015c9
 80015b4:	080015dd 	.word	0x080015dd
 80015b8:	4a79      	ldr	r2, [pc, #484]	; (80017a0 <HAL_GPIO_Init+0x2b4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d013      	beq.n	80015e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015be:	e02c      	b.n	800161a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	623b      	str	r3, [r7, #32]
          break;
 80015c6:	e029      	b.n	800161c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	3304      	adds	r3, #4
 80015ce:	623b      	str	r3, [r7, #32]
          break;
 80015d0:	e024      	b.n	800161c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	3308      	adds	r3, #8
 80015d8:	623b      	str	r3, [r7, #32]
          break;
 80015da:	e01f      	b.n	800161c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	330c      	adds	r3, #12
 80015e2:	623b      	str	r3, [r7, #32]
          break;
 80015e4:	e01a      	b.n	800161c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ee:	2304      	movs	r3, #4
 80015f0:	623b      	str	r3, [r7, #32]
          break;
 80015f2:	e013      	b.n	800161c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d105      	bne.n	8001608 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015fc:	2308      	movs	r3, #8
 80015fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	611a      	str	r2, [r3, #16]
          break;
 8001606:	e009      	b.n	800161c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001608:	2308      	movs	r3, #8
 800160a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	615a      	str	r2, [r3, #20]
          break;
 8001612:	e003      	b.n	800161c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
          break;
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x130>
          break;
 800161a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	2bff      	cmp	r3, #255	; 0xff
 8001620:	d801      	bhi.n	8001626 <HAL_GPIO_Init+0x13a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	e001      	b.n	800162a <HAL_GPIO_Init+0x13e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3304      	adds	r3, #4
 800162a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2bff      	cmp	r3, #255	; 0xff
 8001630:	d802      	bhi.n	8001638 <HAL_GPIO_Init+0x14c>
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	e002      	b.n	800163e <HAL_GPIO_Init+0x152>
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	3b08      	subs	r3, #8
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	210f      	movs	r1, #15
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	401a      	ands	r2, r3
 8001650:	6a39      	ldr	r1, [r7, #32]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	431a      	orrs	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80b1 	beq.w	80017ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800166c:	4b4d      	ldr	r3, [pc, #308]	; (80017a4 <HAL_GPIO_Init+0x2b8>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a4c      	ldr	r2, [pc, #304]	; (80017a4 <HAL_GPIO_Init+0x2b8>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b4a      	ldr	r3, [pc, #296]	; (80017a4 <HAL_GPIO_Init+0x2b8>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001684:	4a48      	ldr	r2, [pc, #288]	; (80017a8 <HAL_GPIO_Init+0x2bc>)
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	3302      	adds	r3, #2
 800168c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001690:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	220f      	movs	r2, #15
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4013      	ands	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a40      	ldr	r2, [pc, #256]	; (80017ac <HAL_GPIO_Init+0x2c0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d013      	beq.n	80016d8 <HAL_GPIO_Init+0x1ec>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a3f      	ldr	r2, [pc, #252]	; (80017b0 <HAL_GPIO_Init+0x2c4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00d      	beq.n	80016d4 <HAL_GPIO_Init+0x1e8>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a3e      	ldr	r2, [pc, #248]	; (80017b4 <HAL_GPIO_Init+0x2c8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d007      	beq.n	80016d0 <HAL_GPIO_Init+0x1e4>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a3d      	ldr	r2, [pc, #244]	; (80017b8 <HAL_GPIO_Init+0x2cc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <HAL_GPIO_Init+0x1e0>
 80016c8:	2303      	movs	r3, #3
 80016ca:	e006      	b.n	80016da <HAL_GPIO_Init+0x1ee>
 80016cc:	2304      	movs	r3, #4
 80016ce:	e004      	b.n	80016da <HAL_GPIO_Init+0x1ee>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e002      	b.n	80016da <HAL_GPIO_Init+0x1ee>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <HAL_GPIO_Init+0x1ee>
 80016d8:	2300      	movs	r3, #0
 80016da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016dc:	f002 0203 	and.w	r2, r2, #3
 80016e0:	0092      	lsls	r2, r2, #2
 80016e2:	4093      	lsls	r3, r2
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ea:	492f      	ldr	r1, [pc, #188]	; (80017a8 <HAL_GPIO_Init+0x2bc>)
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	492c      	ldr	r1, [pc, #176]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	43db      	mvns	r3, r3
 800171a:	4928      	ldr	r1, [pc, #160]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800171c:	4013      	ands	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4922      	ldr	r1, [pc, #136]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	43db      	mvns	r3, r3
 8001742:	491e      	ldr	r1, [pc, #120]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001744:	4013      	ands	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	4918      	ldr	r1, [pc, #96]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	608b      	str	r3, [r1, #8]
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	43db      	mvns	r3, r3
 800176a:	4914      	ldr	r1, [pc, #80]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800176c:	4013      	ands	r3, r2
 800176e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d021      	beq.n	80017c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	490e      	ldr	r1, [pc, #56]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	60cb      	str	r3, [r1, #12]
 8001788:	e021      	b.n	80017ce <HAL_GPIO_Init+0x2e2>
 800178a:	bf00      	nop
 800178c:	10320000 	.word	0x10320000
 8001790:	10310000 	.word	0x10310000
 8001794:	10220000 	.word	0x10220000
 8001798:	10210000 	.word	0x10210000
 800179c:	10120000 	.word	0x10120000
 80017a0:	10110000 	.word	0x10110000
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010000 	.word	0x40010000
 80017ac:	40010800 	.word	0x40010800
 80017b0:	40010c00 	.word	0x40010c00
 80017b4:	40011000 	.word	0x40011000
 80017b8:	40011400 	.word	0x40011400
 80017bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_GPIO_Init+0x304>)
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4909      	ldr	r1, [pc, #36]	; (80017f0 <HAL_GPIO_Init+0x304>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	3301      	adds	r3, #1
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	fa22 f303 	lsr.w	r3, r2, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f47f ae8e 	bne.w	8001500 <HAL_GPIO_Init+0x14>
  }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	372c      	adds	r7, #44	; 0x2c
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	40010400 	.word	0x40010400

080017f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e001      	b.n	8001816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	460b      	mov	r3, r1
 800182c:	807b      	strh	r3, [r7, #2]
 800182e:	4613      	mov	r3, r2
 8001830:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001832:	787b      	ldrb	r3, [r7, #1]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001838:	887a      	ldrh	r2, [r7, #2]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800183e:	e003      	b.n	8001848 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	041a      	lsls	r2, r3, #16
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	611a      	str	r2, [r3, #16]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001852:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001854:	b08b      	sub	sp, #44	; 0x2c
 8001856:	af06      	add	r7, sp, #24
 8001858:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0fd      	b.n	8001a60 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d106      	bne.n	800187e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f006 fd51 	bl	8008320 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2203      	movs	r2, #3
 8001882:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f002 fd80 	bl	8004390 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	687e      	ldr	r6, [r7, #4]
 8001898:	466d      	mov	r5, sp
 800189a:	f106 0410 	add.w	r4, r6, #16
 800189e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	602b      	str	r3, [r5, #0]
 80018a6:	1d33      	adds	r3, r6, #4
 80018a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018aa:	6838      	ldr	r0, [r7, #0]
 80018ac:	f002 fd4a 	bl	8004344 <USB_CoreInit>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2202      	movs	r2, #2
 80018ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e0ce      	b.n	8001a60 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 fd7b 	bl	80043c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	e04c      	b.n	800196e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	3301      	adds	r3, #1
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	b298      	uxth	r0, r3
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	3336      	adds	r3, #54	; 0x36
 8001912:	4602      	mov	r2, r0
 8001914:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	440b      	add	r3, r1
 8001926:	3303      	adds	r3, #3
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	3338      	adds	r3, #56	; 0x38
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	440b      	add	r3, r1
 800194e:	333c      	adds	r3, #60	; 0x3c
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	3340      	adds	r3, #64	; 0x40
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	3301      	adds	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	d3ad      	bcc.n	80018d4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
 800197c:	e044      	b.n	8001a08 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800197e:	7bfa      	ldrb	r2, [r7, #15]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019a6:	7bfa      	ldrb	r2, [r7, #15]
 80019a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019aa:	7bfa      	ldrb	r2, [r7, #15]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	440b      	add	r3, r1
 80019b8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019ec:	7bfa      	ldrb	r2, [r7, #15]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	440b      	add	r3, r1
 80019fa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	3301      	adds	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d3b5      	bcc.n	800197e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	687e      	ldr	r6, [r7, #4]
 8001a1a:	466d      	mov	r5, sp
 8001a1c:	f106 0410 	add.w	r4, r6, #16
 8001a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	602b      	str	r3, [r5, #0]
 8001a28:	1d33      	adds	r3, r6, #4
 8001a2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a2c:	6838      	ldr	r0, [r7, #0]
 8001a2e:	f002 fcd5 	bl	80043dc <USB_DevInit>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e00d      	b.n	8001a60 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f004 fe46 	bl	80066ea <USB_DevDisconnect>

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_PCD_Start+0x16>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e016      	b.n	8001aac <HAL_PCD_Start+0x44>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fc6a 	bl	8004364 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a90:	2101      	movs	r1, #1
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f006 feb7 	bl	8008806 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f004 fe1a 	bl	80066d6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f004 fe1c 	bl	80066fe <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ad0:	d102      	bne.n	8001ad8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 fb61 	bl	800219a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 fe0e 	bl	80066fe <USB_ReadInterrupts>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aec:	d112      	bne.n	8001b14 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b00:	b292      	uxth	r2, r2
 8001b02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f006 fc85 	bl	8008416 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f925 	bl	8001d5e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f004 fdf0 	bl	80066fe <USB_ReadInterrupts>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b28:	d10b      	bne.n	8001b42 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f004 fdd9 	bl	80066fe <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b56:	d10b      	bne.n	8001b70 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b6a:	b292      	uxth	r2, r2
 8001b6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 fdc2 	bl	80066fe <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b84:	d126      	bne.n	8001bd4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0204 	bic.w	r2, r2, #4
 8001b98:	b292      	uxth	r2, r2
 8001b9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0208 	bic.w	r2, r2, #8
 8001bb0:	b292      	uxth	r2, r2
 8001bb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f006 fc66 	bl	8008488 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bce:	b292      	uxth	r2, r2
 8001bd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f004 fd90 	bl	80066fe <USB_ReadInterrupts>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001be8:	f040 8084 	bne.w	8001cf4 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	77fb      	strb	r3, [r7, #31]
 8001bf0:	e011      	b.n	8001c16 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	7ffb      	ldrb	r3, [r7, #31]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	441a      	add	r2, r3
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	8812      	ldrh	r2, [r2, #0]
 8001c02:	b292      	uxth	r2, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	f107 0120 	add.w	r1, r7, #32
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001c10:	7ffb      	ldrb	r3, [r7, #31]
 8001c12:	3301      	adds	r3, #1
 8001c14:	77fb      	strb	r3, [r7, #31]
 8001c16:	7ffb      	ldrb	r3, [r7, #31]
 8001c18:	2b07      	cmp	r3, #7
 8001c1a:	d9ea      	bls.n	8001bf2 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	b292      	uxth	r2, r2
 8001c30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	b292      	uxth	r2, r2
 8001c48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001c4c:	bf00      	nop
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f6      	beq.n	8001c4e <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c72:	b292      	uxth	r2, r2
 8001c74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	77fb      	strb	r3, [r7, #31]
 8001c7c:	e010      	b.n	8001ca0 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001c7e:	7ffb      	ldrb	r3, [r7, #31]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	4611      	mov	r1, r2
 8001c86:	7ffa      	ldrb	r2, [r7, #31]
 8001c88:	0092      	lsls	r2, r2, #2
 8001c8a:	440a      	add	r2, r1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	f107 0120 	add.w	r1, r7, #32
 8001c92:	440b      	add	r3, r1
 8001c94:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001c98:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c9a:	7ffb      	ldrb	r3, [r7, #31]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	77fb      	strb	r3, [r7, #31]
 8001ca0:	7ffb      	ldrb	r3, [r7, #31]
 8001ca2:	2b07      	cmp	r3, #7
 8001ca4:	d9eb      	bls.n	8001c7e <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0208 	orr.w	r2, r2, #8
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0204 	orr.w	r2, r2, #4
 8001ce8:	b292      	uxth	r2, r2
 8001cea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f006 fbb0 	bl	8008454 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f004 fd00 	bl	80066fe <USB_ReadInterrupts>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d08:	d10e      	bne.n	8001d28 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d1c:	b292      	uxth	r2, r2
 8001d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f006 fb69 	bl	80083fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 fce6 	bl	80066fe <USB_ReadInterrupts>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d3c:	d10b      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d50:	b292      	uxth	r2, r2
 8001d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d56:	bf00      	nop
 8001d58:	3720      	adds	r7, #32
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_PCD_SetAddress+0x1a>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e013      	b.n	8001da0 <HAL_PCD_SetAddress+0x42>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	78fa      	ldrb	r2, [r7, #3]
 8001d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f004 fc8d 	bl	80066b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	4608      	mov	r0, r1
 8001db2:	4611      	mov	r1, r2
 8001db4:	461a      	mov	r2, r3
 8001db6:	4603      	mov	r3, r0
 8001db8:	70fb      	strb	r3, [r7, #3]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	803b      	strh	r3, [r7, #0]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da0e      	bge.n	8001dec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	705a      	strb	r2, [r3, #1]
 8001dea:	e00e      	b.n	8001e0a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	f003 0207 	and.w	r2, r3, #7
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e16:	883a      	ldrh	r2, [r7, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	78ba      	ldrb	r2, [r7, #2]
 8001e20:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e34:	78bb      	ldrb	r3, [r7, #2]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d102      	bne.n	8001e40 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_PCD_EP_Open+0xa6>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e00e      	b.n	8001e6c <HAL_PCD_EP_Open+0xc4>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68f9      	ldr	r1, [r7, #12]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 fadd 	bl	800441c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da0e      	bge.n	8001ea6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	705a      	strb	r2, [r3, #1]
 8001ea4:	e00e      	b.n	8001ec4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 0207 	and.w	r2, r3, #7
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_EP_Close+0x6a>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e00e      	b.n	8001efc <HAL_PCD_EP_Close+0x88>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f002 fdff 	bl	8004af0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	460b      	mov	r3, r1
 8001f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	f003 0207 	and.w	r2, r3, #7
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2200      	movs	r2, #0
 8001f42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f44:	7afb      	ldrb	r3, [r7, #11]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f50:	7afb      	ldrb	r3, [r7, #11]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6979      	ldr	r1, [r7, #20]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 ffb1 	bl	8004ec8 <USB_EPStartXfer>
 8001f66:	e005      	b.n	8001f74 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6979      	ldr	r1, [r7, #20]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 ffaa 	bl	8004ec8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f003 0207 	and.w	r2, r3, #7
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001fa0:	681b      	ldr	r3, [r3, #0]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fbc:	7afb      	ldrb	r3, [r7, #11]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff8:	7afb      	ldrb	r3, [r7, #11]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6979      	ldr	r1, [r7, #20]
 8002014:	4618      	mov	r0, r3
 8002016:	f002 ff57 	bl	8004ec8 <USB_EPStartXfer>
 800201a:	e005      	b.n	8002028 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6979      	ldr	r1, [r7, #20]
 8002022:	4618      	mov	r0, r3
 8002024:	f002 ff50 	bl	8004ec8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	f003 0207 	and.w	r2, r3, #7
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	d901      	bls.n	8002050 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e04c      	b.n	80020ea <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002054:	2b00      	cmp	r3, #0
 8002056:	da0e      	bge.n	8002076 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2201      	movs	r2, #1
 8002072:	705a      	strb	r2, [r3, #1]
 8002074:	e00c      	b.n	8002090 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	b2da      	uxtb	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_PCD_EP_SetStall+0x7e>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e01c      	b.n	80020ea <HAL_PCD_EP_SetStall+0xb8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	4618      	mov	r0, r3
 80020c0:	f004 f9f9 	bl	80064b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d108      	bne.n	80020e0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f004 fb1e 	bl	800671c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	f003 020f 	and.w	r2, r3, #15
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	d901      	bls.n	8002110 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e040      	b.n	8002192 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002114:	2b00      	cmp	r3, #0
 8002116:	da0e      	bge.n	8002136 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	705a      	strb	r2, [r3, #1]
 8002134:	e00e      	b.n	8002154 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	f003 0207 	and.w	r2, r3, #7
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	b2da      	uxtb	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_PCD_EP_ClrStall+0x82>
 8002170:	2302      	movs	r3, #2
 8002172:	e00e      	b.n	8002192 <HAL_PCD_EP_ClrStall+0xa0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	4618      	mov	r0, r3
 8002184:	f004 f9e7 	bl	8006556 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b08e      	sub	sp, #56	; 0x38
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021a2:	e2ec      	b.n	800277e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ac:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80021ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 8161 	bne.w	8002486 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d152      	bne.n	8002274 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021de:	81fb      	strh	r3, [r7, #14]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	89fb      	ldrh	r3, [r7, #14]
 80021e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3328      	adds	r3, #40	; 0x28
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002200:	b29b      	uxth	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	3302      	adds	r3, #2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	441a      	add	r2, r3
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002232:	2100      	movs	r1, #0
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f006 f8c6 	bl	80083c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 829b 	beq.w	800277e <PCD_EP_ISR_Handler+0x5e4>
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f040 8296 	bne.w	800277e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800225e:	b2da      	uxtb	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	b292      	uxth	r2, r2
 8002266:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002272:	e284      	b.n	800277e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002284:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228a:	2b00      	cmp	r3, #0
 800228c:	d034      	beq.n	80022f8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002296:	b29b      	uxth	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	3306      	adds	r3, #6
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	f004 fa75 	bl	80067bc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b29a      	uxth	r2, r3
 80022da:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022de:	4013      	ands	r3, r2
 80022e0:	823b      	strh	r3, [r7, #16]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	8a3a      	ldrh	r2, [r7, #16]
 80022e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022ec:	b292      	uxth	r2, r2
 80022ee:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f006 f83b 	bl	800836c <HAL_PCD_SetupStageCallback>
 80022f6:	e242      	b.n	800277e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f280 823e 	bge.w	800277e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	b29a      	uxth	r2, r3
 800230a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800230e:	4013      	ands	r3, r2
 8002310:	83bb      	strh	r3, [r7, #28]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	8bba      	ldrh	r2, [r7, #28]
 8002318:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800231c:	b292      	uxth	r2, r2
 800231e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002328:	b29b      	uxth	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4413      	add	r3, r2
 8002334:	3306      	adds	r3, #6
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d019      	beq.n	8002388 <PCD_EP_ISR_Handler+0x1ee>
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d015      	beq.n	8002388 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	6959      	ldr	r1, [r3, #20]
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800236c:	b29b      	uxth	r3, r3
 800236e:	f004 fa25 	bl	80067bc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	441a      	add	r2, r3
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002380:	2100      	movs	r1, #0
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f006 f804 	bl	8008390 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002394:	2b00      	cmp	r3, #0
 8002396:	f040 81f2 	bne.w	800277e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	4413      	add	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d112      	bne.n	80023e8 <PCD_EP_ISR_Handler+0x24e>
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	801a      	strh	r2, [r3, #0]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	801a      	strh	r2, [r3, #0]
 80023e6:	e02f      	b.n	8002448 <PCD_EP_ISR_Handler+0x2ae>
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2b3e      	cmp	r3, #62	; 0x3e
 80023ee:	d813      	bhi.n	8002418 <PCD_EP_ISR_Handler+0x27e>
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <PCD_EP_ISR_Handler+0x270>
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	3301      	adds	r3, #1
 8002408:	633b      	str	r3, [r7, #48]	; 0x30
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	b29b      	uxth	r3, r3
 800240e:	029b      	lsls	r3, r3, #10
 8002410:	b29a      	uxth	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	801a      	strh	r2, [r3, #0]
 8002416:	e017      	b.n	8002448 <PCD_EP_ISR_Handler+0x2ae>
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	633b      	str	r3, [r7, #48]	; 0x30
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <PCD_EP_ISR_Handler+0x298>
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	3b01      	subs	r3, #1
 8002430:	633b      	str	r3, [r7, #48]	; 0x30
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	b29b      	uxth	r3, r3
 8002436:	029b      	lsls	r3, r3, #10
 8002438:	b29b      	uxth	r3, r3
 800243a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800243e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002442:	b29a      	uxth	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002458:	827b      	strh	r3, [r7, #18]
 800245a:	8a7b      	ldrh	r3, [r7, #18]
 800245c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002460:	827b      	strh	r3, [r7, #18]
 8002462:	8a7b      	ldrh	r3, [r7, #18]
 8002464:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002468:	827b      	strh	r3, [r7, #18]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	8a7b      	ldrh	r3, [r7, #18]
 8002470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800247c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002480:	b29b      	uxth	r3, r3
 8002482:	8013      	strh	r3, [r2, #0]
 8002484:	e17b      	b.n	800277e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002498:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800249c:	2b00      	cmp	r3, #0
 800249e:	f280 80ea 	bge.w	8002676 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024b8:	4013      	ands	r3, r2
 80024ba:	853b      	strh	r3, [r7, #40]	; 0x28
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024d0:	b292      	uxth	r2, r2
 80024d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80024d4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	7b1b      	ldrb	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d122      	bne.n	8002538 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	3306      	adds	r3, #6
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800251a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800251c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8087 	beq.w	8002632 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	6959      	ldr	r1, [r3, #20]
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	88da      	ldrh	r2, [r3, #6]
 8002530:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002532:	f004 f943 	bl	80067bc <USB_ReadPMA>
 8002536:	e07c      	b.n	8002632 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	78db      	ldrb	r3, [r3, #3]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d108      	bne.n	8002552 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002540:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002542:	461a      	mov	r2, r3
 8002544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f927 	bl	800279a <HAL_PCD_EP_DB_Receive>
 800254c:	4603      	mov	r3, r0
 800254e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002550:	e06f      	b.n	8002632 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256c:	847b      	strh	r3, [r7, #34]	; 0x22
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	441a      	add	r2, r3
 800257c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800257e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800258a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800258e:	b29b      	uxth	r3, r3
 8002590:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d021      	beq.n	80025f0 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	3302      	adds	r3, #2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d02a      	beq.n	8002632 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	6959      	ldr	r1, [r3, #20]
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	891a      	ldrh	r2, [r3, #8]
 80025e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ea:	f004 f8e7 	bl	80067bc <USB_ReadPMA>
 80025ee:	e020      	b.n	8002632 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	3306      	adds	r3, #6
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002618:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800261a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	6959      	ldr	r1, [r3, #20]
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	895a      	ldrh	r2, [r3, #10]
 800262c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800262e:	f004 f8c5 	bl	80067bc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002638:	441a      	add	r2, r3
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002644:	441a      	add	r2, r3
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d004      	beq.n	800265c <PCD_EP_ISR_Handler+0x4c2>
 8002652:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	429a      	cmp	r2, r3
 800265a:	d206      	bcs.n	800266a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4619      	mov	r1, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f005 fe94 	bl	8008390 <HAL_PCD_DataOutStageCallback>
 8002668:	e005      	b.n	8002676 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002670:	4618      	mov	r0, r3
 8002672:	f002 fc29 	bl	8004ec8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002676:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267c:	2b00      	cmp	r3, #0
 800267e:	d07e      	beq.n	800277e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002680:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ae:	843b      	strh	r3, [r7, #32]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	441a      	add	r2, r3
 80026be:	8c3b      	ldrh	r3, [r7, #32]
 80026c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	78db      	ldrb	r3, [r3, #3]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d00c      	beq.n	80026ee <PCD_EP_ISR_Handler+0x554>
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	78db      	ldrb	r3, [r3, #3]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d146      	bne.n	8002772 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80026e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d141      	bne.n	8002772 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	3302      	adds	r3, #2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	4413      	add	r3, r2
 800270c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002716:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	8bfb      	ldrh	r3, [r7, #30]
 800271e:	429a      	cmp	r2, r3
 8002720:	d906      	bls.n	8002730 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	8bfb      	ldrh	r3, [r7, #30]
 8002728:	1ad2      	subs	r2, r2, r3
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	619a      	str	r2, [r3, #24]
 800272e:	e002      	b.n	8002736 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	2200      	movs	r2, #0
 8002734:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	4619      	mov	r1, r3
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f005 fe3e 	bl	80083c6 <HAL_PCD_DataInStageCallback>
 800274a:	e018      	b.n	800277e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	8bfb      	ldrh	r3, [r7, #30]
 8002752:	441a      	add	r2, r3
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	8bfb      	ldrh	r3, [r7, #30]
 800275e:	441a      	add	r2, r3
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276a:	4618      	mov	r0, r3
 800276c:	f002 fbac 	bl	8004ec8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002770:	e005      	b.n	800277e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002772:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002774:	461a      	mov	r2, r3
 8002776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f91b 	bl	80029b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002786:	b29b      	uxth	r3, r3
 8002788:	b21b      	sxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	f6ff ad0a 	blt.w	80021a4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3738      	adds	r7, #56	; 0x38
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b088      	sub	sp, #32
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	4613      	mov	r3, r2
 80027a6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d07e      	beq.n	80028b0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	3302      	adds	r3, #2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	699a      	ldr	r2, [r3, #24]
 80027e0:	8b7b      	ldrh	r3, [r7, #26]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d306      	bcc.n	80027f4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	8b7b      	ldrh	r3, [r7, #26]
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	619a      	str	r2, [r3, #24]
 80027f2:	e002      	b.n	80027fa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2200      	movs	r2, #0
 80027f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d123      	bne.n	800284a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281c:	833b      	strh	r3, [r7, #24]
 800281e:	8b3b      	ldrh	r3, [r7, #24]
 8002820:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002824:	833b      	strh	r3, [r7, #24]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	441a      	add	r2, r3
 8002834:	8b3b      	ldrh	r3, [r7, #24]
 8002836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800283a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800283e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002846:	b29b      	uxth	r3, r3
 8002848:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01f      	beq.n	8002894 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b29b      	uxth	r3, r3
 8002866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800286a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286e:	82fb      	strh	r3, [r7, #22]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	441a      	add	r2, r3
 800287e:	8afb      	ldrh	r3, [r7, #22]
 8002880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800288c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002890:	b29b      	uxth	r3, r3
 8002892:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002894:	8b7b      	ldrh	r3, [r7, #26]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8087 	beq.w	80029aa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	6959      	ldr	r1, [r3, #20]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	891a      	ldrh	r2, [r3, #8]
 80028a8:	8b7b      	ldrh	r3, [r7, #26]
 80028aa:	f003 ff87 	bl	80067bc <USB_ReadPMA>
 80028ae:	e07c      	b.n	80029aa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	3306      	adds	r3, #6
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	8b7b      	ldrh	r3, [r7, #26]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d306      	bcc.n	80028f2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	699a      	ldr	r2, [r3, #24]
 80028e8:	8b7b      	ldrh	r3, [r7, #26]
 80028ea:	1ad2      	subs	r2, r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	619a      	str	r2, [r3, #24]
 80028f0:	e002      	b.n	80028f8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d123      	bne.n	8002948 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	b29b      	uxth	r3, r3
 8002912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	83fb      	strh	r3, [r7, #30]
 800291c:	8bfb      	ldrh	r3, [r7, #30]
 800291e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002922:	83fb      	strh	r3, [r7, #30]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	441a      	add	r2, r3
 8002932:	8bfb      	ldrh	r3, [r7, #30]
 8002934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800293c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002944:	b29b      	uxth	r3, r3
 8002946:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d11f      	bne.n	8002992 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296c:	83bb      	strh	r3, [r7, #28]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	441a      	add	r2, r3
 800297c:	8bbb      	ldrh	r3, [r7, #28]
 800297e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800298e:	b29b      	uxth	r3, r3
 8002990:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002992:	8b7b      	ldrh	r3, [r7, #26]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	6959      	ldr	r1, [r3, #20]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	895a      	ldrh	r2, [r3, #10]
 80029a4:	8b7b      	ldrh	r3, [r7, #26]
 80029a6:	f003 ff09 	bl	80067bc <USB_ReadPMA>
    }
  }

  return count;
 80029aa:	8b7b      	ldrh	r3, [r7, #26]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b0a2      	sub	sp, #136	; 0x88
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	4613      	mov	r3, r2
 80029c0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 81c7 	beq.w	8002d5c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	3302      	adds	r3, #2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d907      	bls.n	8002a16 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	699a      	ldr	r2, [r3, #24]
 8002a0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a0e:	1ad2      	subs	r2, r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	619a      	str	r2, [r3, #24]
 8002a14:	e002      	b.n	8002a1c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f040 80b9 	bne.w	8002b98 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	785b      	ldrb	r3, [r3, #1]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d126      	bne.n	8002a7c <HAL_PCD_EP_DB_Transmit+0xc8>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a42:	4413      	add	r3, r2
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	011a      	lsls	r2, r3, #4
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	4413      	add	r3, r2
 8002a50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	801a      	strh	r2, [r3, #0]
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	801a      	strh	r2, [r3, #0]
 8002a7a:	e01a      	b.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d116      	bne.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	633b      	str	r3, [r7, #48]	; 0x30
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	4413      	add	r3, r2
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	011a      	lsls	r2, r3, #4
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aae:	2200      	movs	r2, #0
 8002ab0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	623b      	str	r3, [r7, #32]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	785b      	ldrb	r3, [r3, #1]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d126      	bne.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	011a      	lsls	r2, r3, #4
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	801a      	strh	r2, [r3, #0]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	801a      	strh	r2, [r3, #0]
 8002b0c:	e017      	b.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	785b      	ldrb	r3, [r3, #1]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d113      	bne.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	4413      	add	r3, r2
 8002b26:	623b      	str	r3, [r7, #32]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	011a      	lsls	r2, r3, #4
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	4413      	add	r3, r2
 8002b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	4619      	mov	r1, r3
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f005 fc3e 	bl	80083c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 82d4 	beq.w	80030fe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b70:	827b      	strh	r3, [r7, #18]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	441a      	add	r2, r3
 8002b80:	8a7b      	ldrh	r3, [r7, #18]
 8002b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	8013      	strh	r3, [r2, #0]
 8002b96:	e2b2      	b.n	80030fe <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d021      	beq.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	441a      	add	r2, r3
 8002bce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	f040 8286 	bne.w	80030fe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bfa:	441a      	add	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c08:	441a      	add	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	6a1a      	ldr	r2, [r3, #32]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d309      	bcc.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c26:	1ad2      	subs	r2, r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	621a      	str	r2, [r3, #32]
 8002c2c:	e015      	b.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d107      	bne.n	8002c46 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002c36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c3a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c44:	e009      	b.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2200      	movs	r2, #0
 8002c58:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	785b      	ldrb	r3, [r3, #1]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d155      	bne.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x35a>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c76:	4413      	add	r3, r2
 8002c78:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	011a      	lsls	r2, r3, #4
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	4413      	add	r3, r2
 8002c84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d112      	bne.n	8002cb6 <HAL_PCD_EP_DB_Transmit+0x302>
 8002c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9e:	801a      	strh	r2, [r3, #0]
 8002ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb2:	801a      	strh	r2, [r3, #0]
 8002cb4:	e047      	b.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x392>
 8002cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb8:	2b3e      	cmp	r3, #62	; 0x3e
 8002cba:	d811      	bhi.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cce:	3301      	adds	r3, #1
 8002cd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	029b      	lsls	r3, r3, #10
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cdc:	801a      	strh	r2, [r3, #0]
 8002cde:	e032      	b.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x392>
 8002ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <HAL_PCD_EP_DB_Transmit+0x342>
 8002cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	029b      	lsls	r3, r3, #10
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	e01b      	b.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x392>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	785b      	ldrb	r3, [r3, #1]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d117      	bne.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x392>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2a:	4413      	add	r3, r2
 8002d2c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	011a      	lsls	r2, r3, #4
 8002d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d36:	4413      	add	r3, r2
 8002d38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d44:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	6959      	ldr	r1, [r3, #20]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	891a      	ldrh	r2, [r3, #8]
 8002d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	f003 fcec 	bl	8006732 <USB_WritePMA>
 8002d5a:	e1d0      	b.n	80030fe <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3306      	adds	r3, #6
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	699a      	ldr	r2, [r3, #24]
 8002d8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d307      	bcc.n	8002da4 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	699a      	ldr	r2, [r3, #24]
 8002d98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d9c:	1ad2      	subs	r2, r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	619a      	str	r2, [r3, #24]
 8002da2:	e002      	b.n	8002daa <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2200      	movs	r2, #0
 8002da8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 80c4 	bne.w	8002f3c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d126      	bne.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x456>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd0:	4413      	add	r3, r2
 8002dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	011a      	lsls	r2, r3, #4
 8002dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ddc:	4413      	add	r3, r2
 8002dde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002de2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002de4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002df2:	801a      	strh	r2, [r3, #0]
 8002df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e06:	801a      	strh	r2, [r3, #0]
 8002e08:	e01a      	b.n	8002e40 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	785b      	ldrb	r3, [r3, #1]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d116      	bne.n	8002e40 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	677b      	str	r3, [r7, #116]	; 0x74
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e26:	4413      	add	r3, r2
 8002e28:	677b      	str	r3, [r7, #116]	; 0x74
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	011a      	lsls	r2, r3, #4
 8002e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e32:	4413      	add	r3, r2
 8002e34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e38:	673b      	str	r3, [r7, #112]	; 0x70
 8002e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	785b      	ldrb	r3, [r3, #1]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d12f      	bne.n	8002eae <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e66:	4413      	add	r3, r2
 8002e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	011a      	lsls	r2, r3, #4
 8002e72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e76:	4413      	add	r3, r2
 8002e78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e92:	801a      	strh	r2, [r3, #0]
 8002e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	e017      	b.n	8002ede <HAL_PCD_EP_DB_Transmit+0x52a>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	785b      	ldrb	r3, [r3, #1]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d113      	bne.n	8002ede <HAL_PCD_EP_DB_Transmit+0x52a>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ec4:	4413      	add	r3, r2
 8002ec6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	011a      	lsls	r2, r3, #4
 8002ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ed8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eda:	2200      	movs	r2, #0
 8002edc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f005 fa6e 	bl	80083c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f040 8104 	bne.w	80030fe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f10:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	441a      	add	r2, r3
 8002f22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	8013      	strh	r3, [r2, #0]
 8002f3a:	e0e0      	b.n	80030fe <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d121      	bne.n	8002f8a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f60:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	441a      	add	r2, r3
 8002f72:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	f040 80b4 	bne.w	80030fe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f9e:	441a      	add	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fac:	441a      	add	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d309      	bcc.n	8002fd2 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6a1a      	ldr	r2, [r3, #32]
 8002fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fca:	1ad2      	subs	r2, r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	621a      	str	r2, [r3, #32]
 8002fd0:	e015      	b.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d107      	bne.n	8002fea <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002fda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fde:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fe8:	e009      	b.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	667b      	str	r3, [r7, #100]	; 0x64
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	785b      	ldrb	r3, [r3, #1]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d155      	bne.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x704>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301a:	b29b      	uxth	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003020:	4413      	add	r3, r2
 8003022:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	011a      	lsls	r2, r3, #4
 800302a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800302c:	4413      	add	r3, r2
 800302e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003032:	65bb      	str	r3, [r7, #88]	; 0x58
 8003034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003036:	2b00      	cmp	r3, #0
 8003038:	d112      	bne.n	8003060 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800303a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003044:	b29a      	uxth	r2, r3
 8003046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003048:	801a      	strh	r2, [r3, #0]
 800304a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003058:	b29a      	uxth	r2, r3
 800305a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800305c:	801a      	strh	r2, [r3, #0]
 800305e:	e044      	b.n	80030ea <HAL_PCD_EP_DB_Transmit+0x736>
 8003060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003062:	2b3e      	cmp	r3, #62	; 0x3e
 8003064:	d811      	bhi.n	800308a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	657b      	str	r3, [r7, #84]	; 0x54
 800306c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003078:	3301      	adds	r3, #1
 800307a:	657b      	str	r3, [r7, #84]	; 0x54
 800307c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800307e:	b29b      	uxth	r3, r3
 8003080:	029b      	lsls	r3, r3, #10
 8003082:	b29a      	uxth	r2, r3
 8003084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003086:	801a      	strh	r2, [r3, #0]
 8003088:	e02f      	b.n	80030ea <HAL_PCD_EP_DB_Transmit+0x736>
 800308a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	657b      	str	r3, [r7, #84]	; 0x54
 8003090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800309a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800309c:	3b01      	subs	r3, #1
 800309e:	657b      	str	r3, [r7, #84]	; 0x54
 80030a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	029b      	lsls	r3, r3, #10
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030b4:	801a      	strh	r2, [r3, #0]
 80030b6:	e018      	b.n	80030ea <HAL_PCD_EP_DB_Transmit+0x736>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d114      	bne.n	80030ea <HAL_PCD_EP_DB_Transmit+0x736>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ce:	4413      	add	r3, r2
 80030d0:	667b      	str	r3, [r7, #100]	; 0x64
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	011a      	lsls	r2, r3, #4
 80030d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030da:	4413      	add	r3, r2
 80030dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030e0:	663b      	str	r3, [r7, #96]	; 0x60
 80030e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030e8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	6959      	ldr	r1, [r3, #20]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	895a      	ldrh	r2, [r3, #10]
 80030f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	f003 fb1a 	bl	8006732 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003118:	823b      	strh	r3, [r7, #16]
 800311a:	8a3b      	ldrh	r3, [r7, #16]
 800311c:	f083 0310 	eor.w	r3, r3, #16
 8003120:	823b      	strh	r3, [r7, #16]
 8003122:	8a3b      	ldrh	r3, [r7, #16]
 8003124:	f083 0320 	eor.w	r3, r3, #32
 8003128:	823b      	strh	r3, [r7, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	441a      	add	r2, r3
 8003138:	8a3b      	ldrh	r3, [r7, #16]
 800313a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800313e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314a:	b29b      	uxth	r3, r3
 800314c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3788      	adds	r7, #136	; 0x88
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	460b      	mov	r3, r1
 8003164:	817b      	strh	r3, [r7, #10]
 8003166:	4613      	mov	r3, r2
 8003168:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800316a:	897b      	ldrh	r3, [r7, #10]
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00b      	beq.n	800318e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003176:	897b      	ldrh	r3, [r7, #10]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4413      	add	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	e009      	b.n	80031a2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800318e:	897a      	ldrh	r2, [r7, #10]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031a2:	893b      	ldrh	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d107      	bne.n	80031b8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2200      	movs	r2, #0
 80031ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	80da      	strh	r2, [r3, #6]
 80031b6:	e00b      	b.n	80031d0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2201      	movs	r2, #1
 80031bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e26c      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8087 	beq.w	800330a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031fc:	4b92      	ldr	r3, [pc, #584]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	2b04      	cmp	r3, #4
 8003206:	d00c      	beq.n	8003222 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003208:	4b8f      	ldr	r3, [pc, #572]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b08      	cmp	r3, #8
 8003212:	d112      	bne.n	800323a <HAL_RCC_OscConfig+0x5e>
 8003214:	4b8c      	ldr	r3, [pc, #560]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d10b      	bne.n	800323a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003222:	4b89      	ldr	r3, [pc, #548]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d06c      	beq.n	8003308 <HAL_RCC_OscConfig+0x12c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d168      	bne.n	8003308 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e246      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x76>
 8003244:	4b80      	ldr	r3, [pc, #512]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a7f      	ldr	r2, [pc, #508]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	e02e      	b.n	80032b0 <HAL_RCC_OscConfig+0xd4>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x98>
 800325a:	4b7b      	ldr	r3, [pc, #492]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a7a      	ldr	r2, [pc, #488]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b78      	ldr	r3, [pc, #480]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a77      	ldr	r2, [pc, #476]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800326c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e01d      	b.n	80032b0 <HAL_RCC_OscConfig+0xd4>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0xbc>
 800327e:	4b72      	ldr	r3, [pc, #456]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a71      	ldr	r2, [pc, #452]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b6f      	ldr	r3, [pc, #444]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6e      	ldr	r2, [pc, #440]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0xd4>
 8003298:	4b6b      	ldr	r3, [pc, #428]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a6a      	ldr	r2, [pc, #424]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800329e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b68      	ldr	r3, [pc, #416]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a67      	ldr	r2, [pc, #412]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 80032aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fd ffdc 	bl	8001274 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fd ffd8 	bl	8001274 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e1fa      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	4b5d      	ldr	r3, [pc, #372]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0xe4>
 80032de:	e014      	b.n	800330a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fd ffc8 	bl	8001274 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fd ffc4 	bl	8001274 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1e6      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	4b53      	ldr	r3, [pc, #332]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x10c>
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d063      	beq.n	80033de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003316:	4b4c      	ldr	r3, [pc, #304]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003322:	4b49      	ldr	r3, [pc, #292]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b08      	cmp	r3, #8
 800332c:	d11c      	bne.n	8003368 <HAL_RCC_OscConfig+0x18c>
 800332e:	4b46      	ldr	r3, [pc, #280]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d116      	bne.n	8003368 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333a:	4b43      	ldr	r3, [pc, #268]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_RCC_OscConfig+0x176>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d001      	beq.n	8003352 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e1ba      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4939      	ldr	r1, [pc, #228]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	e03a      	b.n	80033de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003370:	4b36      	ldr	r3, [pc, #216]	; (800344c <HAL_RCC_OscConfig+0x270>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003376:	f7fd ff7d 	bl	8001274 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337e:	f7fd ff79 	bl	8001274 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e19b      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003390:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339c:	4b2a      	ldr	r3, [pc, #168]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4927      	ldr	r1, [pc, #156]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	600b      	str	r3, [r1, #0]
 80033b0:	e015      	b.n	80033de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b2:	4b26      	ldr	r3, [pc, #152]	; (800344c <HAL_RCC_OscConfig+0x270>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fd ff5c 	bl	8001274 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c0:	f7fd ff58 	bl	8001274 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e17a      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d2:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d03a      	beq.n	8003460 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d019      	beq.n	8003426 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f2:	4b17      	ldr	r3, [pc, #92]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f8:	f7fd ff3c 	bl	8001274 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003400:	f7fd ff38 	bl	8001274 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e15a      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800341e:	2001      	movs	r0, #1
 8003420:	f000 faa6 	bl	8003970 <RCC_Delay>
 8003424:	e01c      	b.n	8003460 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342c:	f7fd ff22 	bl	8001274 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003432:	e00f      	b.n	8003454 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003434:	f7fd ff1e 	bl	8001274 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d908      	bls.n	8003454 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e140      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	42420000 	.word	0x42420000
 8003450:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003454:	4b9e      	ldr	r3, [pc, #632]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e9      	bne.n	8003434 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80a6 	beq.w	80035ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346e:	2300      	movs	r3, #0
 8003470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003472:	4b97      	ldr	r3, [pc, #604]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10d      	bne.n	800349a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	4b94      	ldr	r3, [pc, #592]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	4a93      	ldr	r2, [pc, #588]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	61d3      	str	r3, [r2, #28]
 800348a:	4b91      	ldr	r3, [pc, #580]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b8e      	ldr	r3, [pc, #568]	; (80036d4 <HAL_RCC_OscConfig+0x4f8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d118      	bne.n	80034d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a6:	4b8b      	ldr	r3, [pc, #556]	; (80036d4 <HAL_RCC_OscConfig+0x4f8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a8a      	ldr	r2, [pc, #552]	; (80036d4 <HAL_RCC_OscConfig+0x4f8>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b2:	f7fd fedf 	bl	8001274 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fd fedb 	bl	8001274 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b64      	cmp	r3, #100	; 0x64
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e0fd      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b81      	ldr	r3, [pc, #516]	; (80036d4 <HAL_RCC_OscConfig+0x4f8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x312>
 80034e0:	4b7b      	ldr	r3, [pc, #492]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4a7a      	ldr	r2, [pc, #488]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6213      	str	r3, [r2, #32]
 80034ec:	e02d      	b.n	800354a <HAL_RCC_OscConfig+0x36e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x334>
 80034f6:	4b76      	ldr	r3, [pc, #472]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	4a75      	ldr	r2, [pc, #468]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6213      	str	r3, [r2, #32]
 8003502:	4b73      	ldr	r3, [pc, #460]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a72      	ldr	r2, [pc, #456]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003508:	f023 0304 	bic.w	r3, r3, #4
 800350c:	6213      	str	r3, [r2, #32]
 800350e:	e01c      	b.n	800354a <HAL_RCC_OscConfig+0x36e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b05      	cmp	r3, #5
 8003516:	d10c      	bne.n	8003532 <HAL_RCC_OscConfig+0x356>
 8003518:	4b6d      	ldr	r3, [pc, #436]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	4a6c      	ldr	r2, [pc, #432]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	6213      	str	r3, [r2, #32]
 8003524:	4b6a      	ldr	r3, [pc, #424]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a69      	ldr	r2, [pc, #420]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	e00b      	b.n	800354a <HAL_RCC_OscConfig+0x36e>
 8003532:	4b67      	ldr	r3, [pc, #412]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	4a66      	ldr	r2, [pc, #408]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	6213      	str	r3, [r2, #32]
 800353e:	4b64      	ldr	r3, [pc, #400]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	4a63      	ldr	r2, [pc, #396]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003544:	f023 0304 	bic.w	r3, r3, #4
 8003548:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d015      	beq.n	800357e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003552:	f7fd fe8f 	bl	8001274 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fd fe8b 	bl	8001274 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e0ab      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003570:	4b57      	ldr	r3, [pc, #348]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ee      	beq.n	800355a <HAL_RCC_OscConfig+0x37e>
 800357c:	e014      	b.n	80035a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357e:	f7fd fe79 	bl	8001274 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fd fe75 	bl	8001274 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e095      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359c:	4b4c      	ldr	r3, [pc, #304]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ee      	bne.n	8003586 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d105      	bne.n	80035ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ae:	4b48      	ldr	r3, [pc, #288]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	4a47      	ldr	r2, [pc, #284]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80035b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8081 	beq.w	80036c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c4:	4b42      	ldr	r3, [pc, #264]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d061      	beq.n	8003694 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d146      	bne.n	8003666 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d8:	4b3f      	ldr	r3, [pc, #252]	; (80036d8 <HAL_RCC_OscConfig+0x4fc>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035de:	f7fd fe49 	bl	8001274 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fd fe45 	bl	8001274 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e067      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f8:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f0      	bne.n	80035e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360c:	d108      	bne.n	8003620 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800360e:	4b30      	ldr	r3, [pc, #192]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	492d      	ldr	r1, [pc, #180]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003620:	4b2b      	ldr	r3, [pc, #172]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a19      	ldr	r1, [r3, #32]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	430b      	orrs	r3, r1
 8003632:	4927      	ldr	r1, [pc, #156]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003638:	4b27      	ldr	r3, [pc, #156]	; (80036d8 <HAL_RCC_OscConfig+0x4fc>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363e:	f7fd fe19 	bl	8001274 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003646:	f7fd fe15 	bl	8001274 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e037      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003658:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x46a>
 8003664:	e02f      	b.n	80036c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003666:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <HAL_RCC_OscConfig+0x4fc>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fd fe02 	bl	8001274 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fd fdfe 	bl	8001274 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e020      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003686:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x498>
 8003692:	e018      	b.n	80036c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e013      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40007000 	.word	0x40007000
 80036d8:	42420060 	.word	0x42420060

080036dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0d0      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036f0:	4b6a      	ldr	r3, [pc, #424]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d910      	bls.n	8003720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b67      	ldr	r3, [pc, #412]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 0207 	bic.w	r2, r3, #7
 8003706:	4965      	ldr	r1, [pc, #404]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b63      	ldr	r3, [pc, #396]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0b8      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d020      	beq.n	800376e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003738:	4b59      	ldr	r3, [pc, #356]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4a58      	ldr	r2, [pc, #352]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003742:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003750:	4b53      	ldr	r3, [pc, #332]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a52      	ldr	r2, [pc, #328]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800375a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375c:	4b50      	ldr	r3, [pc, #320]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	494d      	ldr	r1, [pc, #308]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d040      	beq.n	80037fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d115      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e07f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d107      	bne.n	80037aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379a:	4b41      	ldr	r3, [pc, #260]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e073      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037aa:	4b3d      	ldr	r3, [pc, #244]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e06b      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ba:	4b39      	ldr	r3, [pc, #228]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f023 0203 	bic.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4936      	ldr	r1, [pc, #216]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037cc:	f7fd fd52 	bl	8001274 <HAL_GetTick>
 80037d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d4:	f7fd fd4e 	bl	8001274 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e053      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	4b2d      	ldr	r3, [pc, #180]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 020c 	and.w	r2, r3, #12
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d1eb      	bne.n	80037d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037fc:	4b27      	ldr	r3, [pc, #156]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d210      	bcs.n	800382c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b24      	ldr	r3, [pc, #144]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 0207 	bic.w	r2, r3, #7
 8003812:	4922      	ldr	r1, [pc, #136]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b20      	ldr	r3, [pc, #128]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e032      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4916      	ldr	r1, [pc, #88]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003856:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	490e      	ldr	r1, [pc, #56]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800386a:	f000 f821 	bl	80038b0 <HAL_RCC_GetSysClockFreq>
 800386e:	4602      	mov	r2, r0
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	490a      	ldr	r1, [pc, #40]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 800387c:	5ccb      	ldrb	r3, [r1, r3]
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_RCC_ClockConfig+0x1d0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd fcb0 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40022000 	.word	0x40022000
 80038a0:	40021000 	.word	0x40021000
 80038a4:	08009860 	.word	0x08009860
 80038a8:	20000000 	.word	0x20000000
 80038ac:	20000004 	.word	0x20000004

080038b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b0:	b490      	push	{r4, r7}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038b6:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038b8:	1d3c      	adds	r4, r7, #4
 80038ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038c0:	f240 2301 	movw	r3, #513	; 0x201
 80038c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	2300      	movs	r3, #0
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d002      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x40>
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_GetSysClockFreq+0x46>
 80038ee:	e02d      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038f0:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f2:	623b      	str	r3, [r7, #32]
      break;
 80038f4:	e02d      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	0c9b      	lsrs	r3, r3, #18
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003902:	4413      	add	r3, r2
 8003904:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003908:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	0c5b      	lsrs	r3, r3, #17
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003922:	4413      	add	r3, r2
 8003924:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003928:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	4a0e      	ldr	r2, [pc, #56]	; (8003968 <HAL_RCC_GetSysClockFreq+0xb8>)
 800392e:	fb02 f203 	mul.w	r2, r2, r3
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
 800393a:	e004      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	4a0b      	ldr	r2, [pc, #44]	; (800396c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003940:	fb02 f303 	mul.w	r3, r2, r3
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	623b      	str	r3, [r7, #32]
      break;
 800394a:	e002      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_RCC_GetSysClockFreq+0xb8>)
 800394e:	623b      	str	r3, [r7, #32]
      break;
 8003950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003952:	6a3b      	ldr	r3, [r7, #32]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3728      	adds	r7, #40	; 0x28
 8003958:	46bd      	mov	sp, r7
 800395a:	bc90      	pop	{r4, r7}
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	080097e8 	.word	0x080097e8
 8003964:	40021000 	.word	0x40021000
 8003968:	007a1200 	.word	0x007a1200
 800396c:	003d0900 	.word	0x003d0900

08003970 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <RCC_Delay+0x34>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <RCC_Delay+0x38>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	0a5b      	lsrs	r3, r3, #9
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800398c:	bf00      	nop
  }
  while (Delay --);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1e5a      	subs	r2, r3, #1
 8003992:	60fa      	str	r2, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f9      	bne.n	800398c <RCC_Delay+0x1c>
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	20000000 	.word	0x20000000
 80039a8:	10624dd3 	.word	0x10624dd3

080039ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d07d      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039c8:	2300      	movs	r3, #0
 80039ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039cc:	4b4f      	ldr	r3, [pc, #316]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10d      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d8:	4b4c      	ldr	r3, [pc, #304]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	4a4b      	ldr	r2, [pc, #300]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e2:	61d3      	str	r3, [r2, #28]
 80039e4:	4b49      	ldr	r3, [pc, #292]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	4b46      	ldr	r3, [pc, #280]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d118      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a00:	4b43      	ldr	r3, [pc, #268]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a42      	ldr	r2, [pc, #264]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a0c:	f7fd fc32 	bl	8001274 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a12:	e008      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a14:	f7fd fc2e 	bl	8001274 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e06d      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a26:	4b3a      	ldr	r3, [pc, #232]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a32:	4b36      	ldr	r3, [pc, #216]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d02e      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d027      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a50:	4b2e      	ldr	r3, [pc, #184]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a5a:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a60:	4b2c      	ldr	r3, [pc, #176]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a66:	4a29      	ldr	r2, [pc, #164]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d014      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a76:	f7fd fbfd 	bl	8001274 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fd fbf9 	bl	8001274 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e036      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a94:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0ee      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4917      	ldr	r1, [pc, #92]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d105      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab8:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	490b      	ldr	r1, [pc, #44]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	4904      	ldr	r1, [pc, #16]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40007000 	.word	0x40007000
 8003b14:	42420440 	.word	0x42420440

08003b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e076      	b.n	8003c18 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d108      	bne.n	8003b44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3a:	d009      	beq.n	8003b50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	61da      	str	r2, [r3, #28]
 8003b42:	e005      	b.n	8003b50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd fa2a 	bl	8000fc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd4:	ea42 0103 	orr.w	r1, r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	0c1a      	lsrs	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f002 0204 	and.w	r2, r2, #4
 8003bf6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_SPI_Transmit+0x22>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e126      	b.n	8003e90 <HAL_SPI_Transmit+0x270>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c4a:	f7fd fb13 	bl	8001274 <HAL_GetTick>
 8003c4e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d002      	beq.n	8003c66 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
 8003c62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c64:	e10b      	b.n	8003e7e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_SPI_Transmit+0x52>
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c76:	e102      	b.n	8003e7e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	88fa      	ldrh	r2, [r7, #6]
 8003c96:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cbe:	d10f      	bne.n	8003ce0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cde:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d007      	beq.n	8003cfe <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d06:	d14b      	bne.n	8003da0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_SPI_Transmit+0xf6>
 8003d10:	8afb      	ldrh	r3, [r7, #22]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d13e      	bne.n	8003d94 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	881a      	ldrh	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	1c9a      	adds	r2, r3, #2
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d3a:	e02b      	b.n	8003d94 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d112      	bne.n	8003d70 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	881a      	ldrh	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	1c9a      	adds	r2, r3, #2
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d6e:	e011      	b.n	8003d94 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d70:	f7fd fa80 	bl	8001274 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d803      	bhi.n	8003d88 <HAL_SPI_Transmit+0x168>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d86:	d102      	bne.n	8003d8e <HAL_SPI_Transmit+0x16e>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d92:	e074      	b.n	8003e7e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1ce      	bne.n	8003d3c <HAL_SPI_Transmit+0x11c>
 8003d9e:	e04c      	b.n	8003e3a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_SPI_Transmit+0x18e>
 8003da8:	8afb      	ldrh	r3, [r7, #22]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d140      	bne.n	8003e30 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003dd4:	e02c      	b.n	8003e30 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d113      	bne.n	8003e0c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	7812      	ldrb	r2, [r2, #0]
 8003df0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e0a:	e011      	b.n	8003e30 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e0c:	f7fd fa32 	bl	8001274 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d803      	bhi.n	8003e24 <HAL_SPI_Transmit+0x204>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e22:	d102      	bne.n	8003e2a <HAL_SPI_Transmit+0x20a>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e2e:	e026      	b.n	8003e7e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1cd      	bne.n	8003dd6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	6839      	ldr	r1, [r7, #0]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fa62 	bl	8004308 <SPI_EndRxTxTransaction>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	77fb      	strb	r3, [r7, #31]
 8003e7a:	e000      	b.n	8003e7e <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3720      	adds	r7, #32
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08c      	sub	sp, #48	; 0x30
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x26>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e18a      	b.n	80041d4 <HAL_SPI_TransmitReceive+0x33c>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ec6:	f7fd f9d5 	bl	8001274 <HAL_GetTick>
 8003eca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003edc:	887b      	ldrh	r3, [r7, #2]
 8003ede:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d00f      	beq.n	8003f08 <HAL_SPI_TransmitReceive+0x70>
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eee:	d107      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d103      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x68>
 8003ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d003      	beq.n	8003f08 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
 8003f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f06:	e15b      	b.n	80041c0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_SPI_TransmitReceive+0x82>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_SPI_TransmitReceive+0x82>
 8003f14:	887b      	ldrh	r3, [r7, #2]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d103      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f20:	e14e      	b.n	80041c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d003      	beq.n	8003f36 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2205      	movs	r2, #5
 8003f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	887a      	ldrh	r2, [r7, #2]
 8003f46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	887a      	ldrh	r2, [r7, #2]
 8003f58:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	887a      	ldrh	r2, [r7, #2]
 8003f5e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f76:	2b40      	cmp	r3, #64	; 0x40
 8003f78:	d007      	beq.n	8003f8a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f92:	d178      	bne.n	8004086 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_SPI_TransmitReceive+0x10a>
 8003f9c:	8b7b      	ldrh	r3, [r7, #26]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d166      	bne.n	8004070 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	881a      	ldrh	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	1c9a      	adds	r2, r3, #2
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fc6:	e053      	b.n	8004070 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d11b      	bne.n	800400e <HAL_SPI_TransmitReceive+0x176>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d016      	beq.n	800400e <HAL_SPI_TransmitReceive+0x176>
 8003fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d113      	bne.n	800400e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	881a      	ldrh	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	1c9a      	adds	r2, r3, #2
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b01      	cmp	r3, #1
 800401a:	d119      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x1b8>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d014      	beq.n	8004050 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	b292      	uxth	r2, r2
 8004032:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	1c9a      	adds	r2, r3, #2
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800404c:	2301      	movs	r3, #1
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004050:	f7fd f910 	bl	8001274 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800405c:	429a      	cmp	r2, r3
 800405e:	d807      	bhi.n	8004070 <HAL_SPI_TransmitReceive+0x1d8>
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004066:	d003      	beq.n	8004070 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800406e:	e0a7      	b.n	80041c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1a6      	bne.n	8003fc8 <HAL_SPI_TransmitReceive+0x130>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1a1      	bne.n	8003fc8 <HAL_SPI_TransmitReceive+0x130>
 8004084:	e07c      	b.n	8004180 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_SPI_TransmitReceive+0x1fc>
 800408e:	8b7b      	ldrh	r3, [r7, #26]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d16b      	bne.n	800416c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	7812      	ldrb	r2, [r2, #0]
 80040a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ba:	e057      	b.n	800416c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d11c      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x26c>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d017      	beq.n	8004104 <HAL_SPI_TransmitReceive+0x26c>
 80040d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d114      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	330c      	adds	r3, #12
 80040e4:	7812      	ldrb	r2, [r2, #0]
 80040e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b01      	cmp	r3, #1
 8004110:	d119      	bne.n	8004146 <HAL_SPI_TransmitReceive+0x2ae>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d014      	beq.n	8004146 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004142:	2301      	movs	r3, #1
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004146:	f7fd f895 	bl	8001274 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004152:	429a      	cmp	r2, r3
 8004154:	d803      	bhi.n	800415e <HAL_SPI_TransmitReceive+0x2c6>
 8004156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800415c:	d102      	bne.n	8004164 <HAL_SPI_TransmitReceive+0x2cc>
 800415e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004160:	2b00      	cmp	r3, #0
 8004162:	d103      	bne.n	800416c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800416a:	e029      	b.n	80041c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1a2      	bne.n	80040bc <HAL_SPI_TransmitReceive+0x224>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d19d      	bne.n	80040bc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004182:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f8bf 	bl	8004308 <SPI_EndRxTxTransaction>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d006      	beq.n	800419e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800419c:	e010      	b.n	80041c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10b      	bne.n	80041be <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	e000      	b.n	80041c0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80041be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3730      	adds	r7, #48	; 0x30
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ea:	b2db      	uxtb	r3, r3
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
	...

080041f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004208:	f7fd f834 	bl	8001274 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	4413      	add	r3, r2
 8004216:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004218:	f7fd f82c 	bl	8001274 <HAL_GetTick>
 800421c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800421e:	4b39      	ldr	r3, [pc, #228]	; (8004304 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	015b      	lsls	r3, r3, #5
 8004224:	0d1b      	lsrs	r3, r3, #20
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	fb02 f303 	mul.w	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800422e:	e054      	b.n	80042da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004236:	d050      	beq.n	80042da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004238:	f7fd f81c 	bl	8001274 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	429a      	cmp	r2, r3
 8004246:	d902      	bls.n	800424e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d13d      	bne.n	80042ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800425c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004266:	d111      	bne.n	800428c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004270:	d004      	beq.n	800427c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427a:	d107      	bne.n	800428c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004294:	d10f      	bne.n	80042b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e017      	b.n	80042fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4013      	ands	r3, r2
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	bf0c      	ite	eq
 80042ea:	2301      	moveq	r3, #1
 80042ec:	2300      	movne	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d19b      	bne.n	8004230 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000000 	.word	0x20000000

08004308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2200      	movs	r2, #0
 800431c:	2180      	movs	r1, #128	; 0x80
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7ff ff6a 	bl	80041f8 <SPI_WaitFlagStateUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d007      	beq.n	800433a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	f043 0220 	orr.w	r2, r3, #32
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e000      	b.n	800433c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004344:	b084      	sub	sp, #16
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	f107 0014 	add.w	r0, r7, #20
 8004352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	b004      	add	sp, #16
 8004362:	4770      	bx	lr

08004364 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004374:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004378:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	b29a      	uxth	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004398:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800439c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	4013      	ands	r3, r2
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr

080043c4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr

080043dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80043dc:	b084      	sub	sp, #16
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	f107 0014 	add.w	r0, r7, #20
 80043ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	b004      	add	sp, #16
 800441a:	4770      	bx	lr

0800441c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800441c:	b480      	push	{r7}
 800441e:	b09b      	sub	sp, #108	; 0x6c
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	78db      	ldrb	r3, [r3, #3]
 800444a:	2b03      	cmp	r3, #3
 800444c:	d81f      	bhi.n	800448e <USB_ActivateEndpoint+0x72>
 800444e:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <USB_ActivateEndpoint+0x38>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004465 	.word	0x08004465
 8004458:	08004481 	.word	0x08004481
 800445c:	08004497 	.word	0x08004497
 8004460:	08004473 	.word	0x08004473
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004464:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004468:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800446c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004470:	e012      	b.n	8004498 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004472:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004476:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800447a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800447e:	e00b      	b.n	8004498 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004480:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004484:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004488:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800448c:	e004      	b.n	8004498 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004494:	e000      	b.n	8004498 <USB_ActivateEndpoint+0x7c>
      break;
 8004496:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	441a      	add	r2, r3
 80044a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	441a      	add	r2, r3
 80044e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80044ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	7b1b      	ldrb	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f040 8149 	bne.w	800479c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	785b      	ldrb	r3, [r3, #1]
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 8084 	beq.w	800461c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4413      	add	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	011a      	lsls	r2, r3, #4
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	88db      	ldrh	r3, [r3, #6]
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	b29b      	uxth	r3, r3
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	81fb      	strh	r3, [r7, #14]
 8004556:	89fb      	ldrh	r3, [r7, #14]
 8004558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01b      	beq.n	8004598 <USB_ActivateEndpoint+0x17c>
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	81bb      	strh	r3, [r7, #12]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	441a      	add	r2, r3
 8004582:	89bb      	ldrh	r3, [r7, #12]
 8004584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800458c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004590:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004594:	b29b      	uxth	r3, r3
 8004596:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	78db      	ldrb	r3, [r3, #3]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d020      	beq.n	80045e2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b6:	813b      	strh	r3, [r7, #8]
 80045b8:	893b      	ldrh	r3, [r7, #8]
 80045ba:	f083 0320 	eor.w	r3, r3, #32
 80045be:	813b      	strh	r3, [r7, #8]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	441a      	add	r2, r3
 80045ca:	893b      	ldrh	r3, [r7, #8]
 80045cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045dc:	b29b      	uxth	r3, r3
 80045de:	8013      	strh	r3, [r2, #0]
 80045e0:	e27f      	b.n	8004ae2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f8:	817b      	strh	r3, [r7, #10]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	441a      	add	r2, r3
 8004604:	897b      	ldrh	r3, [r7, #10]
 8004606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800460a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800460e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004616:	b29b      	uxth	r3, r3
 8004618:	8013      	strh	r3, [r2, #0]
 800461a:	e262      	b.n	8004ae2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004626:	b29b      	uxth	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	4413      	add	r3, r2
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	011a      	lsls	r2, r3, #4
 8004636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004638:	4413      	add	r3, r2
 800463a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	88db      	ldrh	r3, [r3, #6]
 8004644:	085b      	lsrs	r3, r3, #1
 8004646:	b29b      	uxth	r3, r3
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	627b      	str	r3, [r7, #36]	; 0x24
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465a:	b29b      	uxth	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	4413      	add	r3, r2
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	011a      	lsls	r2, r3, #4
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	4413      	add	r3, r2
 800466e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004672:	623b      	str	r3, [r7, #32]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d112      	bne.n	80046a2 <USB_ActivateEndpoint+0x286>
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004686:	b29a      	uxth	r2, r3
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	801a      	strh	r2, [r3, #0]
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800469a:	b29a      	uxth	r2, r3
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	801a      	strh	r2, [r3, #0]
 80046a0:	e02f      	b.n	8004702 <USB_ActivateEndpoint+0x2e6>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b3e      	cmp	r3, #62	; 0x3e
 80046a8:	d813      	bhi.n	80046d2 <USB_ActivateEndpoint+0x2b6>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	663b      	str	r3, [r7, #96]	; 0x60
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <USB_ActivateEndpoint+0x2a8>
 80046be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046c0:	3301      	adds	r3, #1
 80046c2:	663b      	str	r3, [r7, #96]	; 0x60
 80046c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	029b      	lsls	r3, r3, #10
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	801a      	strh	r2, [r3, #0]
 80046d0:	e017      	b.n	8004702 <USB_ActivateEndpoint+0x2e6>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	663b      	str	r3, [r7, #96]	; 0x60
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d102      	bne.n	80046ec <USB_ActivateEndpoint+0x2d0>
 80046e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046e8:	3b01      	subs	r3, #1
 80046ea:	663b      	str	r3, [r7, #96]	; 0x60
 80046ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	029b      	lsls	r3, r3, #10
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	83fb      	strh	r3, [r7, #30]
 8004710:	8bfb      	ldrh	r3, [r7, #30]
 8004712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d01b      	beq.n	8004752 <USB_ActivateEndpoint+0x336>
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004730:	83bb      	strh	r3, [r7, #28]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	441a      	add	r2, r3
 800473c:	8bbb      	ldrh	r3, [r7, #28]
 800473e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800474a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474e:	b29b      	uxth	r3, r3
 8004750:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004768:	837b      	strh	r3, [r7, #26]
 800476a:	8b7b      	ldrh	r3, [r7, #26]
 800476c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004770:	837b      	strh	r3, [r7, #26]
 8004772:	8b7b      	ldrh	r3, [r7, #26]
 8004774:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004778:	837b      	strh	r3, [r7, #26]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	441a      	add	r2, r3
 8004784:	8b7b      	ldrh	r3, [r7, #26]
 8004786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800478a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800478e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004796:	b29b      	uxth	r3, r3
 8004798:	8013      	strh	r3, [r2, #0]
 800479a:	e1a2      	b.n	8004ae2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	441a      	add	r2, r3
 80047c0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80047c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	65bb      	str	r3, [r7, #88]	; 0x58
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047e8:	4413      	add	r3, r2
 80047ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	011a      	lsls	r2, r3, #4
 80047f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047fa:	657b      	str	r3, [r7, #84]	; 0x54
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	891b      	ldrh	r3, [r3, #8]
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	b29b      	uxth	r3, r3
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800480a:	801a      	strh	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	653b      	str	r3, [r7, #80]	; 0x50
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004816:	b29b      	uxth	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800481c:	4413      	add	r3, r2
 800481e:	653b      	str	r3, [r7, #80]	; 0x50
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	011a      	lsls	r2, r3, #4
 8004826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004828:	4413      	add	r3, r2
 800482a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800482e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	895b      	ldrh	r3, [r3, #10]
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	b29b      	uxth	r3, r3
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	785b      	ldrb	r3, [r3, #1]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f040 8091 	bne.w	800496c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004858:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800485a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01b      	beq.n	800489a <USB_ActivateEndpoint+0x47e>
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004878:	877b      	strh	r3, [r7, #58]	; 0x3a
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	441a      	add	r2, r3
 8004884:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800488a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800488e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004896:	b29b      	uxth	r3, r3
 8004898:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	873b      	strh	r3, [r7, #56]	; 0x38
 80048a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d01b      	beq.n	80048ea <USB_ActivateEndpoint+0x4ce>
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	441a      	add	r2, r3
 80048d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004900:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004902:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004904:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004908:	86bb      	strh	r3, [r7, #52]	; 0x34
 800490a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800490c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004910:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	441a      	add	r2, r3
 800491c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800491e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492e:	b29b      	uxth	r3, r3
 8004930:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	b29b      	uxth	r3, r3
 8004940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004948:	867b      	strh	r3, [r7, #50]	; 0x32
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	441a      	add	r2, r3
 8004954:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800495a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004966:	b29b      	uxth	r3, r3
 8004968:	8013      	strh	r3, [r2, #0]
 800496a:	e0ba      	b.n	8004ae2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800497c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01d      	beq.n	80049c4 <USB_ActivateEndpoint+0x5a8>
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800499a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	441a      	add	r2, r3
 80049ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80049d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01d      	beq.n	8004a1c <USB_ActivateEndpoint+0x600>
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	441a      	add	r2, r3
 8004a04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	78db      	ldrb	r3, [r3, #3]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d024      	beq.n	8004a6e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a42:	f083 0320 	eor.w	r3, r3, #32
 8004a46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	441a      	add	r2, r3
 8004a54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	8013      	strh	r3, [r2, #0]
 8004a6c:	e01d      	b.n	8004aaa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	441a      	add	r2, r3
 8004a92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	441a      	add	r2, r3
 8004acc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004ae2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	376c      	adds	r7, #108	; 0x6c
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b08d      	sub	sp, #52	; 0x34
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	7b1b      	ldrb	r3, [r3, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 808e 	bne.w	8004c20 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	785b      	ldrb	r3, [r3, #1]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d044      	beq.n	8004b96 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	81bb      	strh	r3, [r7, #12]
 8004b1a:	89bb      	ldrh	r3, [r7, #12]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <USB_DeactivateEndpoint+0x6c>
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	817b      	strh	r3, [r7, #10]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	441a      	add	r2, r3
 8004b46:	897b      	ldrh	r3, [r7, #10]
 8004b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b72:	813b      	strh	r3, [r7, #8]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	441a      	add	r2, r3
 8004b7e:	893b      	ldrh	r3, [r7, #8]
 8004b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	8013      	strh	r3, [r2, #0]
 8004b94:	e192      	b.n	8004ebc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	827b      	strh	r3, [r7, #18]
 8004ba4:	8a7b      	ldrh	r3, [r7, #18]
 8004ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01b      	beq.n	8004be6 <USB_DeactivateEndpoint+0xf6>
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc4:	823b      	strh	r3, [r7, #16]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	441a      	add	r2, r3
 8004bd0:	8a3b      	ldrh	r3, [r7, #16]
 8004bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfc:	81fb      	strh	r3, [r7, #14]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	89fb      	ldrh	r3, [r7, #14]
 8004c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	8013      	strh	r3, [r2, #0]
 8004c1e:	e14d      	b.n	8004ebc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f040 80a5 	bne.w	8004d74 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	843b      	strh	r3, [r7, #32]
 8004c38:	8c3b      	ldrh	r3, [r7, #32]
 8004c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01b      	beq.n	8004c7a <USB_DeactivateEndpoint+0x18a>
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c58:	83fb      	strh	r3, [r7, #30]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	441a      	add	r2, r3
 8004c64:	8bfb      	ldrh	r3, [r7, #30]
 8004c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	83bb      	strh	r3, [r7, #28]
 8004c88:	8bbb      	ldrh	r3, [r7, #28]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01b      	beq.n	8004cca <USB_DeactivateEndpoint+0x1da>
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca8:	837b      	strh	r3, [r7, #26]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	441a      	add	r2, r3
 8004cb4:	8b7b      	ldrh	r3, [r7, #26]
 8004cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce0:	833b      	strh	r3, [r7, #24]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	441a      	add	r2, r3
 8004cec:	8b3b      	ldrh	r3, [r7, #24]
 8004cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d18:	82fb      	strh	r3, [r7, #22]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	441a      	add	r2, r3
 8004d24:	8afb      	ldrh	r3, [r7, #22]
 8004d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d50:	82bb      	strh	r3, [r7, #20]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	441a      	add	r2, r3
 8004d5c:	8abb      	ldrh	r3, [r7, #20]
 8004d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	8013      	strh	r3, [r2, #0]
 8004d72:	e0a3      	b.n	8004ebc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01b      	beq.n	8004dc4 <USB_DeactivateEndpoint+0x2d4>
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	441a      	add	r2, r3
 8004dae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004dd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01b      	beq.n	8004e14 <USB_DeactivateEndpoint+0x324>
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	853b      	strh	r3, [r7, #40]	; 0x28
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	441a      	add	r2, r3
 8004dfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e62:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	441a      	add	r2, r3
 8004e6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	441a      	add	r2, r3
 8004ea6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3734      	adds	r7, #52	; 0x34
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr

08004ec8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b0cc      	sub	sp, #304	; 0x130
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	6018      	str	r0, [r3, #0]
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ed6:	463b      	mov	r3, r7
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	f040 872e 	bne.w	8005d3e <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ee2:	463b      	mov	r3, r7
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699a      	ldr	r2, [r3, #24]
 8004ee8:	463b      	mov	r3, r7
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d905      	bls.n	8004efe <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004efc:	e004      	b.n	8004f08 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004efe:	463b      	mov	r3, r7
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f08:	463b      	mov	r3, r7
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	7b1b      	ldrb	r3, [r3, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d134      	bne.n	8004f7c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f12:	463b      	mov	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6959      	ldr	r1, [r3, #20]
 8004f18:	463b      	mov	r3, r7
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	88da      	ldrh	r2, [r3, #6]
 8004f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	1d38      	adds	r0, r7, #4
 8004f26:	6800      	ldr	r0, [r0, #0]
 8004f28:	f001 fc03 	bl	8006732 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f2c:	f107 0310 	add.w	r3, r7, #16
 8004f30:	1d3a      	adds	r2, r7, #4
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	1d3b      	adds	r3, r7, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	4619      	mov	r1, r3
 8004f42:	f107 0310 	add.w	r3, r7, #16
 8004f46:	f107 0210 	add.w	r2, r7, #16
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	463b      	mov	r3, r7
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	011a      	lsls	r2, r3, #4
 8004f58:	f107 0310 	add.w	r3, r7, #16
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004f64:	f107 030c 	add.w	r3, r7, #12
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	f107 030c 	add.w	r3, r7, #12
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	801a      	strh	r2, [r3, #0]
 8004f78:	f000 beac 	b.w	8005cd4 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	78db      	ldrb	r3, [r3, #3]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	f040 838c 	bne.w	80056a0 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f88:	463b      	mov	r3, r7
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6a1a      	ldr	r2, [r3, #32]
 8004f8e:	463b      	mov	r3, r7
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	f240 8330 	bls.w	80055fa <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004f9a:	1d3b      	adds	r3, r7, #4
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004fb8:	1d3b      	adds	r3, r7, #4
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	441a      	add	r2, r3
 8004fc6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004fde:	463b      	mov	r3, r7
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6a1a      	ldr	r2, [r3, #32]
 8004fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe8:	1ad2      	subs	r2, r2, r3
 8004fea:	463b      	mov	r3, r7
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ff0:	1d3b      	adds	r3, r7, #4
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 819e 	beq.w	8005348 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800500c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005010:	1d3a      	adds	r2, r7, #4
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	463b      	mov	r3, r7
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d17a      	bne.n	8005116 <USB_EPStartXfer+0x24e>
 8005020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005024:	1d3a      	adds	r2, r7, #4
 8005026:	6812      	ldr	r2, [r2, #0]
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	1d3b      	adds	r3, r7, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005032:	b29b      	uxth	r3, r3
 8005034:	4619      	mov	r1, r3
 8005036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800503a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	440a      	add	r2, r1
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	463b      	mov	r3, r7
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	011a      	lsls	r2, r3, #4
 800504c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4413      	add	r3, r2
 8005054:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d11a      	bne.n	800509c <USB_EPStartXfer+0x1d4>
 8005066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005074:	b29a      	uxth	r2, r3
 8005076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	801a      	strh	r2, [r3, #0]
 800507e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800508c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005090:	b29a      	uxth	r2, r3
 8005092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	801a      	strh	r2, [r3, #0]
 800509a:	e062      	b.n	8005162 <USB_EPStartXfer+0x29a>
 800509c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a0:	2b3e      	cmp	r3, #62	; 0x3e
 80050a2:	d819      	bhi.n	80050d8 <USB_EPStartXfer+0x210>
 80050a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d004      	beq.n	80050c4 <USB_EPStartXfer+0x1fc>
 80050ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050be:	3301      	adds	r3, #1
 80050c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	029b      	lsls	r3, r3, #10
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	801a      	strh	r2, [r3, #0]
 80050d6:	e044      	b.n	8005162 <USB_EPStartXfer+0x29a>
 80050d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050dc:	095b      	lsrs	r3, r3, #5
 80050de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d104      	bne.n	80050f8 <USB_EPStartXfer+0x230>
 80050ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050f2:	3b01      	subs	r3, #1
 80050f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	029b      	lsls	r3, r3, #10
 8005100:	b29b      	uxth	r3, r3
 8005102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510a:	b29a      	uxth	r2, r3
 800510c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	801a      	strh	r2, [r3, #0]
 8005114:	e025      	b.n	8005162 <USB_EPStartXfer+0x29a>
 8005116:	463b      	mov	r3, r7
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d120      	bne.n	8005162 <USB_EPStartXfer+0x29a>
 8005120:	1d3b      	adds	r3, r7, #4
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005128:	b29b      	uxth	r3, r3
 800512a:	4619      	mov	r1, r3
 800512c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005130:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	440a      	add	r2, r1
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	463b      	mov	r3, r7
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	011a      	lsls	r2, r3, #4
 8005142:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4413      	add	r3, r2
 800514a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800514e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005158:	b29a      	uxth	r2, r3
 800515a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005162:	463b      	mov	r3, r7
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	895b      	ldrh	r3, [r3, #10]
 8005168:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800516c:	463b      	mov	r3, r7
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6959      	ldr	r1, [r3, #20]
 8005172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005176:	b29b      	uxth	r3, r3
 8005178:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800517c:	1d38      	adds	r0, r7, #4
 800517e:	6800      	ldr	r0, [r0, #0]
 8005180:	f001 fad7 	bl	8006732 <USB_WritePMA>
            ep->xfer_buff += len;
 8005184:	463b      	mov	r3, r7
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800518e:	441a      	add	r2, r3
 8005190:	463b      	mov	r3, r7
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005196:	463b      	mov	r3, r7
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	463b      	mov	r3, r7
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d909      	bls.n	80051ba <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80051a6:	463b      	mov	r3, r7
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6a1a      	ldr	r2, [r3, #32]
 80051ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b0:	1ad2      	subs	r2, r2, r3
 80051b2:	463b      	mov	r3, r7
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	621a      	str	r2, [r3, #32]
 80051b8:	e008      	b.n	80051cc <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80051ba:	463b      	mov	r3, r7
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80051c4:	463b      	mov	r3, r7
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2200      	movs	r2, #0
 80051ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051cc:	463b      	mov	r3, r7
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d17a      	bne.n	80052cc <USB_EPStartXfer+0x404>
 80051d6:	f107 0318 	add.w	r3, r7, #24
 80051da:	1d3a      	adds	r2, r7, #4
 80051dc:	6812      	ldr	r2, [r2, #0]
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	4619      	mov	r1, r3
 80051ec:	f107 0318 	add.w	r3, r7, #24
 80051f0:	f107 0218 	add.w	r2, r7, #24
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	440a      	add	r2, r1
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	463b      	mov	r3, r7
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	011a      	lsls	r2, r3, #4
 8005202:	f107 0318 	add.w	r3, r7, #24
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4413      	add	r3, r2
 800520a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800520e:	f107 0314 	add.w	r3, r7, #20
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005218:	2b00      	cmp	r3, #0
 800521a:	d11a      	bne.n	8005252 <USB_EPStartXfer+0x38a>
 800521c:	f107 0314 	add.w	r3, r7, #20
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800522a:	b29a      	uxth	r2, r3
 800522c:	f107 0314 	add.w	r3, r7, #20
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	f107 0314 	add.w	r3, r7, #20
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005246:	b29a      	uxth	r2, r3
 8005248:	f107 0314 	add.w	r3, r7, #20
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	801a      	strh	r2, [r3, #0]
 8005250:	e067      	b.n	8005322 <USB_EPStartXfer+0x45a>
 8005252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005256:	2b3e      	cmp	r3, #62	; 0x3e
 8005258:	d819      	bhi.n	800528e <USB_EPStartXfer+0x3c6>
 800525a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800525e:	085b      	lsrs	r3, r3, #1
 8005260:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d004      	beq.n	800527a <USB_EPStartXfer+0x3b2>
 8005270:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005274:	3301      	adds	r3, #1
 8005276:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800527a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800527e:	b29b      	uxth	r3, r3
 8005280:	029b      	lsls	r3, r3, #10
 8005282:	b29a      	uxth	r2, r3
 8005284:	f107 0314 	add.w	r3, r7, #20
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	801a      	strh	r2, [r3, #0]
 800528c:	e049      	b.n	8005322 <USB_EPStartXfer+0x45a>
 800528e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d104      	bne.n	80052ae <USB_EPStartXfer+0x3e6>
 80052a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80052a8:	3b01      	subs	r3, #1
 80052aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80052ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	029b      	lsls	r3, r3, #10
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	f107 0314 	add.w	r3, r7, #20
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	e02a      	b.n	8005322 <USB_EPStartXfer+0x45a>
 80052cc:	463b      	mov	r3, r7
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d125      	bne.n	8005322 <USB_EPStartXfer+0x45a>
 80052d6:	f107 0320 	add.w	r3, r7, #32
 80052da:	1d3a      	adds	r2, r7, #4
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	4619      	mov	r1, r3
 80052ec:	f107 0320 	add.w	r3, r7, #32
 80052f0:	f107 0220 	add.w	r2, r7, #32
 80052f4:	6812      	ldr	r2, [r2, #0]
 80052f6:	440a      	add	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	463b      	mov	r3, r7
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	011a      	lsls	r2, r3, #4
 8005302:	f107 0320 	add.w	r3, r7, #32
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4413      	add	r3, r2
 800530a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800530e:	f107 031c 	add.w	r3, r7, #28
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005318:	b29a      	uxth	r2, r3
 800531a:	f107 031c 	add.w	r3, r7, #28
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005322:	463b      	mov	r3, r7
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	891b      	ldrh	r3, [r3, #8]
 8005328:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800532c:	463b      	mov	r3, r7
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6959      	ldr	r1, [r3, #20]
 8005332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005336:	b29b      	uxth	r3, r3
 8005338:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800533c:	1d38      	adds	r0, r7, #4
 800533e:	6800      	ldr	r0, [r0, #0]
 8005340:	f001 f9f7 	bl	8006732 <USB_WritePMA>
 8005344:	f000 bcc6 	b.w	8005cd4 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005348:	463b      	mov	r3, r7
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	785b      	ldrb	r3, [r3, #1]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d164      	bne.n	800541c <USB_EPStartXfer+0x554>
 8005352:	1d3b      	adds	r3, r7, #4
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	64bb      	str	r3, [r7, #72]	; 0x48
 8005358:	1d3b      	adds	r3, r7, #4
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005360:	b29b      	uxth	r3, r3
 8005362:	461a      	mov	r2, r3
 8005364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005366:	4413      	add	r3, r2
 8005368:	64bb      	str	r3, [r7, #72]	; 0x48
 800536a:	463b      	mov	r3, r7
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	011a      	lsls	r2, r3, #4
 8005372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005374:	4413      	add	r3, r2
 8005376:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800537a:	647b      	str	r3, [r7, #68]	; 0x44
 800537c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005380:	2b00      	cmp	r3, #0
 8005382:	d112      	bne.n	80053aa <USB_EPStartXfer+0x4e2>
 8005384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800538e:	b29a      	uxth	r2, r3
 8005390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	e057      	b.n	800545a <USB_EPStartXfer+0x592>
 80053aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ae:	2b3e      	cmp	r3, #62	; 0x3e
 80053b0:	d817      	bhi.n	80053e2 <USB_EPStartXfer+0x51a>
 80053b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d004      	beq.n	80053d2 <USB_EPStartXfer+0x50a>
 80053c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053cc:	3301      	adds	r3, #1
 80053ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	029b      	lsls	r3, r3, #10
 80053da:	b29a      	uxth	r2, r3
 80053dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053de:	801a      	strh	r2, [r3, #0]
 80053e0:	e03b      	b.n	800545a <USB_EPStartXfer+0x592>
 80053e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f0:	f003 031f 	and.w	r3, r3, #31
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d104      	bne.n	8005402 <USB_EPStartXfer+0x53a>
 80053f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053fc:	3b01      	subs	r3, #1
 80053fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005402:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005406:	b29b      	uxth	r3, r3
 8005408:	029b      	lsls	r3, r3, #10
 800540a:	b29b      	uxth	r3, r3
 800540c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005414:	b29a      	uxth	r2, r3
 8005416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	e01e      	b.n	800545a <USB_EPStartXfer+0x592>
 800541c:	463b      	mov	r3, r7
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	785b      	ldrb	r3, [r3, #1]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d119      	bne.n	800545a <USB_EPStartXfer+0x592>
 8005426:	1d3b      	adds	r3, r7, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	653b      	str	r3, [r7, #80]	; 0x50
 800542c:	1d3b      	adds	r3, r7, #4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005434:	b29b      	uxth	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800543a:	4413      	add	r3, r2
 800543c:	653b      	str	r3, [r7, #80]	; 0x50
 800543e:	463b      	mov	r3, r7
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	011a      	lsls	r2, r3, #4
 8005446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005448:	4413      	add	r3, r2
 800544a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800544e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005454:	b29a      	uxth	r2, r3
 8005456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005458:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800545a:	463b      	mov	r3, r7
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	891b      	ldrh	r3, [r3, #8]
 8005460:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005464:	463b      	mov	r3, r7
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6959      	ldr	r1, [r3, #20]
 800546a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800546e:	b29b      	uxth	r3, r3
 8005470:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005474:	1d38      	adds	r0, r7, #4
 8005476:	6800      	ldr	r0, [r0, #0]
 8005478:	f001 f95b 	bl	8006732 <USB_WritePMA>
            ep->xfer_buff += len;
 800547c:	463b      	mov	r3, r7
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695a      	ldr	r2, [r3, #20]
 8005482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005486:	441a      	add	r2, r3
 8005488:	463b      	mov	r3, r7
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800548e:	463b      	mov	r3, r7
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6a1a      	ldr	r2, [r3, #32]
 8005494:	463b      	mov	r3, r7
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	429a      	cmp	r2, r3
 800549c:	d909      	bls.n	80054b2 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800549e:	463b      	mov	r3, r7
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6a1a      	ldr	r2, [r3, #32]
 80054a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a8:	1ad2      	subs	r2, r2, r3
 80054aa:	463b      	mov	r3, r7
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	621a      	str	r2, [r3, #32]
 80054b0:	e008      	b.n	80054c4 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80054b2:	463b      	mov	r3, r7
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80054bc:	463b      	mov	r3, r7
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2200      	movs	r2, #0
 80054c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054c4:	1d3b      	adds	r3, r7, #4
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	643b      	str	r3, [r7, #64]	; 0x40
 80054ca:	463b      	mov	r3, r7
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d164      	bne.n	800559e <USB_EPStartXfer+0x6d6>
 80054d4:	1d3b      	adds	r3, r7, #4
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80054da:	1d3b      	adds	r3, r7, #4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	4413      	add	r3, r2
 80054ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80054ec:	463b      	mov	r3, r7
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	011a      	lsls	r2, r3, #4
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	4413      	add	r3, r2
 80054f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054fc:	637b      	str	r3, [r7, #52]	; 0x34
 80054fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d112      	bne.n	800552c <USB_EPStartXfer+0x664>
 8005506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005510:	b29a      	uxth	r2, r3
 8005512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005514:	801a      	strh	r2, [r3, #0]
 8005516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005524:	b29a      	uxth	r2, r3
 8005526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005528:	801a      	strh	r2, [r3, #0]
 800552a:	e054      	b.n	80055d6 <USB_EPStartXfer+0x70e>
 800552c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005530:	2b3e      	cmp	r3, #62	; 0x3e
 8005532:	d817      	bhi.n	8005564 <USB_EPStartXfer+0x69c>
 8005534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005538:	085b      	lsrs	r3, r3, #1
 800553a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800553e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d004      	beq.n	8005554 <USB_EPStartXfer+0x68c>
 800554a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800554e:	3301      	adds	r3, #1
 8005550:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005554:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005558:	b29b      	uxth	r3, r3
 800555a:	029b      	lsls	r3, r3, #10
 800555c:	b29a      	uxth	r2, r3
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	801a      	strh	r2, [r3, #0]
 8005562:	e038      	b.n	80055d6 <USB_EPStartXfer+0x70e>
 8005564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800556e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005572:	f003 031f 	and.w	r3, r3, #31
 8005576:	2b00      	cmp	r3, #0
 8005578:	d104      	bne.n	8005584 <USB_EPStartXfer+0x6bc>
 800557a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800557e:	3b01      	subs	r3, #1
 8005580:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005584:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005588:	b29b      	uxth	r3, r3
 800558a:	029b      	lsls	r3, r3, #10
 800558c:	b29b      	uxth	r3, r3
 800558e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005596:	b29a      	uxth	r2, r3
 8005598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559a:	801a      	strh	r2, [r3, #0]
 800559c:	e01b      	b.n	80055d6 <USB_EPStartXfer+0x70e>
 800559e:	463b      	mov	r3, r7
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	785b      	ldrb	r3, [r3, #1]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d116      	bne.n	80055d6 <USB_EPStartXfer+0x70e>
 80055a8:	1d3b      	adds	r3, r7, #4
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b6:	4413      	add	r3, r2
 80055b8:	643b      	str	r3, [r7, #64]	; 0x40
 80055ba:	463b      	mov	r3, r7
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	011a      	lsls	r2, r3, #4
 80055c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c4:	4413      	add	r3, r2
 80055c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055d6:	463b      	mov	r3, r7
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	895b      	ldrh	r3, [r3, #10]
 80055dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055e0:	463b      	mov	r3, r7
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6959      	ldr	r1, [r3, #20]
 80055e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055f0:	1d38      	adds	r0, r7, #4
 80055f2:	6800      	ldr	r0, [r0, #0]
 80055f4:	f001 f89d 	bl	8006732 <USB_WritePMA>
 80055f8:	e36c      	b.n	8005cd4 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80055fa:	463b      	mov	r3, r7
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005604:	1d3b      	adds	r3, r7, #4
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	463b      	mov	r3, r7
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800561a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005622:	1d3b      	adds	r3, r7, #4
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	463b      	mov	r3, r7
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	441a      	add	r2, r3
 8005630:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800563c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005644:	b29b      	uxth	r3, r3
 8005646:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005648:	1d3b      	adds	r3, r7, #4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800564e:	1d3b      	adds	r3, r7, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005656:	b29b      	uxth	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800565c:	4413      	add	r3, r2
 800565e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005660:	463b      	mov	r3, r7
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	011a      	lsls	r2, r3, #4
 8005668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800566a:	4413      	add	r3, r2
 800566c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005670:	65bb      	str	r3, [r7, #88]	; 0x58
 8005672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005676:	b29a      	uxth	r2, r3
 8005678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800567a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800567c:	463b      	mov	r3, r7
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	891b      	ldrh	r3, [r3, #8]
 8005682:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005686:	463b      	mov	r3, r7
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6959      	ldr	r1, [r3, #20]
 800568c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005690:	b29b      	uxth	r3, r3
 8005692:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005696:	1d38      	adds	r0, r7, #4
 8005698:	6800      	ldr	r0, [r0, #0]
 800569a:	f001 f84a 	bl	8006732 <USB_WritePMA>
 800569e:	e319      	b.n	8005cd4 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80056a0:	1d3b      	adds	r3, r7, #4
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	463b      	mov	r3, r7
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80056be:	1d3b      	adds	r3, r7, #4
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	463b      	mov	r3, r7
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	441a      	add	r2, r3
 80056cc:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80056d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80056e4:	463b      	mov	r3, r7
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6a1a      	ldr	r2, [r3, #32]
 80056ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ee:	1ad2      	subs	r2, r2, r3
 80056f0:	463b      	mov	r3, r7
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056f6:	1d3b      	adds	r3, r7, #4
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	463b      	mov	r3, r7
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8162 	beq.w	80059d6 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005712:	1d3b      	adds	r3, r7, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800571a:	463b      	mov	r3, r7
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d164      	bne.n	80057ee <USB_EPStartXfer+0x926>
 8005724:	1d3b      	adds	r3, r7, #4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	67bb      	str	r3, [r7, #120]	; 0x78
 800572a:	1d3b      	adds	r3, r7, #4
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005732:	b29b      	uxth	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005738:	4413      	add	r3, r2
 800573a:	67bb      	str	r3, [r7, #120]	; 0x78
 800573c:	463b      	mov	r3, r7
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	011a      	lsls	r2, r3, #4
 8005744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005746:	4413      	add	r3, r2
 8005748:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800574c:	677b      	str	r3, [r7, #116]	; 0x74
 800574e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d112      	bne.n	800577c <USB_EPStartXfer+0x8b4>
 8005756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29b      	uxth	r3, r3
 800575c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005760:	b29a      	uxth	r2, r3
 8005762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005764:	801a      	strh	r2, [r3, #0]
 8005766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	b29b      	uxth	r3, r3
 800576c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005774:	b29a      	uxth	r2, r3
 8005776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	e057      	b.n	800582c <USB_EPStartXfer+0x964>
 800577c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005780:	2b3e      	cmp	r3, #62	; 0x3e
 8005782:	d817      	bhi.n	80057b4 <USB_EPStartXfer+0x8ec>
 8005784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005788:	085b      	lsrs	r3, r3, #1
 800578a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800578e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d004      	beq.n	80057a4 <USB_EPStartXfer+0x8dc>
 800579a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800579e:	3301      	adds	r3, #1
 80057a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	029b      	lsls	r3, r3, #10
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b0:	801a      	strh	r2, [r3, #0]
 80057b2:	e03b      	b.n	800582c <USB_EPStartXfer+0x964>
 80057b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d104      	bne.n	80057d4 <USB_EPStartXfer+0x90c>
 80057ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80057ce:	3b01      	subs	r3, #1
 80057d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80057d8:	b29b      	uxth	r3, r3
 80057da:	029b      	lsls	r3, r3, #10
 80057dc:	b29b      	uxth	r3, r3
 80057de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	e01e      	b.n	800582c <USB_EPStartXfer+0x964>
 80057ee:	463b      	mov	r3, r7
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d119      	bne.n	800582c <USB_EPStartXfer+0x964>
 80057f8:	1d3b      	adds	r3, r7, #4
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005800:	b29b      	uxth	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005808:	4413      	add	r3, r2
 800580a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800580e:	463b      	mov	r3, r7
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	011a      	lsls	r2, r3, #4
 8005816:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800581a:	4413      	add	r3, r2
 800581c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005820:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005826:	b29a      	uxth	r2, r3
 8005828:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800582a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	895b      	ldrh	r3, [r3, #10]
 8005832:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005836:	463b      	mov	r3, r7
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6959      	ldr	r1, [r3, #20]
 800583c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005840:	b29b      	uxth	r3, r3
 8005842:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005846:	1d38      	adds	r0, r7, #4
 8005848:	6800      	ldr	r0, [r0, #0]
 800584a:	f000 ff72 	bl	8006732 <USB_WritePMA>
          ep->xfer_buff += len;
 800584e:	463b      	mov	r3, r7
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695a      	ldr	r2, [r3, #20]
 8005854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005858:	441a      	add	r2, r3
 800585a:	463b      	mov	r3, r7
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005860:	463b      	mov	r3, r7
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	463b      	mov	r3, r7
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	429a      	cmp	r2, r3
 800586e:	d909      	bls.n	8005884 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005870:	463b      	mov	r3, r7
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6a1a      	ldr	r2, [r3, #32]
 8005876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800587a:	1ad2      	subs	r2, r2, r3
 800587c:	463b      	mov	r3, r7
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	621a      	str	r2, [r3, #32]
 8005882:	e008      	b.n	8005896 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005884:	463b      	mov	r3, r7
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800588e:	463b      	mov	r3, r7
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2200      	movs	r2, #0
 8005894:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 821a 	beq.w	8005cd4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058a0:	463b      	mov	r3, r7
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d164      	bne.n	8005974 <USB_EPStartXfer+0xaac>
 80058aa:	1d3b      	adds	r3, r7, #4
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80058b0:	1d3b      	adds	r3, r7, #4
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058be:	4413      	add	r3, r2
 80058c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80058c2:	463b      	mov	r3, r7
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	011a      	lsls	r2, r3, #4
 80058ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058cc:	4413      	add	r3, r2
 80058ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058d2:	667b      	str	r3, [r7, #100]	; 0x64
 80058d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d112      	bne.n	8005902 <USB_EPStartXfer+0xa3a>
 80058dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ea:	801a      	strh	r2, [r3, #0]
 80058ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058fe:	801a      	strh	r2, [r3, #0]
 8005900:	e057      	b.n	80059b2 <USB_EPStartXfer+0xaea>
 8005902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005906:	2b3e      	cmp	r3, #62	; 0x3e
 8005908:	d817      	bhi.n	800593a <USB_EPStartXfer+0xa72>
 800590a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <USB_EPStartXfer+0xa62>
 8005920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005924:	3301      	adds	r3, #1
 8005926:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800592a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800592e:	b29b      	uxth	r3, r3
 8005930:	029b      	lsls	r3, r3, #10
 8005932:	b29a      	uxth	r2, r3
 8005934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	e03b      	b.n	80059b2 <USB_EPStartXfer+0xaea>
 800593a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	2b00      	cmp	r3, #0
 800594e:	d104      	bne.n	800595a <USB_EPStartXfer+0xa92>
 8005950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005954:	3b01      	subs	r3, #1
 8005956:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595e:	b29b      	uxth	r3, r3
 8005960:	029b      	lsls	r3, r3, #10
 8005962:	b29b      	uxth	r3, r3
 8005964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596c:	b29a      	uxth	r2, r3
 800596e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	e01e      	b.n	80059b2 <USB_EPStartXfer+0xaea>
 8005974:	463b      	mov	r3, r7
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	785b      	ldrb	r3, [r3, #1]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d119      	bne.n	80059b2 <USB_EPStartXfer+0xaea>
 800597e:	1d3b      	adds	r3, r7, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	673b      	str	r3, [r7, #112]	; 0x70
 8005984:	1d3b      	adds	r3, r7, #4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598c:	b29b      	uxth	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005992:	4413      	add	r3, r2
 8005994:	673b      	str	r3, [r7, #112]	; 0x70
 8005996:	463b      	mov	r3, r7
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	011a      	lsls	r2, r3, #4
 800599e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059a0:	4413      	add	r3, r2
 80059a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80059b2:	463b      	mov	r3, r7
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	891b      	ldrh	r3, [r3, #8]
 80059b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059bc:	463b      	mov	r3, r7
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6959      	ldr	r1, [r3, #20]
 80059c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059cc:	1d38      	adds	r0, r7, #4
 80059ce:	6800      	ldr	r0, [r0, #0]
 80059d0:	f000 feaf 	bl	8006732 <USB_WritePMA>
 80059d4:	e17e      	b.n	8005cd4 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059d6:	463b      	mov	r3, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	785b      	ldrb	r3, [r3, #1]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d16f      	bne.n	8005ac0 <USB_EPStartXfer+0xbf8>
 80059e0:	1d3b      	adds	r3, r7, #4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059f8:	4413      	add	r3, r2
 80059fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059fe:	463b      	mov	r3, r7
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	011a      	lsls	r2, r3, #4
 8005a06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d116      	bne.n	8005a4a <USB_EPStartXfer+0xb82>
 8005a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a2e:	801a      	strh	r2, [r3, #0]
 8005a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a46:	801a      	strh	r2, [r3, #0]
 8005a48:	e05f      	b.n	8005b0a <USB_EPStartXfer+0xc42>
 8005a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a50:	d818      	bhi.n	8005a84 <USB_EPStartXfer+0xbbc>
 8005a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a56:	085b      	lsrs	r3, r3, #1
 8005a58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d004      	beq.n	8005a72 <USB_EPStartXfer+0xbaa>
 8005a68:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005a72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	029b      	lsls	r3, r3, #10
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	e042      	b.n	8005b0a <USB_EPStartXfer+0xc42>
 8005a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <USB_EPStartXfer+0xbdc>
 8005a9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005aa4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	029b      	lsls	r3, r3, #10
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005abc:	801a      	strh	r2, [r3, #0]
 8005abe:	e024      	b.n	8005b0a <USB_EPStartXfer+0xc42>
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	785b      	ldrb	r3, [r3, #1]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d11f      	bne.n	8005b0a <USB_EPStartXfer+0xc42>
 8005aca:	1d3b      	adds	r3, r7, #4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ad2:	1d3b      	adds	r3, r7, #4
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ae8:	463b      	mov	r3, r7
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	011a      	lsls	r2, r3, #4
 8005af0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005af4:	4413      	add	r3, r2
 8005af6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b0a:	463b      	mov	r3, r7
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	891b      	ldrh	r3, [r3, #8]
 8005b10:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b14:	463b      	mov	r3, r7
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6959      	ldr	r1, [r3, #20]
 8005b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b24:	1d38      	adds	r0, r7, #4
 8005b26:	6800      	ldr	r0, [r0, #0]
 8005b28:	f000 fe03 	bl	8006732 <USB_WritePMA>
          ep->xfer_buff += len;
 8005b2c:	463b      	mov	r3, r7
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b36:	441a      	add	r2, r3
 8005b38:	463b      	mov	r3, r7
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005b3e:	463b      	mov	r3, r7
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6a1a      	ldr	r2, [r3, #32]
 8005b44:	463b      	mov	r3, r7
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d909      	bls.n	8005b62 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005b4e:	463b      	mov	r3, r7
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6a1a      	ldr	r2, [r3, #32]
 8005b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b58:	1ad2      	subs	r2, r2, r3
 8005b5a:	463b      	mov	r3, r7
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	621a      	str	r2, [r3, #32]
 8005b60:	e008      	b.n	8005b74 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005b62:	463b      	mov	r3, r7
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005b6c:	463b      	mov	r3, r7
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2200      	movs	r2, #0
 8005b72:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80ab 	beq.w	8005cd4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b7e:	1d3b      	adds	r3, r7, #4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b86:	463b      	mov	r3, r7
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d16f      	bne.n	8005c70 <USB_EPStartXfer+0xda8>
 8005b90:	1d3b      	adds	r3, r7, #4
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b98:	1d3b      	adds	r3, r7, #4
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ba8:	4413      	add	r3, r2
 8005baa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bae:	463b      	mov	r3, r7
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	011a      	lsls	r2, r3, #4
 8005bb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bba:	4413      	add	r3, r2
 8005bbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d116      	bne.n	8005bfa <USB_EPStartXfer+0xd32>
 8005bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bf6:	801a      	strh	r2, [r3, #0]
 8005bf8:	e05b      	b.n	8005cb2 <USB_EPStartXfer+0xdea>
 8005bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfe:	2b3e      	cmp	r3, #62	; 0x3e
 8005c00:	d818      	bhi.n	8005c34 <USB_EPStartXfer+0xd6c>
 8005c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c06:	085b      	lsrs	r3, r3, #1
 8005c08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <USB_EPStartXfer+0xd5a>
 8005c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	029b      	lsls	r3, r3, #10
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	e03e      	b.n	8005cb2 <USB_EPStartXfer+0xdea>
 8005c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d104      	bne.n	8005c54 <USB_EPStartXfer+0xd8c>
 8005c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	029b      	lsls	r3, r3, #10
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c6c:	801a      	strh	r2, [r3, #0]
 8005c6e:	e020      	b.n	8005cb2 <USB_EPStartXfer+0xdea>
 8005c70:	463b      	mov	r3, r7
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d11b      	bne.n	8005cb2 <USB_EPStartXfer+0xdea>
 8005c7a:	1d3b      	adds	r3, r7, #4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c90:	463b      	mov	r3, r7
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	011a      	lsls	r2, r3, #4
 8005c98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	895b      	ldrh	r3, [r3, #10]
 8005cb8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cbc:	463b      	mov	r3, r7
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6959      	ldr	r1, [r3, #20]
 8005cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ccc:	1d38      	adds	r0, r7, #4
 8005cce:	6800      	ldr	r0, [r0, #0]
 8005cd0:	f000 fd2f 	bl	8006732 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005cd4:	1d3b      	adds	r3, r7, #4
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	463b      	mov	r3, r7
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f107 020a 	add.w	r2, r7, #10
 8005cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf2:	8013      	strh	r3, [r2, #0]
 8005cf4:	f107 030a 	add.w	r3, r7, #10
 8005cf8:	f107 020a 	add.w	r2, r7, #10
 8005cfc:	8812      	ldrh	r2, [r2, #0]
 8005cfe:	f082 0210 	eor.w	r2, r2, #16
 8005d02:	801a      	strh	r2, [r3, #0]
 8005d04:	f107 030a 	add.w	r3, r7, #10
 8005d08:	f107 020a 	add.w	r2, r7, #10
 8005d0c:	8812      	ldrh	r2, [r2, #0]
 8005d0e:	f082 0220 	eor.w	r2, r2, #32
 8005d12:	801a      	strh	r2, [r3, #0]
 8005d14:	1d3b      	adds	r3, r7, #4
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	463b      	mov	r3, r7
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	441a      	add	r2, r3
 8005d22:	f107 030a 	add.w	r3, r7, #10
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	8013      	strh	r3, [r2, #0]
 8005d3c:	e3b5      	b.n	80064aa <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005d3e:	463b      	mov	r3, r7
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	7b1b      	ldrb	r3, [r3, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f040 8090 	bne.w	8005e6a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699a      	ldr	r2, [r3, #24]
 8005d50:	463b      	mov	r3, r7
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d90e      	bls.n	8005d78 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005d64:	463b      	mov	r3, r7
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699a      	ldr	r2, [r3, #24]
 8005d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d6e:	1ad2      	subs	r2, r2, r3
 8005d70:	463b      	mov	r3, r7
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	619a      	str	r2, [r3, #24]
 8005d76:	e008      	b.n	8005d8a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005d78:	463b      	mov	r3, r7
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005d82:	463b      	mov	r3, r7
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2200      	movs	r2, #0
 8005d88:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005d8a:	1d3b      	adds	r3, r7, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d92:	1d3b      	adds	r3, r7, #4
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005da2:	4413      	add	r3, r2
 8005da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005da8:	463b      	mov	r3, r7
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	011a      	lsls	r2, r3, #4
 8005db0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005db4:	4413      	add	r3, r2
 8005db6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d116      	bne.n	8005df4 <USB_EPStartXfer+0xf2c>
 8005dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	e32c      	b.n	800644e <USB_EPStartXfer+0x1586>
 8005df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df8:	2b3e      	cmp	r3, #62	; 0x3e
 8005dfa:	d818      	bhi.n	8005e2e <USB_EPStartXfer+0xf66>
 8005dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e00:	085b      	lsrs	r3, r3, #1
 8005e02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d004      	beq.n	8005e1c <USB_EPStartXfer+0xf54>
 8005e12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e16:	3301      	adds	r3, #1
 8005e18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	029b      	lsls	r3, r3, #10
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e2a:	801a      	strh	r2, [r3, #0]
 8005e2c:	e30f      	b.n	800644e <USB_EPStartXfer+0x1586>
 8005e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3c:	f003 031f 	and.w	r3, r3, #31
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d104      	bne.n	8005e4e <USB_EPStartXfer+0xf86>
 8005e44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	029b      	lsls	r3, r3, #10
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e66:	801a      	strh	r2, [r3, #0]
 8005e68:	e2f1      	b.n	800644e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	78db      	ldrb	r3, [r3, #3]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	f040 818f 	bne.w	8006194 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005e76:	463b      	mov	r3, r7
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d175      	bne.n	8005f6c <USB_EPStartXfer+0x10a4>
 8005e80:	1d3b      	adds	r3, r7, #4
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e88:	1d3b      	adds	r3, r7, #4
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	461a      	mov	r2, r3
 8005e94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e98:	4413      	add	r3, r2
 8005e9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e9e:	463b      	mov	r3, r7
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	011a      	lsls	r2, r3, #4
 8005ea6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005eaa:	4413      	add	r3, r2
 8005eac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eb4:	463b      	mov	r3, r7
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d116      	bne.n	8005eec <USB_EPStartXfer+0x1024>
 8005ebe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ed0:	801a      	strh	r2, [r3, #0]
 8005ed2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ee8:	801a      	strh	r2, [r3, #0]
 8005eea:	e065      	b.n	8005fb8 <USB_EPStartXfer+0x10f0>
 8005eec:	463b      	mov	r3, r7
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ef4:	d81a      	bhi.n	8005f2c <USB_EPStartXfer+0x1064>
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	085b      	lsrs	r3, r3, #1
 8005efe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f02:	463b      	mov	r3, r7
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d004      	beq.n	8005f1a <USB_EPStartXfer+0x1052>
 8005f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f14:	3301      	adds	r3, #1
 8005f16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	029b      	lsls	r3, r3, #10
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f28:	801a      	strh	r2, [r3, #0]
 8005f2a:	e045      	b.n	8005fb8 <USB_EPStartXfer+0x10f0>
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f38:	463b      	mov	r3, r7
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d104      	bne.n	8005f50 <USB_EPStartXfer+0x1088>
 8005f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	029b      	lsls	r3, r3, #10
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f68:	801a      	strh	r2, [r3, #0]
 8005f6a:	e025      	b.n	8005fb8 <USB_EPStartXfer+0x10f0>
 8005f6c:	463b      	mov	r3, r7
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	785b      	ldrb	r3, [r3, #1]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d120      	bne.n	8005fb8 <USB_EPStartXfer+0x10f0>
 8005f76:	1d3b      	adds	r3, r7, #4
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f8e:	4413      	add	r3, r2
 8005f90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f94:	463b      	mov	r3, r7
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	011a      	lsls	r2, r3, #4
 8005f9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fa6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005faa:	463b      	mov	r3, r7
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005fb6:	801a      	strh	r2, [r3, #0]
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	785b      	ldrb	r3, [r3, #1]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d175      	bne.n	80060b6 <USB_EPStartXfer+0x11ee>
 8005fca:	1d3b      	adds	r3, r7, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fe8:	463b      	mov	r3, r7
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	011a      	lsls	r2, r3, #4
 8005ff0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ffa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ffe:	463b      	mov	r3, r7
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d116      	bne.n	8006036 <USB_EPStartXfer+0x116e>
 8006008:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006014:	b29a      	uxth	r2, r3
 8006016:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800601a:	801a      	strh	r2, [r3, #0]
 800601c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	b29b      	uxth	r3, r3
 8006024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800602c:	b29a      	uxth	r2, r3
 800602e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006032:	801a      	strh	r2, [r3, #0]
 8006034:	e061      	b.n	80060fa <USB_EPStartXfer+0x1232>
 8006036:	463b      	mov	r3, r7
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b3e      	cmp	r3, #62	; 0x3e
 800603e:	d81a      	bhi.n	8006076 <USB_EPStartXfer+0x11ae>
 8006040:	463b      	mov	r3, r7
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800604c:	463b      	mov	r3, r7
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d004      	beq.n	8006064 <USB_EPStartXfer+0x119c>
 800605a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800605e:	3301      	adds	r3, #1
 8006060:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006064:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006068:	b29b      	uxth	r3, r3
 800606a:	029b      	lsls	r3, r3, #10
 800606c:	b29a      	uxth	r2, r3
 800606e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006072:	801a      	strh	r2, [r3, #0]
 8006074:	e041      	b.n	80060fa <USB_EPStartXfer+0x1232>
 8006076:	463b      	mov	r3, r7
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006082:	463b      	mov	r3, r7
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 031f 	and.w	r3, r3, #31
 800608c:	2b00      	cmp	r3, #0
 800608e:	d104      	bne.n	800609a <USB_EPStartXfer+0x11d2>
 8006090:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006094:	3b01      	subs	r3, #1
 8006096:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800609a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800609e:	b29b      	uxth	r3, r3
 80060a0:	029b      	lsls	r3, r3, #10
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060b2:	801a      	strh	r2, [r3, #0]
 80060b4:	e021      	b.n	80060fa <USB_EPStartXfer+0x1232>
 80060b6:	463b      	mov	r3, r7
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	785b      	ldrb	r3, [r3, #1]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d11c      	bne.n	80060fa <USB_EPStartXfer+0x1232>
 80060c0:	1d3b      	adds	r3, r7, #4
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060d0:	4413      	add	r3, r2
 80060d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060d6:	463b      	mov	r3, r7
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	011a      	lsls	r2, r3, #4
 80060de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060e2:	4413      	add	r3, r2
 80060e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060ec:	463b      	mov	r3, r7
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060f8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80060fa:	463b      	mov	r3, r7
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 81a4 	beq.w	800644e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006106:	1d3b      	adds	r3, r7, #4
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	463b      	mov	r3, r7
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800611a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800611e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d005      	beq.n	8006132 <USB_EPStartXfer+0x126a>
 8006126:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800612a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10d      	bne.n	800614e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006132:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800613a:	2b00      	cmp	r3, #0
 800613c:	f040 8187 	bne.w	800644e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006140:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006148:	2b00      	cmp	r3, #0
 800614a:	f040 8180 	bne.w	800644e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800614e:	1d3b      	adds	r3, r7, #4
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	463b      	mov	r3, r7
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	b29b      	uxth	r3, r3
 8006160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006168:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800616c:	1d3b      	adds	r3, r7, #4
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	463b      	mov	r3, r7
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	441a      	add	r2, r3
 800617a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800617e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800618e:	b29b      	uxth	r3, r3
 8006190:	8013      	strh	r3, [r2, #0]
 8006192:	e15c      	b.n	800644e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006194:	463b      	mov	r3, r7
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	78db      	ldrb	r3, [r3, #3]
 800619a:	2b01      	cmp	r3, #1
 800619c:	f040 8155 	bne.w	800644a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80061a0:	463b      	mov	r3, r7
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	463b      	mov	r3, r7
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d90e      	bls.n	80061ce <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80061b0:	463b      	mov	r3, r7
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80061ba:	463b      	mov	r3, r7
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699a      	ldr	r2, [r3, #24]
 80061c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c4:	1ad2      	subs	r2, r2, r3
 80061c6:	463b      	mov	r3, r7
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	619a      	str	r2, [r3, #24]
 80061cc:	e008      	b.n	80061e0 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80061ce:	463b      	mov	r3, r7
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80061d8:	463b      	mov	r3, r7
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2200      	movs	r2, #0
 80061de:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80061e0:	463b      	mov	r3, r7
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d16f      	bne.n	80062ca <USB_EPStartXfer+0x1402>
 80061ea:	1d3b      	adds	r3, r7, #4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061f2:	1d3b      	adds	r3, r7, #4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006202:	4413      	add	r3, r2
 8006204:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006208:	463b      	mov	r3, r7
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	011a      	lsls	r2, r3, #4
 8006210:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006214:	4413      	add	r3, r2
 8006216:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800621a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800621e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006222:	2b00      	cmp	r3, #0
 8006224:	d116      	bne.n	8006254 <USB_EPStartXfer+0x138c>
 8006226:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006232:	b29a      	uxth	r2, r3
 8006234:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006238:	801a      	strh	r2, [r3, #0]
 800623a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29b      	uxth	r3, r3
 8006242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624a:	b29a      	uxth	r2, r3
 800624c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	e05f      	b.n	8006314 <USB_EPStartXfer+0x144c>
 8006254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006258:	2b3e      	cmp	r3, #62	; 0x3e
 800625a:	d818      	bhi.n	800628e <USB_EPStartXfer+0x13c6>
 800625c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006260:	085b      	lsrs	r3, r3, #1
 8006262:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <USB_EPStartXfer+0x13b4>
 8006272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006276:	3301      	adds	r3, #1
 8006278:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800627c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006280:	b29b      	uxth	r3, r3
 8006282:	029b      	lsls	r3, r3, #10
 8006284:	b29a      	uxth	r2, r3
 8006286:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800628a:	801a      	strh	r2, [r3, #0]
 800628c:	e042      	b.n	8006314 <USB_EPStartXfer+0x144c>
 800628e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d104      	bne.n	80062ae <USB_EPStartXfer+0x13e6>
 80062a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a8:	3b01      	subs	r3, #1
 80062aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	029b      	lsls	r3, r3, #10
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	e024      	b.n	8006314 <USB_EPStartXfer+0x144c>
 80062ca:	463b      	mov	r3, r7
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d11f      	bne.n	8006314 <USB_EPStartXfer+0x144c>
 80062d4:	1d3b      	adds	r3, r7, #4
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062dc:	1d3b      	adds	r3, r7, #4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	461a      	mov	r2, r3
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	4413      	add	r3, r2
 80062ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062f2:	463b      	mov	r3, r7
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	011a      	lsls	r2, r3, #4
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fe:	4413      	add	r3, r2
 8006300:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006304:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800630c:	b29a      	uxth	r2, r3
 800630e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	1d3b      	adds	r3, r7, #4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800631c:	463b      	mov	r3, r7
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d16f      	bne.n	8006406 <USB_EPStartXfer+0x153e>
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800632e:	1d3b      	adds	r3, r7, #4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006336:	b29b      	uxth	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800633e:	4413      	add	r3, r2
 8006340:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006344:	463b      	mov	r3, r7
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	011a      	lsls	r2, r3, #4
 800634c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006350:	4413      	add	r3, r2
 8006352:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800635a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d116      	bne.n	8006390 <USB_EPStartXfer+0x14c8>
 8006362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800636e:	b29a      	uxth	r2, r3
 8006370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006386:	b29a      	uxth	r2, r3
 8006388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800638c:	801a      	strh	r2, [r3, #0]
 800638e:	e05e      	b.n	800644e <USB_EPStartXfer+0x1586>
 8006390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006394:	2b3e      	cmp	r3, #62	; 0x3e
 8006396:	d818      	bhi.n	80063ca <USB_EPStartXfer+0x1502>
 8006398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800639c:	085b      	lsrs	r3, r3, #1
 800639e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <USB_EPStartXfer+0x14f0>
 80063ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063b2:	3301      	adds	r3, #1
 80063b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063bc:	b29b      	uxth	r3, r3
 80063be:	029b      	lsls	r3, r3, #10
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063c6:	801a      	strh	r2, [r3, #0]
 80063c8:	e041      	b.n	800644e <USB_EPStartXfer+0x1586>
 80063ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d8:	f003 031f 	and.w	r3, r3, #31
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d104      	bne.n	80063ea <USB_EPStartXfer+0x1522>
 80063e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063e4:	3b01      	subs	r3, #1
 80063e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	029b      	lsls	r3, r3, #10
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	e023      	b.n	800644e <USB_EPStartXfer+0x1586>
 8006406:	463b      	mov	r3, r7
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	785b      	ldrb	r3, [r3, #1]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d11e      	bne.n	800644e <USB_EPStartXfer+0x1586>
 8006410:	1d3b      	adds	r3, r7, #4
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006418:	b29b      	uxth	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006420:	4413      	add	r3, r2
 8006422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006426:	463b      	mov	r3, r7
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	011a      	lsls	r2, r3, #4
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006432:	4413      	add	r3, r2
 8006434:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800643c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006440:	b29a      	uxth	r2, r3
 8006442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006446:	801a      	strh	r2, [r3, #0]
 8006448:	e001      	b.n	800644e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e02e      	b.n	80064ac <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800644e:	1d3b      	adds	r3, r7, #4
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	463b      	mov	r3, r7
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006468:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800646c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006470:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006474:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006478:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800647c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006480:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006484:	1d3b      	adds	r3, r7, #4
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	463b      	mov	r3, r7
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	441a      	add	r2, r3
 8006492:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800649a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800649e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d020      	beq.n	800650a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064de:	81bb      	strh	r3, [r7, #12]
 80064e0:	89bb      	ldrh	r3, [r7, #12]
 80064e2:	f083 0310 	eor.w	r3, r3, #16
 80064e6:	81bb      	strh	r3, [r7, #12]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	441a      	add	r2, r3
 80064f2:	89bb      	ldrh	r3, [r7, #12]
 80064f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006504:	b29b      	uxth	r3, r3
 8006506:	8013      	strh	r3, [r2, #0]
 8006508:	e01f      	b.n	800654a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	b29b      	uxth	r3, r3
 8006518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800651c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006520:	81fb      	strh	r3, [r7, #14]
 8006522:	89fb      	ldrh	r3, [r7, #14]
 8006524:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006528:	81fb      	strh	r3, [r7, #14]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	441a      	add	r2, r3
 8006534:	89fb      	ldrh	r3, [r7, #14]
 8006536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800653a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800653e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006546:	b29b      	uxth	r3, r3
 8006548:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	bc80      	pop	{r7}
 8006554:	4770      	bx	lr

08006556 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006556:	b480      	push	{r7}
 8006558:	b087      	sub	sp, #28
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	7b1b      	ldrb	r3, [r3, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f040 809d 	bne.w	80066a4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	785b      	ldrb	r3, [r3, #1]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d04c      	beq.n	800660c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	823b      	strh	r3, [r7, #16]
 8006580:	8a3b      	ldrh	r3, [r7, #16]
 8006582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006586:	2b00      	cmp	r3, #0
 8006588:	d01b      	beq.n	80065c2 <USB_EPClearStall+0x6c>
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800659c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a0:	81fb      	strh	r3, [r7, #14]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	441a      	add	r2, r3
 80065ac:	89fb      	ldrh	r3, [r7, #14]
 80065ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065be:	b29b      	uxth	r3, r3
 80065c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	78db      	ldrb	r3, [r3, #3]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d06c      	beq.n	80066a4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e0:	81bb      	strh	r3, [r7, #12]
 80065e2:	89bb      	ldrh	r3, [r7, #12]
 80065e4:	f083 0320 	eor.w	r3, r3, #32
 80065e8:	81bb      	strh	r3, [r7, #12]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	441a      	add	r2, r3
 80065f4:	89bb      	ldrh	r3, [r7, #12]
 80065f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006606:	b29b      	uxth	r3, r3
 8006608:	8013      	strh	r3, [r2, #0]
 800660a:	e04b      	b.n	80066a4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	82fb      	strh	r3, [r7, #22]
 800661a:	8afb      	ldrh	r3, [r7, #22]
 800661c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01b      	beq.n	800665c <USB_EPClearStall+0x106>
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663a:	82bb      	strh	r3, [r7, #20]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	441a      	add	r2, r3
 8006646:	8abb      	ldrh	r3, [r7, #20]
 8006648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800664c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006658:	b29b      	uxth	r3, r3
 800665a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	b29b      	uxth	r3, r3
 800666a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800666e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006672:	827b      	strh	r3, [r7, #18]
 8006674:	8a7b      	ldrh	r3, [r7, #18]
 8006676:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800667a:	827b      	strh	r3, [r7, #18]
 800667c:	8a7b      	ldrh	r3, [r7, #18]
 800667e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006682:	827b      	strh	r3, [r7, #18]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	441a      	add	r2, r3
 800668e:	8a7b      	ldrh	r3, [r7, #18]
 8006690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800669c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bc80      	pop	{r7}
 80066ae:	4770      	bx	lr

080066b0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2280      	movs	r2, #128	; 0x80
 80066c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr

080066d6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc80      	pop	{r7}
 80066e8:	4770      	bx	lr

080066ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr

080066fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800670c:	b29b      	uxth	r3, r3
 800670e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006710:	68fb      	ldr	r3, [r7, #12]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr

08006732 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006732:	b480      	push	{r7}
 8006734:	b08d      	sub	sp, #52	; 0x34
 8006736:	af00      	add	r7, sp, #0
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	4611      	mov	r1, r2
 800673e:	461a      	mov	r2, r3
 8006740:	460b      	mov	r3, r1
 8006742:	80fb      	strh	r3, [r7, #6]
 8006744:	4613      	mov	r3, r2
 8006746:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006748:	88bb      	ldrh	r3, [r7, #4]
 800674a:	3301      	adds	r3, #1
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006758:	88fb      	ldrh	r3, [r7, #6]
 800675a:	005a      	lsls	r2, r3, #1
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800676a:	e01e      	b.n	80067aa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	3301      	adds	r3, #1
 8006776:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	021b      	lsls	r3, r3, #8
 8006780:	b29b      	uxth	r3, r3
 8006782:	461a      	mov	r2, r3
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	b29a      	uxth	r2, r3
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	3302      	adds	r3, #2
 8006796:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	3302      	adds	r3, #2
 800679c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	3301      	adds	r3, #1
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	3b01      	subs	r3, #1
 80067a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1dd      	bne.n	800676c <USB_WritePMA+0x3a>
  }
}
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
 80067b4:	3734      	adds	r7, #52	; 0x34
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr

080067bc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067bc:	b480      	push	{r7}
 80067be:	b08b      	sub	sp, #44	; 0x2c
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	4611      	mov	r1, r2
 80067c8:	461a      	mov	r2, r3
 80067ca:	460b      	mov	r3, r1
 80067cc:	80fb      	strh	r3, [r7, #6]
 80067ce:	4613      	mov	r3, r2
 80067d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80067d2:	88bb      	ldrh	r3, [r7, #4]
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	005a      	lsls	r2, r3, #1
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ee:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
 80067f4:	e01b      	b.n	800682e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	3302      	adds	r3, #2
 8006802:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	b2da      	uxtb	r2, r3
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	3301      	adds	r3, #1
 8006810:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	0a1b      	lsrs	r3, r3, #8
 8006816:	b2da      	uxtb	r2, r3
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	3301      	adds	r3, #1
 8006820:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	3302      	adds	r3, #2
 8006826:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	3b01      	subs	r3, #1
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e0      	bne.n	80067f6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006834:	88bb      	ldrh	r3, [r7, #4]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	b29b      	uxth	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29b      	uxth	r3, r3
 8006846:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	b2da      	uxtb	r2, r3
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	701a      	strb	r2, [r3, #0]
  }
}
 8006850:	bf00      	nop
 8006852:	372c      	adds	r7, #44	; 0x2c
 8006854:	46bd      	mov	sp, r7
 8006856:	bc80      	pop	{r7}
 8006858:	4770      	bx	lr

0800685a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	460b      	mov	r3, r1
 8006864:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	7c1b      	ldrb	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d115      	bne.n	800689e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006876:	2202      	movs	r2, #2
 8006878:	2181      	movs	r1, #129	; 0x81
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 fe87 	bl	800858e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800688a:	2202      	movs	r2, #2
 800688c:	2101      	movs	r1, #1
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 fe7d 	bl	800858e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800689c:	e012      	b.n	80068c4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800689e:	2340      	movs	r3, #64	; 0x40
 80068a0:	2202      	movs	r2, #2
 80068a2:	2181      	movs	r1, #129	; 0x81
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 fe72 	bl	800858e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068b0:	2340      	movs	r3, #64	; 0x40
 80068b2:	2202      	movs	r2, #2
 80068b4:	2101      	movs	r1, #1
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fe69 	bl	800858e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068c4:	2308      	movs	r3, #8
 80068c6:	2203      	movs	r2, #3
 80068c8:	2182      	movs	r1, #130	; 0x82
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fe5f 	bl	800858e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068d6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80068da:	f001 ff7f 	bl	80087dc <USBD_static_malloc>
 80068de:	4602      	mov	r2, r0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d102      	bne.n	80068f6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80068f0:	2301      	movs	r3, #1
 80068f2:	73fb      	strb	r3, [r7, #15]
 80068f4:	e026      	b.n	8006944 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	7c1b      	ldrb	r3, [r3, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d109      	bne.n	8006934 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800692a:	2101      	movs	r1, #1
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 ff1f 	bl	8008770 <USBD_LL_PrepareReceive>
 8006932:	e007      	b.n	8006944 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800693a:	2340      	movs	r3, #64	; 0x40
 800693c:	2101      	movs	r1, #1
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 ff16 	bl	8008770 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	460b      	mov	r3, r1
 8006958:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800695e:	2181      	movs	r1, #129	; 0x81
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f001 fe3a 	bl	80085da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800696c:	2101      	movs	r1, #1
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 fe33 	bl	80085da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800697c:	2182      	movs	r1, #130	; 0x82
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 fe2b 	bl	80085da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00e      	beq.n	80069b2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a4:	4618      	mov	r0, r3
 80069a6:	f001 ff25 	bl	80087f4 <USBD_static_free>
    pdev->pClassData = NULL;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069cc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d039      	beq.n	8006a5a <USBD_CDC_Setup+0x9e>
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	d17f      	bne.n	8006aea <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	88db      	ldrh	r3, [r3, #6]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d029      	beq.n	8006a46 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b25b      	sxtb	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	da11      	bge.n	8006a20 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006a08:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	88d2      	ldrh	r2, [r2, #6]
 8006a0e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a10:	6939      	ldr	r1, [r7, #16]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	88db      	ldrh	r3, [r3, #6]
 8006a16:	461a      	mov	r2, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 fa0a 	bl	8007e32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006a1e:	e06b      	b.n	8006af8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	785a      	ldrb	r2, [r3, #1]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	88db      	ldrh	r3, [r3, #6]
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a36:	6939      	ldr	r1, [r7, #16]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	88db      	ldrh	r3, [r3, #6]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fa25 	bl	8007e8e <USBD_CtlPrepareRx>
      break;
 8006a44:	e058      	b.n	8006af8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	7850      	ldrb	r0, [r2, #1]
 8006a52:	2200      	movs	r2, #0
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	4798      	blx	r3
      break;
 8006a58:	e04e      	b.n	8006af8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	2b0b      	cmp	r3, #11
 8006a60:	d02e      	beq.n	8006ac0 <USBD_CDC_Setup+0x104>
 8006a62:	2b0b      	cmp	r3, #11
 8006a64:	dc38      	bgt.n	8006ad8 <USBD_CDC_Setup+0x11c>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <USBD_CDC_Setup+0xb4>
 8006a6a:	2b0a      	cmp	r3, #10
 8006a6c:	d014      	beq.n	8006a98 <USBD_CDC_Setup+0xdc>
 8006a6e:	e033      	b.n	8006ad8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d107      	bne.n	8006a8a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a7a:	f107 030c 	add.w	r3, r7, #12
 8006a7e:	2202      	movs	r2, #2
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f001 f9d5 	bl	8007e32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a88:	e02e      	b.n	8006ae8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 f966 	bl	8007d5e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a92:	2302      	movs	r3, #2
 8006a94:	75fb      	strb	r3, [r7, #23]
          break;
 8006a96:	e027      	b.n	8006ae8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d107      	bne.n	8006ab2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006aa2:	f107 030f 	add.w	r3, r7, #15
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 f9c1 	bl	8007e32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ab0:	e01a      	b.n	8006ae8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 f952 	bl	8007d5e <USBD_CtlError>
            ret = USBD_FAIL;
 8006aba:	2302      	movs	r3, #2
 8006abc:	75fb      	strb	r3, [r7, #23]
          break;
 8006abe:	e013      	b.n	8006ae8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d00d      	beq.n	8006ae6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 f946 	bl	8007d5e <USBD_CtlError>
            ret = USBD_FAIL;
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ad6:	e006      	b.n	8006ae6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 f93f 	bl	8007d5e <USBD_CtlError>
          ret = USBD_FAIL;
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ae4:	e000      	b.n	8006ae8 <USBD_CDC_Setup+0x12c>
          break;
 8006ae6:	bf00      	nop
      }
      break;
 8006ae8:	e006      	b.n	8006af8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 f936 	bl	8007d5e <USBD_CtlError>
      ret = USBD_FAIL;
 8006af2:	2302      	movs	r3, #2
 8006af4:	75fb      	strb	r3, [r7, #23]
      break;
 8006af6:	bf00      	nop
  }

  return ret;
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b14:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b1c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d03a      	beq.n	8006b9e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b28:	78fa      	ldrb	r2, [r7, #3]
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	440b      	add	r3, r1
 8006b36:	331c      	adds	r3, #28
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d029      	beq.n	8006b92 <USBD_CDC_DataIn+0x90>
 8006b3e:	78fa      	ldrb	r2, [r7, #3]
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	331c      	adds	r3, #28
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	78f9      	ldrb	r1, [r7, #3]
 8006b52:	68b8      	ldr	r0, [r7, #8]
 8006b54:	460b      	mov	r3, r1
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	4403      	add	r3, r0
 8006b5e:	3338      	adds	r3, #56	; 0x38
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b66:	fb03 f301 	mul.w	r3, r3, r1
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d110      	bne.n	8006b92 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006b70:	78fa      	ldrb	r2, [r7, #3]
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	331c      	adds	r3, #28
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b84:	78f9      	ldrb	r1, [r7, #3]
 8006b86:	2300      	movs	r3, #0
 8006b88:	2200      	movs	r2, #0
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 fdcd 	bl	800872a <USBD_LL_Transmit>
 8006b90:	e003      	b.n	8006b9a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	e000      	b.n	8006ba0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006b9e:	2302      	movs	r3, #2
  }
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 fdf8 	bl	80087b6 <USBD_LL_GetRxDataSize>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00d      	beq.n	8006bf4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bec:	4611      	mov	r1, r2
 8006bee:	4798      	blx	r3

    return USBD_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	e000      	b.n	8006bf6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006bf4:	2302      	movs	r3, #2
  }
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d015      	beq.n	8006c44 <USBD_CDC_EP0_RxReady+0x46>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c1e:	2bff      	cmp	r3, #255	; 0xff
 8006c20:	d010      	beq.n	8006c44 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006c30:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c38:	b292      	uxth	r2, r2
 8006c3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	22ff      	movs	r2, #255	; 0xff
 8006c40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2243      	movs	r2, #67	; 0x43
 8006c5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006c5e:	4b03      	ldr	r3, [pc, #12]	; (8006c6c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	20000094 	.word	0x20000094

08006c70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2243      	movs	r2, #67	; 0x43
 8006c7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006c7e:	4b03      	ldr	r3, [pc, #12]	; (8006c8c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bc80      	pop	{r7}
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	20000050 	.word	0x20000050

08006c90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2243      	movs	r2, #67	; 0x43
 8006c9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c9e:	4b03      	ldr	r3, [pc, #12]	; (8006cac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc80      	pop	{r7}
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	200000d8 	.word	0x200000d8

08006cb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	220a      	movs	r2, #10
 8006cbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006cbe:	4b03      	ldr	r3, [pc, #12]	; (8006ccc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	2000000c 	.word	0x2000000c

08006cd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006cda:	2302      	movs	r3, #2
 8006cdc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr

08006cfc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d10:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d1a:	88fa      	ldrh	r2, [r7, #6]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	371c      	adds	r7, #28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bc80      	pop	{r7}
 8006d2c:	4770      	bx	lr

08006d2e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b085      	sub	sp, #20
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bc80      	pop	{r7}
 8006d52:	4770      	bx	lr

08006d54 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01c      	beq.n	8006da8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d115      	bne.n	8006da4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2181      	movs	r1, #129	; 0x81
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fcc5 	bl	800872a <USBD_LL_Transmit>

      return USBD_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e002      	b.n	8006daa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006da8:	2302      	movs	r3, #2
  }
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d017      	beq.n	8006dfc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	7c1b      	ldrb	r3, [r3, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d109      	bne.n	8006de8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dde:	2101      	movs	r1, #1
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 fcc5 	bl	8008770 <USBD_LL_PrepareReceive>
 8006de6:	e007      	b.n	8006df8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dee:	2340      	movs	r3, #64	; 0x40
 8006df0:	2101      	movs	r1, #1
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fcbc 	bl	8008770 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e000      	b.n	8006dfe <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006dfc:	2302      	movs	r3, #2
  }
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	4613      	mov	r3, r2
 8006e12:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e01a      	b.n	8006e54 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	79fa      	ldrb	r2, [r7, #7]
 8006e4a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f001 fb29 	bl	80084a4 <USBD_LL_Init>

  return USBD_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d006      	beq.n	8006e7e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	73fb      	strb	r3, [r7, #15]
 8006e7c:	e001      	b.n	8006e82 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bc80      	pop	{r7}
 8006e8c:	4770      	bx	lr

08006e8e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 fb5e 	bl	8008558 <USBD_LL_Start>

  return USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr

08006eba <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00c      	beq.n	8006eee <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	78fa      	ldrb	r2, [r7, #3]
 8006ede:	4611      	mov	r1, r2
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	4798      	blx	r3
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	460b      	mov	r3, r1
 8006f02:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	78fa      	ldrb	r2, [r7, #3]
 8006f0e:	4611      	mov	r1, r2
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	4798      	blx	r3

  return USBD_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b082      	sub	sp, #8
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fed8 	bl	8007ce6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f44:	461a      	mov	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d016      	beq.n	8006f88 <USBD_LL_SetupStage+0x6a>
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d81c      	bhi.n	8006f98 <USBD_LL_SetupStage+0x7a>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <USBD_LL_SetupStage+0x4a>
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d008      	beq.n	8006f78 <USBD_LL_SetupStage+0x5a>
 8006f66:	e017      	b.n	8006f98 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f9cb 	bl	800730c <USBD_StdDevReq>
      break;
 8006f76:	e01a      	b.n	8006fae <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fa2d 	bl	80073e0 <USBD_StdItfReq>
      break;
 8006f86:	e012      	b.n	8006fae <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fa6d 	bl	8007470 <USBD_StdEPReq>
      break;
 8006f96:	e00a      	b.n	8006fae <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f001 fb36 	bl	8008618 <USBD_LL_StallEP>
      break;
 8006fac:	bf00      	nop
  }

  return USBD_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006fc6:	7afb      	ldrb	r3, [r7, #11]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d14b      	bne.n	8007064 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006fd2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d134      	bne.n	8007048 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d919      	bls.n	800701e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	68da      	ldr	r2, [r3, #12]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	1ad2      	subs	r2, r2, r3
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007000:	429a      	cmp	r2, r3
 8007002:	d203      	bcs.n	800700c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007008:	b29b      	uxth	r3, r3
 800700a:	e002      	b.n	8007012 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007010:	b29b      	uxth	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 ff57 	bl	8007eca <USBD_CtlContinueRx>
 800701c:	e038      	b.n	8007090 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007030:	2b03      	cmp	r3, #3
 8007032:	d105      	bne.n	8007040 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 ff54 	bl	8007eee <USBD_CtlSendStatus>
 8007046:	e023      	b.n	8007090 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800704e:	2b05      	cmp	r3, #5
 8007050:	d11e      	bne.n	8007090 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800705a:	2100      	movs	r1, #0
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f001 fadb 	bl	8008618 <USBD_LL_StallEP>
 8007062:	e015      	b.n	8007090 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00d      	beq.n	800708c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007076:	2b03      	cmp	r3, #3
 8007078:	d108      	bne.n	800708c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	7afa      	ldrb	r2, [r7, #11]
 8007084:	4611      	mov	r1, r2
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	4798      	blx	r3
 800708a:	e001      	b.n	8007090 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800708c:	2302      	movs	r3, #2
 800708e:	e000      	b.n	8007092 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b086      	sub	sp, #24
 800709e:	af00      	add	r7, sp, #0
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	460b      	mov	r3, r1
 80070a4:	607a      	str	r2, [r7, #4]
 80070a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070a8:	7afb      	ldrb	r3, [r7, #11]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d17f      	bne.n	80071ae <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3314      	adds	r3, #20
 80070b2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d15c      	bne.n	8007178 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	68da      	ldr	r2, [r3, #12]
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d915      	bls.n	80070f6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	1ad2      	subs	r2, r2, r3
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	461a      	mov	r2, r3
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 fec1 	bl	8007e6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070e8:	2300      	movs	r3, #0
 80070ea:	2200      	movs	r2, #0
 80070ec:	2100      	movs	r1, #0
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f001 fb3e 	bl	8008770 <USBD_LL_PrepareReceive>
 80070f4:	e04e      	b.n	8007194 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	6912      	ldr	r2, [r2, #16]
 80070fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007102:	fb02 f201 	mul.w	r2, r2, r1
 8007106:	1a9b      	subs	r3, r3, r2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d11c      	bne.n	8007146 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007114:	429a      	cmp	r2, r3
 8007116:	d316      	bcc.n	8007146 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007122:	429a      	cmp	r2, r3
 8007124:	d20f      	bcs.n	8007146 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007126:	2200      	movs	r2, #0
 8007128:	2100      	movs	r1, #0
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 fe9d 	bl	8007e6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007138:	2300      	movs	r3, #0
 800713a:	2200      	movs	r2, #0
 800713c:	2100      	movs	r1, #0
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f001 fb16 	bl	8008770 <USBD_LL_PrepareReceive>
 8007144:	e026      	b.n	8007194 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007158:	2b03      	cmp	r3, #3
 800715a:	d105      	bne.n	8007168 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007168:	2180      	movs	r1, #128	; 0x80
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f001 fa54 	bl	8008618 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 fecf 	bl	8007f14 <USBD_CtlReceiveStatus>
 8007176:	e00d      	b.n	8007194 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800717e:	2b04      	cmp	r3, #4
 8007180:	d004      	beq.n	800718c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007188:	2b00      	cmp	r3, #0
 800718a:	d103      	bne.n	8007194 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800718c:	2180      	movs	r1, #128	; 0x80
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f001 fa42 	bl	8008618 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800719a:	2b01      	cmp	r3, #1
 800719c:	d11d      	bne.n	80071da <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7ff fe81 	bl	8006ea6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071ac:	e015      	b.n	80071da <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00d      	beq.n	80071d6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d108      	bne.n	80071d6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	7afa      	ldrb	r2, [r7, #11]
 80071ce:	4611      	mov	r1, r2
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	4798      	blx	r3
 80071d4:	e001      	b.n	80071da <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071d6:	2302      	movs	r3, #2
 80071d8:	e000      	b.n	80071dc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071ec:	2340      	movs	r3, #64	; 0x40
 80071ee:	2200      	movs	r2, #0
 80071f0:	2100      	movs	r1, #0
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 f9cb 	bl	800858e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2240      	movs	r2, #64	; 0x40
 8007204:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007208:	2340      	movs	r3, #64	; 0x40
 800720a:	2200      	movs	r2, #0
 800720c:	2180      	movs	r1, #128	; 0x80
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 f9bd 	bl	800858e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2240      	movs	r2, #64	; 0x40
 800721e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007244:	2b00      	cmp	r3, #0
 8007246:	d009      	beq.n	800725c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	6852      	ldr	r2, [r2, #4]
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	4611      	mov	r1, r2
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	4798      	blx	r3
  }

  return USBD_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	460b      	mov	r3, r1
 8007270:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	78fa      	ldrb	r2, [r7, #3]
 8007276:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr

08007284 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2204      	movs	r2, #4
 800729c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr

080072ac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d105      	bne.n	80072ca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr

080072d6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d10b      	bne.n	8007300 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007322:	2b40      	cmp	r3, #64	; 0x40
 8007324:	d005      	beq.n	8007332 <USBD_StdDevReq+0x26>
 8007326:	2b40      	cmp	r3, #64	; 0x40
 8007328:	d84f      	bhi.n	80073ca <USBD_StdDevReq+0xbe>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d009      	beq.n	8007342 <USBD_StdDevReq+0x36>
 800732e:	2b20      	cmp	r3, #32
 8007330:	d14b      	bne.n	80073ca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4798      	blx	r3
      break;
 8007340:	e048      	b.n	80073d4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	2b09      	cmp	r3, #9
 8007348:	d839      	bhi.n	80073be <USBD_StdDevReq+0xb2>
 800734a:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <USBD_StdDevReq+0x44>)
 800734c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007350:	080073a1 	.word	0x080073a1
 8007354:	080073b5 	.word	0x080073b5
 8007358:	080073bf 	.word	0x080073bf
 800735c:	080073ab 	.word	0x080073ab
 8007360:	080073bf 	.word	0x080073bf
 8007364:	08007383 	.word	0x08007383
 8007368:	08007379 	.word	0x08007379
 800736c:	080073bf 	.word	0x080073bf
 8007370:	08007397 	.word	0x08007397
 8007374:	0800738d 	.word	0x0800738d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f9dc 	bl	8007738 <USBD_GetDescriptor>
          break;
 8007380:	e022      	b.n	80073c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fb3f 	bl	8007a08 <USBD_SetAddress>
          break;
 800738a:	e01d      	b.n	80073c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fb7e 	bl	8007a90 <USBD_SetConfig>
          break;
 8007394:	e018      	b.n	80073c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fc07 	bl	8007bac <USBD_GetConfig>
          break;
 800739e:	e013      	b.n	80073c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fc37 	bl	8007c16 <USBD_GetStatus>
          break;
 80073a8:	e00e      	b.n	80073c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fc65 	bl	8007c7c <USBD_SetFeature>
          break;
 80073b2:	e009      	b.n	80073c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fc74 	bl	8007ca4 <USBD_ClrFeature>
          break;
 80073bc:	e004      	b.n	80073c8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fccc 	bl	8007d5e <USBD_CtlError>
          break;
 80073c6:	bf00      	nop
      }
      break;
 80073c8:	e004      	b.n	80073d4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fcc6 	bl	8007d5e <USBD_CtlError>
      break;
 80073d2:	bf00      	nop
  }

  return ret;
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop

080073e0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	d005      	beq.n	8007406 <USBD_StdItfReq+0x26>
 80073fa:	2b40      	cmp	r3, #64	; 0x40
 80073fc:	d82e      	bhi.n	800745c <USBD_StdItfReq+0x7c>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <USBD_StdItfReq+0x26>
 8007402:	2b20      	cmp	r3, #32
 8007404:	d12a      	bne.n	800745c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800740c:	3b01      	subs	r3, #1
 800740e:	2b02      	cmp	r3, #2
 8007410:	d81d      	bhi.n	800744e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	889b      	ldrh	r3, [r3, #4]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b01      	cmp	r3, #1
 800741a:	d813      	bhi.n	8007444 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
 800742a:	4603      	mov	r3, r0
 800742c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	88db      	ldrh	r3, [r3, #6]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d110      	bne.n	8007458 <USBD_StdItfReq+0x78>
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10d      	bne.n	8007458 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fd56 	bl	8007eee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007442:	e009      	b.n	8007458 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fc89 	bl	8007d5e <USBD_CtlError>
          break;
 800744c:	e004      	b.n	8007458 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fc84 	bl	8007d5e <USBD_CtlError>
          break;
 8007456:	e000      	b.n	800745a <USBD_StdItfReq+0x7a>
          break;
 8007458:	bf00      	nop
      }
      break;
 800745a:	e004      	b.n	8007466 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fc7d 	bl	8007d5e <USBD_CtlError>
      break;
 8007464:	bf00      	nop
  }

  return USBD_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	889b      	ldrh	r3, [r3, #4]
 8007482:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800748c:	2b40      	cmp	r3, #64	; 0x40
 800748e:	d007      	beq.n	80074a0 <USBD_StdEPReq+0x30>
 8007490:	2b40      	cmp	r3, #64	; 0x40
 8007492:	f200 8146 	bhi.w	8007722 <USBD_StdEPReq+0x2b2>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <USBD_StdEPReq+0x40>
 800749a:	2b20      	cmp	r3, #32
 800749c:	f040 8141 	bne.w	8007722 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	4798      	blx	r3
      break;
 80074ae:	e13d      	b.n	800772c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d10a      	bne.n	80074d2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
 80074ca:	4603      	mov	r3, r0
 80074cc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	e12d      	b.n	800772e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	785b      	ldrb	r3, [r3, #1]
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d007      	beq.n	80074ea <USBD_StdEPReq+0x7a>
 80074da:	2b03      	cmp	r3, #3
 80074dc:	f300 811b 	bgt.w	8007716 <USBD_StdEPReq+0x2a6>
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d072      	beq.n	80075ca <USBD_StdEPReq+0x15a>
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d03a      	beq.n	800755e <USBD_StdEPReq+0xee>
 80074e8:	e115      	b.n	8007716 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d002      	beq.n	80074fa <USBD_StdEPReq+0x8a>
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d015      	beq.n	8007524 <USBD_StdEPReq+0xb4>
 80074f8:	e02b      	b.n	8007552 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00c      	beq.n	800751a <USBD_StdEPReq+0xaa>
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	2b80      	cmp	r3, #128	; 0x80
 8007504:	d009      	beq.n	800751a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007506:	7bbb      	ldrb	r3, [r7, #14]
 8007508:	4619      	mov	r1, r3
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 f884 	bl	8008618 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007510:	2180      	movs	r1, #128	; 0x80
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f001 f880 	bl	8008618 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007518:	e020      	b.n	800755c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fc1e 	bl	8007d5e <USBD_CtlError>
              break;
 8007522:	e01b      	b.n	800755c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	885b      	ldrh	r3, [r3, #2]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10e      	bne.n	800754a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00b      	beq.n	800754a <USBD_StdEPReq+0xda>
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b80      	cmp	r3, #128	; 0x80
 8007536:	d008      	beq.n	800754a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	88db      	ldrh	r3, [r3, #6]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d104      	bne.n	800754a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 f867 	bl	8008618 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fccf 	bl	8007eee <USBD_CtlSendStatus>

              break;
 8007550:	e004      	b.n	800755c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fc02 	bl	8007d5e <USBD_CtlError>
              break;
 800755a:	bf00      	nop
          }
          break;
 800755c:	e0e0      	b.n	8007720 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007564:	2b02      	cmp	r3, #2
 8007566:	d002      	beq.n	800756e <USBD_StdEPReq+0xfe>
 8007568:	2b03      	cmp	r3, #3
 800756a:	d015      	beq.n	8007598 <USBD_StdEPReq+0x128>
 800756c:	e026      	b.n	80075bc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00c      	beq.n	800758e <USBD_StdEPReq+0x11e>
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b80      	cmp	r3, #128	; 0x80
 8007578:	d009      	beq.n	800758e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 f84a 	bl	8008618 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007584:	2180      	movs	r1, #128	; 0x80
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 f846 	bl	8008618 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800758c:	e01c      	b.n	80075c8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fbe4 	bl	8007d5e <USBD_CtlError>
              break;
 8007596:	e017      	b.n	80075c8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	885b      	ldrh	r3, [r3, #2]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d112      	bne.n	80075c6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d004      	beq.n	80075b4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80075aa:	7bbb      	ldrb	r3, [r7, #14]
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f001 f851 	bl	8008656 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fc9a 	bl	8007eee <USBD_CtlSendStatus>
              }
              break;
 80075ba:	e004      	b.n	80075c6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fbcd 	bl	8007d5e <USBD_CtlError>
              break;
 80075c4:	e000      	b.n	80075c8 <USBD_StdEPReq+0x158>
              break;
 80075c6:	bf00      	nop
          }
          break;
 80075c8:	e0aa      	b.n	8007720 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d002      	beq.n	80075da <USBD_StdEPReq+0x16a>
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d032      	beq.n	800763e <USBD_StdEPReq+0x1ce>
 80075d8:	e097      	b.n	800770a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075da:	7bbb      	ldrb	r3, [r7, #14]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d007      	beq.n	80075f0 <USBD_StdEPReq+0x180>
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	2b80      	cmp	r3, #128	; 0x80
 80075e4:	d004      	beq.n	80075f0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fbb8 	bl	8007d5e <USBD_CtlError>
                break;
 80075ee:	e091      	b.n	8007714 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	da0b      	bge.n	8007610 <USBD_StdEPReq+0x1a0>
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075fe:	4613      	mov	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	3310      	adds	r3, #16
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	4413      	add	r3, r2
 800760c:	3304      	adds	r3, #4
 800760e:	e00b      	b.n	8007628 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007610:	7bbb      	ldrb	r3, [r7, #14]
 8007612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007616:	4613      	mov	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	4413      	add	r3, r2
 8007626:	3304      	adds	r3, #4
 8007628:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2202      	movs	r2, #2
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fbfb 	bl	8007e32 <USBD_CtlSendData>
              break;
 800763c:	e06a      	b.n	8007714 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800763e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007642:	2b00      	cmp	r3, #0
 8007644:	da11      	bge.n	800766a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	f003 020f 	and.w	r2, r3, #15
 800764c:	6879      	ldr	r1, [r7, #4]
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	440b      	add	r3, r1
 8007658:	3318      	adds	r3, #24
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d117      	bne.n	8007690 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fb7b 	bl	8007d5e <USBD_CtlError>
                  break;
 8007668:	e054      	b.n	8007714 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	f003 020f 	and.w	r2, r3, #15
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d104      	bne.n	8007690 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fb68 	bl	8007d5e <USBD_CtlError>
                  break;
 800768e:	e041      	b.n	8007714 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007690:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007694:	2b00      	cmp	r3, #0
 8007696:	da0b      	bge.n	80076b0 <USBD_StdEPReq+0x240>
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	3310      	adds	r3, #16
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	4413      	add	r3, r2
 80076ac:	3304      	adds	r3, #4
 80076ae:	e00b      	b.n	80076c8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	4413      	add	r3, r2
 80076c6:	3304      	adds	r3, #4
 80076c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <USBD_StdEPReq+0x266>
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	2b80      	cmp	r3, #128	; 0x80
 80076d4:	d103      	bne.n	80076de <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	e00e      	b.n	80076fc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 ffd6 	bl	8008694 <USBD_LL_IsStallEP>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2201      	movs	r2, #1
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	e002      	b.n	80076fc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2202      	movs	r2, #2
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fb95 	bl	8007e32 <USBD_CtlSendData>
              break;
 8007708:	e004      	b.n	8007714 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fb26 	bl	8007d5e <USBD_CtlError>
              break;
 8007712:	bf00      	nop
          }
          break;
 8007714:	e004      	b.n	8007720 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fb20 	bl	8007d5e <USBD_CtlError>
          break;
 800771e:	bf00      	nop
      }
      break;
 8007720:	e004      	b.n	800772c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fb1a 	bl	8007d5e <USBD_CtlError>
      break;
 800772a:	bf00      	nop
  }

  return ret;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	885b      	ldrh	r3, [r3, #2]
 8007752:	0a1b      	lsrs	r3, r3, #8
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	2b06      	cmp	r3, #6
 800775a:	f200 8128 	bhi.w	80079ae <USBD_GetDescriptor+0x276>
 800775e:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <USBD_GetDescriptor+0x2c>)
 8007760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007764:	08007781 	.word	0x08007781
 8007768:	08007799 	.word	0x08007799
 800776c:	080077d9 	.word	0x080077d9
 8007770:	080079af 	.word	0x080079af
 8007774:	080079af 	.word	0x080079af
 8007778:	0800794f 	.word	0x0800794f
 800777c:	0800797b 	.word	0x0800797b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	7c12      	ldrb	r2, [r2, #16]
 800778c:	f107 0108 	add.w	r1, r7, #8
 8007790:	4610      	mov	r0, r2
 8007792:	4798      	blx	r3
 8007794:	60f8      	str	r0, [r7, #12]
      break;
 8007796:	e112      	b.n	80079be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	7c1b      	ldrb	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10d      	bne.n	80077bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	f107 0208 	add.w	r2, r7, #8
 80077ac:	4610      	mov	r0, r2
 80077ae:	4798      	blx	r3
 80077b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3301      	adds	r3, #1
 80077b6:	2202      	movs	r2, #2
 80077b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077ba:	e100      	b.n	80079be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	f107 0208 	add.w	r2, r7, #8
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	2202      	movs	r2, #2
 80077d4:	701a      	strb	r2, [r3, #0]
      break;
 80077d6:	e0f2      	b.n	80079be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	885b      	ldrh	r3, [r3, #2]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b05      	cmp	r3, #5
 80077e0:	f200 80ac 	bhi.w	800793c <USBD_GetDescriptor+0x204>
 80077e4:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <USBD_GetDescriptor+0xb4>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	08007805 	.word	0x08007805
 80077f0:	08007839 	.word	0x08007839
 80077f4:	0800786d 	.word	0x0800786d
 80077f8:	080078a1 	.word	0x080078a1
 80077fc:	080078d5 	.word	0x080078d5
 8007800:	08007909 	.word	0x08007909
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	7c12      	ldrb	r2, [r2, #16]
 800781c:	f107 0108 	add.w	r1, r7, #8
 8007820:	4610      	mov	r0, r2
 8007822:	4798      	blx	r3
 8007824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007826:	e091      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fa97 	bl	8007d5e <USBD_CtlError>
            err++;
 8007830:	7afb      	ldrb	r3, [r7, #11]
 8007832:	3301      	adds	r3, #1
 8007834:	72fb      	strb	r3, [r7, #11]
          break;
 8007836:	e089      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	7c12      	ldrb	r2, [r2, #16]
 8007850:	f107 0108 	add.w	r1, r7, #8
 8007854:	4610      	mov	r0, r2
 8007856:	4798      	blx	r3
 8007858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800785a:	e077      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fa7d 	bl	8007d5e <USBD_CtlError>
            err++;
 8007864:	7afb      	ldrb	r3, [r7, #11]
 8007866:	3301      	adds	r3, #1
 8007868:	72fb      	strb	r3, [r7, #11]
          break;
 800786a:	e06f      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00b      	beq.n	8007890 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	7c12      	ldrb	r2, [r2, #16]
 8007884:	f107 0108 	add.w	r1, r7, #8
 8007888:	4610      	mov	r0, r2
 800788a:	4798      	blx	r3
 800788c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800788e:	e05d      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa63 	bl	8007d5e <USBD_CtlError>
            err++;
 8007898:	7afb      	ldrb	r3, [r7, #11]
 800789a:	3301      	adds	r3, #1
 800789c:	72fb      	strb	r3, [r7, #11]
          break;
 800789e:	e055      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00b      	beq.n	80078c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	7c12      	ldrb	r2, [r2, #16]
 80078b8:	f107 0108 	add.w	r1, r7, #8
 80078bc:	4610      	mov	r0, r2
 80078be:	4798      	blx	r3
 80078c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078c2:	e043      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fa49 	bl	8007d5e <USBD_CtlError>
            err++;
 80078cc:	7afb      	ldrb	r3, [r7, #11]
 80078ce:	3301      	adds	r3, #1
 80078d0:	72fb      	strb	r3, [r7, #11]
          break;
 80078d2:	e03b      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	7c12      	ldrb	r2, [r2, #16]
 80078ec:	f107 0108 	add.w	r1, r7, #8
 80078f0:	4610      	mov	r0, r2
 80078f2:	4798      	blx	r3
 80078f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078f6:	e029      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fa2f 	bl	8007d5e <USBD_CtlError>
            err++;
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	3301      	adds	r3, #1
 8007904:	72fb      	strb	r3, [r7, #11]
          break;
 8007906:	e021      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	7c12      	ldrb	r2, [r2, #16]
 8007920:	f107 0108 	add.w	r1, r7, #8
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792a:	e00f      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa15 	bl	8007d5e <USBD_CtlError>
            err++;
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	3301      	adds	r3, #1
 8007938:	72fb      	strb	r3, [r7, #11]
          break;
 800793a:	e007      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fa0d 	bl	8007d5e <USBD_CtlError>
          err++;
 8007944:	7afb      	ldrb	r3, [r7, #11]
 8007946:	3301      	adds	r3, #1
 8007948:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800794a:	e038      	b.n	80079be <USBD_GetDescriptor+0x286>
 800794c:	e037      	b.n	80079be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7c1b      	ldrb	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d109      	bne.n	800796a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795e:	f107 0208 	add.w	r2, r7, #8
 8007962:	4610      	mov	r0, r2
 8007964:	4798      	blx	r3
 8007966:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007968:	e029      	b.n	80079be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f9f6 	bl	8007d5e <USBD_CtlError>
        err++;
 8007972:	7afb      	ldrb	r3, [r7, #11]
 8007974:	3301      	adds	r3, #1
 8007976:	72fb      	strb	r3, [r7, #11]
      break;
 8007978:	e021      	b.n	80079be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	7c1b      	ldrb	r3, [r3, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10d      	bne.n	800799e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798a:	f107 0208 	add.w	r2, r7, #8
 800798e:	4610      	mov	r0, r2
 8007990:	4798      	blx	r3
 8007992:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3301      	adds	r3, #1
 8007998:	2207      	movs	r2, #7
 800799a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800799c:	e00f      	b.n	80079be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f9dc 	bl	8007d5e <USBD_CtlError>
        err++;
 80079a6:	7afb      	ldrb	r3, [r7, #11]
 80079a8:	3301      	adds	r3, #1
 80079aa:	72fb      	strb	r3, [r7, #11]
      break;
 80079ac:	e007      	b.n	80079be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f9d4 	bl	8007d5e <USBD_CtlError>
      err++;
 80079b6:	7afb      	ldrb	r3, [r7, #11]
 80079b8:	3301      	adds	r3, #1
 80079ba:	72fb      	strb	r3, [r7, #11]
      break;
 80079bc:	bf00      	nop
  }

  if (err != 0U)
 80079be:	7afb      	ldrb	r3, [r7, #11]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d11c      	bne.n	80079fe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80079c4:	893b      	ldrh	r3, [r7, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d011      	beq.n	80079ee <USBD_GetDescriptor+0x2b6>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	88db      	ldrh	r3, [r3, #6]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00d      	beq.n	80079ee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	88da      	ldrh	r2, [r3, #6]
 80079d6:	893b      	ldrh	r3, [r7, #8]
 80079d8:	4293      	cmp	r3, r2
 80079da:	bf28      	it	cs
 80079dc:	4613      	movcs	r3, r2
 80079de:	b29b      	uxth	r3, r3
 80079e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079e2:	893b      	ldrh	r3, [r7, #8]
 80079e4:	461a      	mov	r2, r3
 80079e6:	68f9      	ldr	r1, [r7, #12]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa22 	bl	8007e32 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	88db      	ldrh	r3, [r3, #6]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d104      	bne.n	8007a00 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fa79 	bl	8007eee <USBD_CtlSendStatus>
 80079fc:	e000      	b.n	8007a00 <USBD_GetDescriptor+0x2c8>
    return;
 80079fe:	bf00      	nop
    }
  }
}
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop

08007a08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	889b      	ldrh	r3, [r3, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d130      	bne.n	8007a7c <USBD_SetAddress+0x74>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	88db      	ldrh	r3, [r3, #6]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d12c      	bne.n	8007a7c <USBD_SetAddress+0x74>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	885b      	ldrh	r3, [r3, #2]
 8007a26:	2b7f      	cmp	r3, #127	; 0x7f
 8007a28:	d828      	bhi.n	8007a7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	885b      	ldrh	r3, [r3, #2]
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d104      	bne.n	8007a4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f98b 	bl	8007d5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a48:	e01d      	b.n	8007a86 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	7bfa      	ldrb	r2, [r7, #15]
 8007a4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fe48 	bl	80086ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fa46 	bl	8007eee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d004      	beq.n	8007a72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a70:	e009      	b.n	8007a86 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a7a:	e004      	b.n	8007a86 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f96d 	bl	8007d5e <USBD_CtlError>
  }
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	885b      	ldrh	r3, [r3, #2]
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	4b41      	ldr	r3, [pc, #260]	; (8007ba8 <USBD_SetConfig+0x118>)
 8007aa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007aa4:	4b40      	ldr	r3, [pc, #256]	; (8007ba8 <USBD_SetConfig+0x118>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d904      	bls.n	8007ab6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f955 	bl	8007d5e <USBD_CtlError>
 8007ab4:	e075      	b.n	8007ba2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d002      	beq.n	8007ac6 <USBD_SetConfig+0x36>
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d023      	beq.n	8007b0c <USBD_SetConfig+0x7c>
 8007ac4:	e062      	b.n	8007b8c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007ac6:	4b38      	ldr	r3, [pc, #224]	; (8007ba8 <USBD_SetConfig+0x118>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d01a      	beq.n	8007b04 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007ace:	4b36      	ldr	r3, [pc, #216]	; (8007ba8 <USBD_SetConfig+0x118>)
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2203      	movs	r2, #3
 8007adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ae0:	4b31      	ldr	r3, [pc, #196]	; (8007ba8 <USBD_SetConfig+0x118>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff f9e7 	bl	8006eba <USBD_SetClassConfig>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d104      	bne.n	8007afc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f932 	bl	8007d5e <USBD_CtlError>
            return;
 8007afa:	e052      	b.n	8007ba2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f9f6 	bl	8007eee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b02:	e04e      	b.n	8007ba2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f9f2 	bl	8007eee <USBD_CtlSendStatus>
        break;
 8007b0a:	e04a      	b.n	8007ba2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007b0c:	4b26      	ldr	r3, [pc, #152]	; (8007ba8 <USBD_SetConfig+0x118>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d112      	bne.n	8007b3a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007b1c:	4b22      	ldr	r3, [pc, #136]	; (8007ba8 <USBD_SetConfig+0x118>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	461a      	mov	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b26:	4b20      	ldr	r3, [pc, #128]	; (8007ba8 <USBD_SetConfig+0x118>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff f9e3 	bl	8006ef8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f9db 	bl	8007eee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b38:	e033      	b.n	8007ba2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007b3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ba8 <USBD_SetConfig+0x118>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d01d      	beq.n	8007b84 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff f9d1 	bl	8006ef8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b56:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <USBD_SetConfig+0x118>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b60:	4b11      	ldr	r3, [pc, #68]	; (8007ba8 <USBD_SetConfig+0x118>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff f9a7 	bl	8006eba <USBD_SetClassConfig>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d104      	bne.n	8007b7c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f8f2 	bl	8007d5e <USBD_CtlError>
            return;
 8007b7a:	e012      	b.n	8007ba2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f9b6 	bl	8007eee <USBD_CtlSendStatus>
        break;
 8007b82:	e00e      	b.n	8007ba2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f9b2 	bl	8007eee <USBD_CtlSendStatus>
        break;
 8007b8a:	e00a      	b.n	8007ba2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f8e5 	bl	8007d5e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b94:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <USBD_SetConfig+0x118>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff f9ac 	bl	8006ef8 <USBD_ClrClassConfig>
        break;
 8007ba0:	bf00      	nop
    }
  }
}
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	200002dc 	.word	0x200002dc

08007bac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	88db      	ldrh	r3, [r3, #6]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d004      	beq.n	8007bc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f8cc 	bl	8007d5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bc6:	e022      	b.n	8007c0e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	dc02      	bgt.n	8007bd8 <USBD_GetConfig+0x2c>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	dc03      	bgt.n	8007bde <USBD_GetConfig+0x32>
 8007bd6:	e015      	b.n	8007c04 <USBD_GetConfig+0x58>
 8007bd8:	2b03      	cmp	r3, #3
 8007bda:	d00b      	beq.n	8007bf4 <USBD_GetConfig+0x48>
 8007bdc:	e012      	b.n	8007c04 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3308      	adds	r3, #8
 8007be8:	2201      	movs	r2, #1
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f920 	bl	8007e32 <USBD_CtlSendData>
        break;
 8007bf2:	e00c      	b.n	8007c0e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f918 	bl	8007e32 <USBD_CtlSendData>
        break;
 8007c02:	e004      	b.n	8007c0e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f8a9 	bl	8007d5e <USBD_CtlError>
        break;
 8007c0c:	bf00      	nop
}
 8007c0e:	bf00      	nop
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b082      	sub	sp, #8
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c26:	3b01      	subs	r3, #1
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d81e      	bhi.n	8007c6a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	88db      	ldrh	r3, [r3, #6]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d004      	beq.n	8007c3e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f891 	bl	8007d5e <USBD_CtlError>
        break;
 8007c3c:	e01a      	b.n	8007c74 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f043 0202 	orr.w	r2, r3, #2
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	330c      	adds	r3, #12
 8007c5e:	2202      	movs	r2, #2
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f8e5 	bl	8007e32 <USBD_CtlSendData>
      break;
 8007c68:	e004      	b.n	8007c74 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f876 	bl	8007d5e <USBD_CtlError>
      break;
 8007c72:	bf00      	nop
  }
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	885b      	ldrh	r3, [r3, #2]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d106      	bne.n	8007c9c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f929 	bl	8007eee <USBD_CtlSendStatus>
  }
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d80b      	bhi.n	8007cd2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	885b      	ldrh	r3, [r3, #2]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d10c      	bne.n	8007cdc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f90f 	bl	8007eee <USBD_CtlSendStatus>
      }
      break;
 8007cd0:	e004      	b.n	8007cdc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f842 	bl	8007d5e <USBD_CtlError>
      break;
 8007cda:	e000      	b.n	8007cde <USBD_ClrFeature+0x3a>
      break;
 8007cdc:	bf00      	nop
  }
}
 8007cde:	bf00      	nop
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	781a      	ldrb	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	785a      	ldrb	r2, [r3, #1]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	3302      	adds	r3, #2
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	3303      	adds	r3, #3
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	021b      	lsls	r3, r3, #8
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	4413      	add	r3, r2
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	3305      	adds	r3, #5
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	021b      	lsls	r3, r3, #8
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	4413      	add	r3, r2
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	3306      	adds	r3, #6
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	3307      	adds	r3, #7
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	021b      	lsls	r3, r3, #8
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	4413      	add	r3, r2
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	80da      	strh	r2, [r3, #6]

}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bc80      	pop	{r7}
 8007d5c:	4770      	bx	lr

08007d5e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d68:	2180      	movs	r1, #128	; 0x80
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fc54 	bl	8008618 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d70:	2100      	movs	r1, #0
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fc50 	bl	8008618 <USBD_LL_StallEP>
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d032      	beq.n	8007dfc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f000 f834 	bl	8007e04 <USBD_GetLen>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	3301      	adds	r3, #1
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	75fa      	strb	r2, [r7, #23]
 8007db0:	461a      	mov	r2, r3
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	4413      	add	r3, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	7812      	ldrb	r2, [r2, #0]
 8007dba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	1c5a      	adds	r2, r3, #1
 8007dc0:	75fa      	strb	r2, [r7, #23]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	2203      	movs	r2, #3
 8007dca:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007dcc:	e012      	b.n	8007df4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	60fa      	str	r2, [r7, #12]
 8007dd4:	7dfa      	ldrb	r2, [r7, #23]
 8007dd6:	1c51      	adds	r1, r2, #1
 8007dd8:	75f9      	strb	r1, [r7, #23]
 8007dda:	4611      	mov	r1, r2
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	440a      	add	r2, r1
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	75fa      	strb	r2, [r7, #23]
 8007dea:	461a      	mov	r2, r3
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	4413      	add	r3, r2
 8007df0:	2200      	movs	r2, #0
 8007df2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e8      	bne.n	8007dce <USBD_GetString+0x4e>
    }
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007e10:	e005      	b.n	8007e1e <USBD_GetLen+0x1a>
  {
    len++;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	3301      	adds	r3, #1
 8007e16:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1f5      	bne.n	8007e12 <USBD_GetLen+0xe>
  }

  return len;
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr

08007e32 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	60f8      	str	r0, [r7, #12]
 8007e3a:	60b9      	str	r1, [r7, #8]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2202      	movs	r2, #2
 8007e44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e48:	88fa      	ldrh	r2, [r7, #6]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e4e:	88fa      	ldrh	r2, [r7, #6]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	2100      	movs	r1, #0
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 fc65 	bl	800872a <USBD_LL_Transmit>

  return USBD_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	4613      	mov	r3, r2
 8007e76:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e78:	88fb      	ldrh	r3, [r7, #6]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fc53 	bl	800872a <USBD_LL_Transmit>

  return USBD_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	60f8      	str	r0, [r7, #12]
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2203      	movs	r2, #3
 8007ea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ea4:	88fa      	ldrh	r2, [r7, #6]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007eac:	88fa      	ldrh	r2, [r7, #6]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007eb4:	88fb      	ldrh	r3, [r7, #6]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	2100      	movs	r1, #0
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 fc58 	bl	8008770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ed8:	88fb      	ldrh	r3, [r7, #6]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	2100      	movs	r1, #0
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 fc46 	bl	8008770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2204      	movs	r2, #4
 8007efa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007efe:	2300      	movs	r3, #0
 8007f00:	2200      	movs	r2, #0
 8007f02:	2100      	movs	r1, #0
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fc10 	bl	800872a <USBD_LL_Transmit>

  return USBD_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2205      	movs	r2, #5
 8007f20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f24:	2300      	movs	r3, #0
 8007f26:	2200      	movs	r2, #0
 8007f28:	2100      	movs	r1, #0
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fc20 	bl	8008770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f40:	2200      	movs	r2, #0
 8007f42:	4912      	ldr	r1, [pc, #72]	; (8007f8c <MX_USB_DEVICE_Init+0x50>)
 8007f44:	4812      	ldr	r0, [pc, #72]	; (8007f90 <MX_USB_DEVICE_Init+0x54>)
 8007f46:	f7fe ff5e 	bl	8006e06 <USBD_Init>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f50:	f7f8 fe5e 	bl	8000c10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f54:	490f      	ldr	r1, [pc, #60]	; (8007f94 <MX_USB_DEVICE_Init+0x58>)
 8007f56:	480e      	ldr	r0, [pc, #56]	; (8007f90 <MX_USB_DEVICE_Init+0x54>)
 8007f58:	f7fe ff80 	bl	8006e5c <USBD_RegisterClass>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f62:	f7f8 fe55 	bl	8000c10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f66:	490c      	ldr	r1, [pc, #48]	; (8007f98 <MX_USB_DEVICE_Init+0x5c>)
 8007f68:	4809      	ldr	r0, [pc, #36]	; (8007f90 <MX_USB_DEVICE_Init+0x54>)
 8007f6a:	f7fe feb1 	bl	8006cd0 <USBD_CDC_RegisterInterface>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f74:	f7f8 fe4c 	bl	8000c10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f78:	4805      	ldr	r0, [pc, #20]	; (8007f90 <MX_USB_DEVICE_Init+0x54>)
 8007f7a:	f7fe ff88 	bl	8006e8e <USBD_Start>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f84:	f7f8 fe44 	bl	8000c10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f88:	bf00      	nop
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	2000012c 	.word	0x2000012c
 8007f90:	20000510 	.word	0x20000510
 8007f94:	20000018 	.word	0x20000018
 8007f98:	2000011c 	.word	0x2000011c

08007f9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	4905      	ldr	r1, [pc, #20]	; (8007fb8 <CDC_Init_FS+0x1c>)
 8007fa4:	4805      	ldr	r0, [pc, #20]	; (8007fbc <CDC_Init_FS+0x20>)
 8007fa6:	f7fe fea9 	bl	8006cfc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007faa:	4905      	ldr	r1, [pc, #20]	; (8007fc0 <CDC_Init_FS+0x24>)
 8007fac:	4803      	ldr	r0, [pc, #12]	; (8007fbc <CDC_Init_FS+0x20>)
 8007fae:	f7fe febe 	bl	8006d2e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007fb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20000bbc 	.word	0x20000bbc
 8007fbc:	20000510 	.word	0x20000510
 8007fc0:	200007d4 	.word	0x200007d4

08007fc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bc80      	pop	{r7}
 8007fd0:	4770      	bx	lr
	...

08007fd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	6039      	str	r1, [r7, #0]
 8007fde:	71fb      	strb	r3, [r7, #7]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007fe4:	79fb      	ldrb	r3, [r7, #7]
 8007fe6:	2b23      	cmp	r3, #35	; 0x23
 8007fe8:	d84a      	bhi.n	8008080 <CDC_Control_FS+0xac>
 8007fea:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <CDC_Control_FS+0x1c>)
 8007fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff0:	08008081 	.word	0x08008081
 8007ff4:	08008081 	.word	0x08008081
 8007ff8:	08008081 	.word	0x08008081
 8007ffc:	08008081 	.word	0x08008081
 8008000:	08008081 	.word	0x08008081
 8008004:	08008081 	.word	0x08008081
 8008008:	08008081 	.word	0x08008081
 800800c:	08008081 	.word	0x08008081
 8008010:	08008081 	.word	0x08008081
 8008014:	08008081 	.word	0x08008081
 8008018:	08008081 	.word	0x08008081
 800801c:	08008081 	.word	0x08008081
 8008020:	08008081 	.word	0x08008081
 8008024:	08008081 	.word	0x08008081
 8008028:	08008081 	.word	0x08008081
 800802c:	08008081 	.word	0x08008081
 8008030:	08008081 	.word	0x08008081
 8008034:	08008081 	.word	0x08008081
 8008038:	08008081 	.word	0x08008081
 800803c:	08008081 	.word	0x08008081
 8008040:	08008081 	.word	0x08008081
 8008044:	08008081 	.word	0x08008081
 8008048:	08008081 	.word	0x08008081
 800804c:	08008081 	.word	0x08008081
 8008050:	08008081 	.word	0x08008081
 8008054:	08008081 	.word	0x08008081
 8008058:	08008081 	.word	0x08008081
 800805c:	08008081 	.word	0x08008081
 8008060:	08008081 	.word	0x08008081
 8008064:	08008081 	.word	0x08008081
 8008068:	08008081 	.word	0x08008081
 800806c:	08008081 	.word	0x08008081
 8008070:	08008081 	.word	0x08008081
 8008074:	08008081 	.word	0x08008081
 8008078:	08008081 	.word	0x08008081
 800807c:	08008081 	.word	0x08008081
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008080:	bf00      	nop
  }

  return (USBD_OK);
 8008082:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	bc80      	pop	{r7}
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop

08008090 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800809a:	6879      	ldr	r1, [r7, #4]
 800809c:	4805      	ldr	r0, [pc, #20]	; (80080b4 <CDC_Receive_FS+0x24>)
 800809e:	f7fe fe46 	bl	8006d2e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80080a2:	4804      	ldr	r0, [pc, #16]	; (80080b4 <CDC_Receive_FS+0x24>)
 80080a4:	f7fe fe85 	bl	8006db2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80080a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20000510 	.word	0x20000510

080080b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80080c8:	4b0d      	ldr	r3, [pc, #52]	; (8008100 <CDC_Transmit_FS+0x48>)
 80080ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80080da:	2301      	movs	r3, #1
 80080dc:	e00b      	b.n	80080f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80080de:	887b      	ldrh	r3, [r7, #2]
 80080e0:	461a      	mov	r2, r3
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	4806      	ldr	r0, [pc, #24]	; (8008100 <CDC_Transmit_FS+0x48>)
 80080e6:	f7fe fe09 	bl	8006cfc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80080ea:	4805      	ldr	r0, [pc, #20]	; (8008100 <CDC_Transmit_FS+0x48>)
 80080ec:	f7fe fe32 	bl	8006d54 <USBD_CDC_TransmitPacket>
 80080f0:	4603      	mov	r3, r0
 80080f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20000510 	.word	0x20000510

08008104 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2212      	movs	r2, #18
 8008114:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008116:	4b03      	ldr	r3, [pc, #12]	; (8008124 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	bc80      	pop	{r7}
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	20000148 	.word	0x20000148

08008128 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	6039      	str	r1, [r7, #0]
 8008132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2204      	movs	r2, #4
 8008138:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800813a:	4b03      	ldr	r3, [pc, #12]	; (8008148 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	bc80      	pop	{r7}
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	2000015c 	.word	0x2000015c

0800814c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	6039      	str	r1, [r7, #0]
 8008156:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d105      	bne.n	800816a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	4907      	ldr	r1, [pc, #28]	; (8008180 <USBD_FS_ProductStrDescriptor+0x34>)
 8008162:	4808      	ldr	r0, [pc, #32]	; (8008184 <USBD_FS_ProductStrDescriptor+0x38>)
 8008164:	f7ff fe0c 	bl	8007d80 <USBD_GetString>
 8008168:	e004      	b.n	8008174 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	4904      	ldr	r1, [pc, #16]	; (8008180 <USBD_FS_ProductStrDescriptor+0x34>)
 800816e:	4805      	ldr	r0, [pc, #20]	; (8008184 <USBD_FS_ProductStrDescriptor+0x38>)
 8008170:	f7ff fe06 	bl	8007d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008174:	4b02      	ldr	r3, [pc, #8]	; (8008180 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008176:	4618      	mov	r0, r3
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20000fa4 	.word	0x20000fa4
 8008184:	080097f8 	.word	0x080097f8

08008188 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	4603      	mov	r3, r0
 8008190:	6039      	str	r1, [r7, #0]
 8008192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	4904      	ldr	r1, [pc, #16]	; (80081a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008198:	4804      	ldr	r0, [pc, #16]	; (80081ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800819a:	f7ff fdf1 	bl	8007d80 <USBD_GetString>
  return USBD_StrDesc;
 800819e:	4b02      	ldr	r3, [pc, #8]	; (80081a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20000fa4 	.word	0x20000fa4
 80081ac:	08009810 	.word	0x08009810

080081b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	4603      	mov	r3, r0
 80081b8:	6039      	str	r1, [r7, #0]
 80081ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	221a      	movs	r2, #26
 80081c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081c2:	f000 f843 	bl	800824c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081c6:	4b02      	ldr	r3, [pc, #8]	; (80081d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	20000160 	.word	0x20000160

080081d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d105      	bne.n	80081f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	4907      	ldr	r1, [pc, #28]	; (8008208 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081ea:	4808      	ldr	r0, [pc, #32]	; (800820c <USBD_FS_ConfigStrDescriptor+0x38>)
 80081ec:	f7ff fdc8 	bl	8007d80 <USBD_GetString>
 80081f0:	e004      	b.n	80081fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	4904      	ldr	r1, [pc, #16]	; (8008208 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081f6:	4805      	ldr	r0, [pc, #20]	; (800820c <USBD_FS_ConfigStrDescriptor+0x38>)
 80081f8:	f7ff fdc2 	bl	8007d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081fc:	4b02      	ldr	r3, [pc, #8]	; (8008208 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20000fa4 	.word	0x20000fa4
 800820c:	08009824 	.word	0x08009824

08008210 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	6039      	str	r1, [r7, #0]
 800821a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d105      	bne.n	800822e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	4907      	ldr	r1, [pc, #28]	; (8008244 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008226:	4808      	ldr	r0, [pc, #32]	; (8008248 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008228:	f7ff fdaa 	bl	8007d80 <USBD_GetString>
 800822c:	e004      	b.n	8008238 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	4904      	ldr	r1, [pc, #16]	; (8008244 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008232:	4805      	ldr	r0, [pc, #20]	; (8008248 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008234:	f7ff fda4 	bl	8007d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008238:	4b02      	ldr	r3, [pc, #8]	; (8008244 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000fa4 	.word	0x20000fa4
 8008248:	08009830 	.word	0x08009830

0800824c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008252:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <Get_SerialNum+0x44>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008258:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <Get_SerialNum+0x48>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800825e:	4b0e      	ldr	r3, [pc, #56]	; (8008298 <Get_SerialNum+0x4c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4413      	add	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d009      	beq.n	8008286 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008272:	2208      	movs	r2, #8
 8008274:	4909      	ldr	r1, [pc, #36]	; (800829c <Get_SerialNum+0x50>)
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 f814 	bl	80082a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800827c:	2204      	movs	r2, #4
 800827e:	4908      	ldr	r1, [pc, #32]	; (80082a0 <Get_SerialNum+0x54>)
 8008280:	68b8      	ldr	r0, [r7, #8]
 8008282:	f000 f80f 	bl	80082a4 <IntToUnicode>
  }
}
 8008286:	bf00      	nop
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	1ffff7e8 	.word	0x1ffff7e8
 8008294:	1ffff7ec 	.word	0x1ffff7ec
 8008298:	1ffff7f0 	.word	0x1ffff7f0
 800829c:	20000162 	.word	0x20000162
 80082a0:	20000172 	.word	0x20000172

080082a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b087      	sub	sp, #28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	4613      	mov	r3, r2
 80082b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082b6:	2300      	movs	r3, #0
 80082b8:	75fb      	strb	r3, [r7, #23]
 80082ba:	e027      	b.n	800830c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	0f1b      	lsrs	r3, r3, #28
 80082c0:	2b09      	cmp	r3, #9
 80082c2:	d80b      	bhi.n	80082dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	0f1b      	lsrs	r3, r3, #28
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	4619      	mov	r1, r3
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	440b      	add	r3, r1
 80082d4:	3230      	adds	r2, #48	; 0x30
 80082d6:	b2d2      	uxtb	r2, r2
 80082d8:	701a      	strb	r2, [r3, #0]
 80082da:	e00a      	b.n	80082f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	0f1b      	lsrs	r3, r3, #28
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	4619      	mov	r1, r3
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	440b      	add	r3, r1
 80082ec:	3237      	adds	r2, #55	; 0x37
 80082ee:	b2d2      	uxtb	r2, r2
 80082f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	011b      	lsls	r3, r3, #4
 80082f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	3301      	adds	r3, #1
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	4413      	add	r3, r2
 8008302:	2200      	movs	r2, #0
 8008304:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008306:	7dfb      	ldrb	r3, [r7, #23]
 8008308:	3301      	adds	r3, #1
 800830a:	75fb      	strb	r3, [r7, #23]
 800830c:	7dfa      	ldrb	r2, [r7, #23]
 800830e:	79fb      	ldrb	r3, [r7, #7]
 8008310:	429a      	cmp	r2, r3
 8008312:	d3d3      	bcc.n	80082bc <IntToUnicode+0x18>
  }
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop
 8008318:	371c      	adds	r7, #28
 800831a:	46bd      	mov	sp, r7
 800831c:	bc80      	pop	{r7}
 800831e:	4770      	bx	lr

08008320 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a0d      	ldr	r2, [pc, #52]	; (8008364 <HAL_PCD_MspInit+0x44>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d113      	bne.n	800835a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008332:	4b0d      	ldr	r3, [pc, #52]	; (8008368 <HAL_PCD_MspInit+0x48>)
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	4a0c      	ldr	r2, [pc, #48]	; (8008368 <HAL_PCD_MspInit+0x48>)
 8008338:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800833c:	61d3      	str	r3, [r2, #28]
 800833e:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <HAL_PCD_MspInit+0x48>)
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800834a:	2200      	movs	r2, #0
 800834c:	2100      	movs	r1, #0
 800834e:	2014      	movs	r0, #20
 8008350:	f7f9 f895 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008354:	2014      	movs	r0, #20
 8008356:	f7f9 f8ae 	bl	80014b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	40005c00 	.word	0x40005c00
 8008368:	40021000 	.word	0x40021000

0800836c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008380:	4619      	mov	r1, r3
 8008382:	4610      	mov	r0, r2
 8008384:	f7fe fdcb 	bl	8006f1e <USBD_LL_SetupStage>
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80083a2:	78fa      	ldrb	r2, [r7, #3]
 80083a4:	6879      	ldr	r1, [r7, #4]
 80083a6:	4613      	mov	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	00db      	lsls	r3, r3, #3
 80083ae:	440b      	add	r3, r1
 80083b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	78fb      	ldrb	r3, [r7, #3]
 80083b8:	4619      	mov	r1, r3
 80083ba:	f7fe fdfd 	bl	8006fb8 <USBD_LL_DataOutStage>
}
 80083be:	bf00      	nop
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	460b      	mov	r3, r1
 80083d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80083d8:	78fa      	ldrb	r2, [r7, #3]
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	4613      	mov	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	00db      	lsls	r3, r3, #3
 80083e4:	440b      	add	r3, r1
 80083e6:	333c      	adds	r3, #60	; 0x3c
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	4619      	mov	r1, r3
 80083ee:	f7fe fe54 	bl	800709a <USBD_LL_DataInStage>
}
 80083f2:	bf00      	nop
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe ff64 	bl	80072d6 <USBD_LL_SOF>
}
 800840e:	bf00      	nop
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800841e:	2301      	movs	r3, #1
 8008420:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	2b02      	cmp	r3, #2
 8008428:	d001      	beq.n	800842e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800842a:	f7f8 fbf1 	bl	8000c10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008434:	7bfa      	ldrb	r2, [r7, #15]
 8008436:	4611      	mov	r1, r2
 8008438:	4618      	mov	r0, r3
 800843a:	f7fe ff14 	bl	8007266 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe fecd 	bl	80071e4 <USBD_LL_Reset>
}
 800844a:	bf00      	nop
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008462:	4618      	mov	r0, r3
 8008464:	f7fe ff0e 	bl	8007284 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d005      	beq.n	800847c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008470:	4b04      	ldr	r3, [pc, #16]	; (8008484 <HAL_PCD_SuspendCallback+0x30>)
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	4a03      	ldr	r2, [pc, #12]	; (8008484 <HAL_PCD_SuspendCallback+0x30>)
 8008476:	f043 0306 	orr.w	r3, r3, #6
 800847a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	e000ed00 	.word	0xe000ed00

08008488 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe ff08 	bl	80072ac <USBD_LL_Resume>
}
 800849c:	bf00      	nop
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80084ac:	4a28      	ldr	r2, [pc, #160]	; (8008550 <USBD_LL_Init+0xac>)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a26      	ldr	r2, [pc, #152]	; (8008550 <USBD_LL_Init+0xac>)
 80084b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80084bc:	4b24      	ldr	r3, [pc, #144]	; (8008550 <USBD_LL_Init+0xac>)
 80084be:	4a25      	ldr	r2, [pc, #148]	; (8008554 <USBD_LL_Init+0xb0>)
 80084c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80084c2:	4b23      	ldr	r3, [pc, #140]	; (8008550 <USBD_LL_Init+0xac>)
 80084c4:	2208      	movs	r2, #8
 80084c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80084c8:	4b21      	ldr	r3, [pc, #132]	; (8008550 <USBD_LL_Init+0xac>)
 80084ca:	2202      	movs	r2, #2
 80084cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80084ce:	4b20      	ldr	r3, [pc, #128]	; (8008550 <USBD_LL_Init+0xac>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80084d4:	4b1e      	ldr	r3, [pc, #120]	; (8008550 <USBD_LL_Init+0xac>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80084da:	4b1d      	ldr	r3, [pc, #116]	; (8008550 <USBD_LL_Init+0xac>)
 80084dc:	2200      	movs	r2, #0
 80084de:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80084e0:	481b      	ldr	r0, [pc, #108]	; (8008550 <USBD_LL_Init+0xac>)
 80084e2:	f7f9 f9b6 	bl	8001852 <HAL_PCD_Init>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80084ec:	f7f8 fb90 	bl	8000c10 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084f6:	2318      	movs	r3, #24
 80084f8:	2200      	movs	r2, #0
 80084fa:	2100      	movs	r1, #0
 80084fc:	f7fa fe2c 	bl	8003158 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008506:	2358      	movs	r3, #88	; 0x58
 8008508:	2200      	movs	r2, #0
 800850a:	2180      	movs	r1, #128	; 0x80
 800850c:	f7fa fe24 	bl	8003158 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008516:	23c0      	movs	r3, #192	; 0xc0
 8008518:	2200      	movs	r2, #0
 800851a:	2181      	movs	r1, #129	; 0x81
 800851c:	f7fa fe1c 	bl	8003158 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008526:	f44f 7388 	mov.w	r3, #272	; 0x110
 800852a:	2200      	movs	r2, #0
 800852c:	2101      	movs	r1, #1
 800852e:	f7fa fe13 	bl	8003158 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800853c:	2200      	movs	r2, #0
 800853e:	2182      	movs	r1, #130	; 0x82
 8008540:	f7fa fe0a 	bl	8003158 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	200011a4 	.word	0x200011a4
 8008554:	40005c00 	.word	0x40005c00

08008558 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800856e:	4618      	mov	r0, r3
 8008570:	f7f9 fa7a 	bl	8001a68 <HAL_PCD_Start>
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	4618      	mov	r0, r3
 800857c:	f000 f94e 	bl	800881c <USBD_Get_USB_Status>
 8008580:	4603      	mov	r3, r0
 8008582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008584:	7bbb      	ldrb	r3, [r7, #14]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	4608      	mov	r0, r1
 8008598:	4611      	mov	r1, r2
 800859a:	461a      	mov	r2, r3
 800859c:	4603      	mov	r3, r0
 800859e:	70fb      	strb	r3, [r7, #3]
 80085a0:	460b      	mov	r3, r1
 80085a2:	70bb      	strb	r3, [r7, #2]
 80085a4:	4613      	mov	r3, r2
 80085a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085b6:	78bb      	ldrb	r3, [r7, #2]
 80085b8:	883a      	ldrh	r2, [r7, #0]
 80085ba:	78f9      	ldrb	r1, [r7, #3]
 80085bc:	f7f9 fbf4 	bl	8001da8 <HAL_PCD_EP_Open>
 80085c0:	4603      	mov	r3, r0
 80085c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 f928 	bl	800881c <USBD_Get_USB_Status>
 80085cc:	4603      	mov	r3, r0
 80085ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	460b      	mov	r3, r1
 80085e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085f4:	78fa      	ldrb	r2, [r7, #3]
 80085f6:	4611      	mov	r1, r2
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7f9 fc3b 	bl	8001e74 <HAL_PCD_EP_Close>
 80085fe:	4603      	mov	r3, r0
 8008600:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	4618      	mov	r0, r3
 8008606:	f000 f909 	bl	800881c <USBD_Get_USB_Status>
 800860a:	4603      	mov	r3, r0
 800860c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800860e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008632:	78fa      	ldrb	r2, [r7, #3]
 8008634:	4611      	mov	r1, r2
 8008636:	4618      	mov	r0, r3
 8008638:	f7f9 fcfb 	bl	8002032 <HAL_PCD_EP_SetStall>
 800863c:	4603      	mov	r3, r0
 800863e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	4618      	mov	r0, r3
 8008644:	f000 f8ea 	bl	800881c <USBD_Get_USB_Status>
 8008648:	4603      	mov	r3, r0
 800864a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800864c:	7bbb      	ldrb	r3, [r7, #14]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	460b      	mov	r3, r1
 8008660:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008670:	78fa      	ldrb	r2, [r7, #3]
 8008672:	4611      	mov	r1, r2
 8008674:	4618      	mov	r0, r3
 8008676:	f7f9 fd3c 	bl	80020f2 <HAL_PCD_EP_ClrStall>
 800867a:	4603      	mov	r3, r0
 800867c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	4618      	mov	r0, r3
 8008682:	f000 f8cb 	bl	800881c <USBD_Get_USB_Status>
 8008686:	4603      	mov	r3, r0
 8008688:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800868a:	7bbb      	ldrb	r3, [r7, #14]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	da0c      	bge.n	80086ca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086b6:	68f9      	ldr	r1, [r7, #12]
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	4613      	mov	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	440b      	add	r3, r1
 80086c4:	3302      	adds	r3, #2
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	e00b      	b.n	80086e2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086ca:	78fb      	ldrb	r3, [r7, #3]
 80086cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086d0:	68f9      	ldr	r1, [r7, #12]
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	00db      	lsls	r3, r3, #3
 80086da:	440b      	add	r3, r1
 80086dc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80086e0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr

080086ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008706:	78fa      	ldrb	r2, [r7, #3]
 8008708:	4611      	mov	r1, r2
 800870a:	4618      	mov	r0, r3
 800870c:	f7f9 fb27 	bl	8001d5e <HAL_PCD_SetAddress>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f880 	bl	800881c <USBD_Get_USB_Status>
 800871c:	4603      	mov	r3, r0
 800871e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008720:	7bbb      	ldrb	r3, [r7, #14]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b086      	sub	sp, #24
 800872e:	af00      	add	r7, sp, #0
 8008730:	60f8      	str	r0, [r7, #12]
 8008732:	607a      	str	r2, [r7, #4]
 8008734:	461a      	mov	r2, r3
 8008736:	460b      	mov	r3, r1
 8008738:	72fb      	strb	r3, [r7, #11]
 800873a:	4613      	mov	r3, r2
 800873c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800874c:	893b      	ldrh	r3, [r7, #8]
 800874e:	7af9      	ldrb	r1, [r7, #11]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	f7f9 fc2b 	bl	8001fac <HAL_PCD_EP_Transmit>
 8008756:	4603      	mov	r3, r0
 8008758:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	4618      	mov	r0, r3
 800875e:	f000 f85d 	bl	800881c <USBD_Get_USB_Status>
 8008762:	4603      	mov	r3, r0
 8008764:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008766:	7dbb      	ldrb	r3, [r7, #22]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	607a      	str	r2, [r7, #4]
 800877a:	461a      	mov	r2, r3
 800877c:	460b      	mov	r3, r1
 800877e:	72fb      	strb	r3, [r7, #11]
 8008780:	4613      	mov	r3, r2
 8008782:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008792:	893b      	ldrh	r3, [r7, #8]
 8008794:	7af9      	ldrb	r1, [r7, #11]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	f7f9 fbb4 	bl	8001f04 <HAL_PCD_EP_Receive>
 800879c:	4603      	mov	r3, r0
 800879e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 f83a 	bl	800881c <USBD_Get_USB_Status>
 80087a8:	4603      	mov	r3, r0
 80087aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b082      	sub	sp, #8
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	460b      	mov	r3, r1
 80087c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087c8:	78fa      	ldrb	r2, [r7, #3]
 80087ca:	4611      	mov	r1, r2
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7f9 fbd6 	bl	8001f7e <HAL_PCD_EP_GetRxCount>
 80087d2:	4603      	mov	r3, r0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80087e4:	4b02      	ldr	r3, [pc, #8]	; (80087f0 <USBD_static_malloc+0x14>)
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bc80      	pop	{r7}
 80087ee:	4770      	bx	lr
 80087f0:	200002e0 	.word	0x200002e0

080087f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]

}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	bc80      	pop	{r7}
 8008804:	4770      	bx	lr

08008806 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	460b      	mov	r3, r1
 8008810:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008812:	bf00      	nop
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	bc80      	pop	{r7}
 800881a:	4770      	bx	lr

0800881c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800882a:	79fb      	ldrb	r3, [r7, #7]
 800882c:	2b03      	cmp	r3, #3
 800882e:	d817      	bhi.n	8008860 <USBD_Get_USB_Status+0x44>
 8008830:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <USBD_Get_USB_Status+0x1c>)
 8008832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008836:	bf00      	nop
 8008838:	08008849 	.word	0x08008849
 800883c:	0800884f 	.word	0x0800884f
 8008840:	08008855 	.word	0x08008855
 8008844:	0800885b 	.word	0x0800885b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
    break;
 800884c:	e00b      	b.n	8008866 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800884e:	2302      	movs	r3, #2
 8008850:	73fb      	strb	r3, [r7, #15]
    break;
 8008852:	e008      	b.n	8008866 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008854:	2301      	movs	r3, #1
 8008856:	73fb      	strb	r3, [r7, #15]
    break;
 8008858:	e005      	b.n	8008866 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800885a:	2302      	movs	r3, #2
 800885c:	73fb      	strb	r3, [r7, #15]
    break;
 800885e:	e002      	b.n	8008866 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008860:	2302      	movs	r3, #2
 8008862:	73fb      	strb	r3, [r7, #15]
    break;
 8008864:	bf00      	nop
  }
  return usb_status;
 8008866:	7bfb      	ldrb	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	bc80      	pop	{r7}
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop

08008874 <_ZdlPvj>:
 8008874:	f000 ba88 	b.w	8008d88 <_ZdlPv>

08008878 <_ZNSaIcEC1Ev>:
 8008878:	4770      	bx	lr

0800887a <_ZNSaIcED1Ev>:
 800887a:	4770      	bx	lr

0800887c <_ZSt17__throw_bad_allocv>:
 800887c:	b508      	push	{r3, lr}
 800887e:	f000 fa9f 	bl	8008dc0 <abort>

08008882 <_ZSt19__throw_logic_errorPKc>:
 8008882:	b508      	push	{r3, lr}
 8008884:	f000 fa9c 	bl	8008dc0 <abort>

08008888 <_ZSt20__throw_length_errorPKc>:
 8008888:	b508      	push	{r3, lr}
 800888a:	f000 fa99 	bl	8008dc0 <abort>

0800888e <_ZSt24__throw_out_of_range_fmtPKcz>:
 800888e:	b40f      	push	{r0, r1, r2, r3}
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	f107 0410 	add.w	r4, r7, #16
 800889a:	f854 5b04 	ldr.w	r5, [r4], #4
 800889e:	4628      	mov	r0, r5
 80088a0:	f7f7 fc54 	bl	800014c <strlen>
 80088a4:	f200 2307 	addw	r3, r0, #519	; 0x207
 80088a8:	f023 0307 	bic.w	r3, r3, #7
 80088ac:	ebad 0d03 	sub.w	sp, sp, r3
 80088b0:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80088b4:	4623      	mov	r3, r4
 80088b6:	462a      	mov	r2, r5
 80088b8:	4668      	mov	r0, sp
 80088ba:	607c      	str	r4, [r7, #4]
 80088bc:	f000 f854 	bl	8008968 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80088c0:	f000 fa7e 	bl	8008dc0 <abort>

080088c4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80088c4:	4606      	mov	r6, r0
 80088c6:	460c      	mov	r4, r1
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b09c      	sub	sp, #112	; 0x70
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	1ba4      	subs	r4, r4, r6
 80088d0:	2269      	movs	r2, #105	; 0x69
 80088d2:	490e      	ldr	r1, [pc, #56]	; (800890c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80088d4:	1d38      	adds	r0, r7, #4
 80088d6:	f000 fac3 	bl	8008e60 <memcpy>
 80088da:	f104 0370 	add.w	r3, r4, #112	; 0x70
 80088de:	f023 0307 	bic.w	r3, r3, #7
 80088e2:	ebad 0d03 	sub.w	sp, sp, r3
 80088e6:	466d      	mov	r5, sp
 80088e8:	2268      	movs	r2, #104	; 0x68
 80088ea:	1d39      	adds	r1, r7, #4
 80088ec:	4628      	mov	r0, r5
 80088ee:	f000 fab7 	bl	8008e60 <memcpy>
 80088f2:	4622      	mov	r2, r4
 80088f4:	4631      	mov	r1, r6
 80088f6:	f105 0068 	add.w	r0, r5, #104	; 0x68
 80088fa:	f000 fab1 	bl	8008e60 <memcpy>
 80088fe:	2300      	movs	r3, #0
 8008900:	442c      	add	r4, r5
 8008902:	4628      	mov	r0, r5
 8008904:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8008908:	f7ff ffbb 	bl	8008882 <_ZSt19__throw_logic_errorPKc>
 800890c:	08009870 	.word	0x08009870

08008910 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8008910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008914:	af00      	add	r7, sp, #0
 8008916:	b084      	sub	sp, #16
 8008918:	466d      	mov	r5, sp
 800891a:	f105 040c 	add.w	r4, r5, #12
 800891e:	4623      	mov	r3, r4
 8008920:	f04f 0c0a 	mov.w	ip, #10
 8008924:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8008964 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8008928:	fbb2 f6fc 	udiv	r6, r2, ip
 800892c:	fb0c 2e16 	mls	lr, ip, r6, r2
 8008930:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8008934:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8008938:	4696      	mov	lr, r2
 800893a:	f1be 0f09 	cmp.w	lr, #9
 800893e:	4632      	mov	r2, r6
 8008940:	d8f2      	bhi.n	8008928 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8008942:	1ae4      	subs	r4, r4, r3
 8008944:	428c      	cmp	r4, r1
 8008946:	d809      	bhi.n	800895c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8008948:	f1c4 010c 	rsb	r1, r4, #12
 800894c:	4622      	mov	r2, r4
 800894e:	4429      	add	r1, r5
 8008950:	f000 fa86 	bl	8008e60 <memcpy>
 8008954:	4620      	mov	r0, r4
 8008956:	46bd      	mov	sp, r7
 8008958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800895c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008960:	e7f8      	b.n	8008954 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8008962:	bf00      	nop
 8008964:	080098d9 	.word	0x080098d9

08008968 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8008968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800896c:	4607      	mov	r7, r0
 800896e:	4615      	mov	r5, r2
 8008970:	4604      	mov	r4, r0
 8008972:	3901      	subs	r1, #1
 8008974:	eb00 0801 	add.w	r8, r0, r1
 8008978:	782a      	ldrb	r2, [r5, #0]
 800897a:	b362      	cbz	r2, 80089d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800897c:	4544      	cmp	r4, r8
 800897e:	d22e      	bcs.n	80089de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8008980:	2a25      	cmp	r2, #37	; 0x25
 8008982:	d107      	bne.n	8008994 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8008984:	786a      	ldrb	r2, [r5, #1]
 8008986:	2a73      	cmp	r2, #115	; 0x73
 8008988:	d009      	beq.n	800899e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800898a:	2a7a      	cmp	r2, #122	; 0x7a
 800898c:	d012      	beq.n	80089b4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800898e:	2a25      	cmp	r2, #37	; 0x25
 8008990:	d100      	bne.n	8008994 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8008992:	3501      	adds	r5, #1
 8008994:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008998:	f804 2b01 	strb.w	r2, [r4], #1
 800899c:	e7ec      	b.n	8008978 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800899e:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a2:	3a01      	subs	r2, #1
 80089a4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80089a8:	b1e9      	cbz	r1, 80089e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 80089aa:	4544      	cmp	r4, r8
 80089ac:	d017      	beq.n	80089de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80089ae:	f804 1b01 	strb.w	r1, [r4], #1
 80089b2:	e7f7      	b.n	80089a4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80089b4:	78aa      	ldrb	r2, [r5, #2]
 80089b6:	2a75      	cmp	r2, #117	; 0x75
 80089b8:	d1ec      	bne.n	8008994 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80089ba:	461e      	mov	r6, r3
 80089bc:	4620      	mov	r0, r4
 80089be:	f856 2b04 	ldr.w	r2, [r6], #4
 80089c2:	eba8 0104 	sub.w	r1, r8, r4
 80089c6:	f7ff ffa3 	bl	8008910 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	dd07      	ble.n	80089de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80089ce:	4633      	mov	r3, r6
 80089d0:	4404      	add	r4, r0
 80089d2:	3503      	adds	r5, #3
 80089d4:	e7d0      	b.n	8008978 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80089d6:	7022      	strb	r2, [r4, #0]
 80089d8:	1be0      	subs	r0, r4, r7
 80089da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089de:	4621      	mov	r1, r4
 80089e0:	4638      	mov	r0, r7
 80089e2:	f7ff ff6f 	bl	80088c4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80089e6:	3502      	adds	r5, #2
 80089e8:	e7c6      	b.n	8008978 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>

080089ea <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80089ea:	b10a      	cbz	r2, 80089f0 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80089ec:	f000 ba38 	b.w	8008e60 <memcpy>
 80089f0:	4770      	bx	lr

080089f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80089f2:	6001      	str	r1, [r0, #0]
 80089f4:	4770      	bx	lr

080089f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80089f6:	6800      	ldr	r0, [r0, #0]
 80089f8:	4770      	bx	lr

080089fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80089fa:	3008      	adds	r0, #8
 80089fc:	4770      	bx	lr

080089fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80089fe:	6081      	str	r1, [r0, #8]
 8008a00:	4770      	bx	lr

08008a02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8008a02:	2200      	movs	r2, #0
 8008a04:	6803      	ldr	r3, [r0, #0]
 8008a06:	6041      	str	r1, [r0, #4]
 8008a08:	545a      	strb	r2, [r3, r1]
 8008a0a:	4770      	bx	lr

08008a0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8008a0c:	b508      	push	{r3, lr}
 8008a0e:	680b      	ldr	r3, [r1, #0]
 8008a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a14:	d302      	bcc.n	8008a1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8008a16:	480d      	ldr	r0, [pc, #52]	; (8008a4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8008a18:	f7ff ff36 	bl	8008888 <_ZSt20__throw_length_errorPKc>
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d90b      	bls.n	8008a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008a20:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8008a24:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8008a28:	d206      	bcs.n	8008a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008a2a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008a2e:	bf2a      	itet	cs
 8008a30:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8008a34:	6008      	strcc	r0, [r1, #0]
 8008a36:	600b      	strcs	r3, [r1, #0]
 8008a38:	6808      	ldr	r0, [r1, #0]
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	d501      	bpl.n	8008a42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8008a3e:	f7ff ff1d 	bl	800887c <_ZSt17__throw_bad_allocv>
 8008a42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a46:	f000 b9a1 	b.w	8008d8c <_Znwj>
 8008a4a:	bf00      	nop
 8008a4c:	080098e4 	.word	0x080098e4

08008a50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008a50:	4603      	mov	r3, r0
 8008a52:	f853 0b08 	ldr.w	r0, [r3], #8
 8008a56:	4298      	cmp	r0, r3
 8008a58:	d001      	beq.n	8008a5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8008a5a:	f000 b995 	b.w	8008d88 <_ZdlPv>
 8008a5e:	4770      	bx	lr

08008a60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8008a60:	b508      	push	{r3, lr}
 8008a62:	4603      	mov	r3, r0
 8008a64:	4608      	mov	r0, r1
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4298      	cmp	r0, r3
 8008a6c:	d903      	bls.n	8008a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	4801      	ldr	r0, [pc, #4]	; (8008a78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8008a72:	f7ff ff0c 	bl	800888e <_ZSt24__throw_out_of_range_fmtPKcz>
 8008a76:	bd08      	pop	{r3, pc}
 8008a78:	080098fc 	.word	0x080098fc

08008a7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8008a7c:	6840      	ldr	r0, [r0, #4]
 8008a7e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8008a82:	3901      	subs	r1, #1
 8008a84:	1a09      	subs	r1, r1, r0
 8008a86:	4291      	cmp	r1, r2
 8008a88:	b508      	push	{r3, lr}
 8008a8a:	d202      	bcs.n	8008a92 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7ff fefb 	bl	8008888 <_ZSt20__throw_length_errorPKc>
 8008a92:	bd08      	pop	{r3, pc}

08008a94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8008a94:	6803      	ldr	r3, [r0, #0]
 8008a96:	428b      	cmp	r3, r1
 8008a98:	d806      	bhi.n	8008aa8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8008a9a:	6840      	ldr	r0, [r0, #4]
 8008a9c:	4418      	add	r0, r3
 8008a9e:	4281      	cmp	r1, r0
 8008aa0:	bf94      	ite	ls
 8008aa2:	2000      	movls	r0, #0
 8008aa4:	2001      	movhi	r0, #1
 8008aa6:	4770      	bx	lr
 8008aa8:	2001      	movs	r0, #1
 8008aaa:	4770      	bx	lr

08008aac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8008aac:	2a01      	cmp	r2, #1
 8008aae:	b510      	push	{r4, lr}
 8008ab0:	d102      	bne.n	8008ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8008ab2:	780a      	ldrb	r2, [r1, #0]
 8008ab4:	7002      	strb	r2, [r0, #0]
 8008ab6:	bd10      	pop	{r4, pc}
 8008ab8:	f7ff ff97 	bl	80089ea <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8008abc:	e7fb      	b.n	8008ab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08008abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8008abe:	2a01      	cmp	r2, #1
 8008ac0:	b430      	push	{r4, r5}
 8008ac2:	d103      	bne.n	8008acc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8008ac4:	780b      	ldrb	r3, [r1, #0]
 8008ac6:	7003      	strb	r3, [r0, #0]
 8008ac8:	bc30      	pop	{r4, r5}
 8008aca:	4770      	bx	lr
 8008acc:	2a00      	cmp	r2, #0
 8008ace:	d0fb      	beq.n	8008ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8008ad0:	bc30      	pop	{r4, r5}
 8008ad2:	f000 b9d3 	b.w	8008e7c <memmove>

08008ad6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8008ad6:	b508      	push	{r3, lr}
 8008ad8:	1a52      	subs	r2, r2, r1
 8008ada:	f7ff ffe7 	bl	8008aac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008ade:	bd08      	pop	{r3, pc}

08008ae0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8008ae0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008ae6:	461f      	mov	r7, r3
 8008ae8:	6843      	ldr	r3, [r0, #4]
 8008aea:	eb01 0802 	add.w	r8, r1, r2
 8008aee:	1ab2      	subs	r2, r6, r2
 8008af0:	441a      	add	r2, r3
 8008af2:	eba3 0908 	sub.w	r9, r3, r8
 8008af6:	4603      	mov	r3, r0
 8008af8:	9201      	str	r2, [sp, #4]
 8008afa:	f853 2b08 	ldr.w	r2, [r3], #8
 8008afe:	460d      	mov	r5, r1
 8008b00:	429a      	cmp	r2, r3
 8008b02:	bf0c      	ite	eq
 8008b04:	220f      	moveq	r2, #15
 8008b06:	6882      	ldrne	r2, [r0, #8]
 8008b08:	a901      	add	r1, sp, #4
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	f7ff ff7e 	bl	8008a0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008b10:	4682      	mov	sl, r0
 8008b12:	b11d      	cbz	r5, 8008b1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3c>
 8008b14:	462a      	mov	r2, r5
 8008b16:	6821      	ldr	r1, [r4, #0]
 8008b18:	f7ff ffc8 	bl	8008aac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008b1c:	b137      	cbz	r7, 8008b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8008b1e:	b12e      	cbz	r6, 8008b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8008b20:	4632      	mov	r2, r6
 8008b22:	4639      	mov	r1, r7
 8008b24:	eb0a 0005 	add.w	r0, sl, r5
 8008b28:	f7ff ffc0 	bl	8008aac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008b2c:	f1b9 0f00 	cmp.w	r9, #0
 8008b30:	d007      	beq.n	8008b42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x62>
 8008b32:	6821      	ldr	r1, [r4, #0]
 8008b34:	4435      	add	r5, r6
 8008b36:	464a      	mov	r2, r9
 8008b38:	4441      	add	r1, r8
 8008b3a:	eb0a 0005 	add.w	r0, sl, r5
 8008b3e:	f7ff ffb5 	bl	8008aac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008b42:	4620      	mov	r0, r4
 8008b44:	f7ff ff84 	bl	8008a50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008b48:	9b01      	ldr	r3, [sp, #4]
 8008b4a:	f8c4 a000 	str.w	sl, [r4]
 8008b4e:	60a3      	str	r3, [r4, #8]
 8008b50:	b002      	add	sp, #8
 8008b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008b56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8008b56:	b570      	push	{r4, r5, r6, lr}
 8008b58:	4604      	mov	r4, r0
 8008b5a:	460e      	mov	r6, r1
 8008b5c:	3008      	adds	r0, #8
 8008b5e:	6020      	str	r0, [r4, #0]
 8008b60:	f856 3b08 	ldr.w	r3, [r6], #8
 8008b64:	460d      	mov	r5, r1
 8008b66:	429e      	cmp	r6, r3
 8008b68:	d10b      	bne.n	8008b82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8008b6a:	2210      	movs	r2, #16
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	f7ff ff3c 	bl	80089ea <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8008b72:	686b      	ldr	r3, [r5, #4]
 8008b74:	4620      	mov	r0, r4
 8008b76:	6063      	str	r3, [r4, #4]
 8008b78:	2300      	movs	r3, #0
 8008b7a:	602e      	str	r6, [r5, #0]
 8008b7c:	606b      	str	r3, [r5, #4]
 8008b7e:	722b      	strb	r3, [r5, #8]
 8008b80:	bd70      	pop	{r4, r5, r6, pc}
 8008b82:	6023      	str	r3, [r4, #0]
 8008b84:	688b      	ldr	r3, [r1, #8]
 8008b86:	60a3      	str	r3, [r4, #8]
 8008b88:	e7f3      	b.n	8008b72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08008b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8008b8a:	b510      	push	{r4, lr}
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	f7ff ff5f 	bl	8008a50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008b92:	4620      	mov	r0, r4
 8008b94:	bd10      	pop	{r4, pc}

08008b96 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8008b96:	6840      	ldr	r0, [r0, #4]
 8008b98:	4770      	bx	lr

08008b9a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f853 2b08 	ldr.w	r2, [r3], #8
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	bf14      	ite	ne
 8008ba4:	6880      	ldrne	r0, [r0, #8]
 8008ba6:	200f      	moveq	r0, #15
 8008ba8:	4770      	bx	lr
	...

08008bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8008bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb0:	4614      	mov	r4, r2
 8008bb2:	4680      	mov	r8, r0
 8008bb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bb6:	4689      	mov	r9, r1
 8008bb8:	462a      	mov	r2, r5
 8008bba:	461f      	mov	r7, r3
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	4b38      	ldr	r3, [pc, #224]	; (8008ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 8008bc0:	f7ff ff5c 	bl	8008a7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8008bc4:	4642      	mov	r2, r8
 8008bc6:	f852 6b08 	ldr.w	r6, [r2], #8
 8008bca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008bce:	4296      	cmp	r6, r2
 8008bd0:	bf0c      	ite	eq
 8008bd2:	220f      	moveq	r2, #15
 8008bd4:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8008bd8:	eba5 0b04 	sub.w	fp, r5, r4
 8008bdc:	eb03 0a0b 	add.w	sl, r3, fp
 8008be0:	4552      	cmp	r2, sl
 8008be2:	d351      	bcc.n	8008c88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8008be4:	444e      	add	r6, r9
 8008be6:	4639      	mov	r1, r7
 8008be8:	44a1      	add	r9, r4
 8008bea:	4640      	mov	r0, r8
 8008bec:	eba3 0909 	sub.w	r9, r3, r9
 8008bf0:	f7ff ff50 	bl	8008a94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8008bf4:	b180      	cbz	r0, 8008c18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 8008bf6:	f1b9 0f00 	cmp.w	r9, #0
 8008bfa:	d006      	beq.n	8008c0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8008bfc:	42ac      	cmp	r4, r5
 8008bfe:	d004      	beq.n	8008c0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8008c00:	464a      	mov	r2, r9
 8008c02:	1931      	adds	r1, r6, r4
 8008c04:	1970      	adds	r0, r6, r5
 8008c06:	f7ff ff5a 	bl	8008abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008c0a:	b315      	cbz	r5, 8008c52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8008c0c:	462a      	mov	r2, r5
 8008c0e:	4639      	mov	r1, r7
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7ff ff4b 	bl	8008aac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008c16:	e01c      	b.n	8008c52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8008c18:	b135      	cbz	r5, 8008c28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8008c1a:	42ac      	cmp	r4, r5
 8008c1c:	d33c      	bcc.n	8008c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8008c1e:	462a      	mov	r2, r5
 8008c20:	4639      	mov	r1, r7
 8008c22:	4630      	mov	r0, r6
 8008c24:	f7ff ff4b 	bl	8008abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008c28:	f1b9 0f00 	cmp.w	r9, #0
 8008c2c:	d011      	beq.n	8008c52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8008c2e:	42ac      	cmp	r4, r5
 8008c30:	d00f      	beq.n	8008c52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8008c32:	464a      	mov	r2, r9
 8008c34:	1931      	adds	r1, r6, r4
 8008c36:	1970      	adds	r0, r6, r5
 8008c38:	f7ff ff41 	bl	8008abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008c3c:	42ac      	cmp	r4, r5
 8008c3e:	d208      	bcs.n	8008c52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8008c40:	4434      	add	r4, r6
 8008c42:	197b      	adds	r3, r7, r5
 8008c44:	429c      	cmp	r4, r3
 8008c46:	d30f      	bcc.n	8008c68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 8008c48:	462a      	mov	r2, r5
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f7ff ff36 	bl	8008abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008c52:	2200      	movs	r2, #0
 8008c54:	4640      	mov	r0, r8
 8008c56:	f8d8 3000 	ldr.w	r3, [r8]
 8008c5a:	f8c8 a004 	str.w	sl, [r8, #4]
 8008c5e:	f803 200a 	strb.w	r2, [r3, sl]
 8008c62:	b003      	add	sp, #12
 8008c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c68:	42bc      	cmp	r4, r7
 8008c6a:	d803      	bhi.n	8008c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8008c6c:	462a      	mov	r2, r5
 8008c6e:	eb07 010b 	add.w	r1, r7, fp
 8008c72:	e7cd      	b.n	8008c10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8008c74:	1be4      	subs	r4, r4, r7
 8008c76:	4622      	mov	r2, r4
 8008c78:	4639      	mov	r1, r7
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f7ff ff1f 	bl	8008abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008c80:	1b2a      	subs	r2, r5, r4
 8008c82:	1971      	adds	r1, r6, r5
 8008c84:	1930      	adds	r0, r6, r4
 8008c86:	e7c4      	b.n	8008c12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8008c88:	463b      	mov	r3, r7
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	4649      	mov	r1, r9
 8008c8e:	4640      	mov	r0, r8
 8008c90:	9500      	str	r5, [sp, #0]
 8008c92:	f7ff ff25 	bl	8008ae0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8008c96:	e7dc      	b.n	8008c52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8008c98:	f1b9 0f00 	cmp.w	r9, #0
 8008c9c:	d0d0      	beq.n	8008c40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8008c9e:	e7c8      	b.n	8008c32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8008ca0:	08009949 	.word	0x08009949

08008ca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8008ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	460f      	mov	r7, r1
 8008caa:	4615      	mov	r5, r2
 8008cac:	4a08      	ldr	r2, [pc, #32]	; (8008cd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8008cae:	461e      	mov	r6, r3
 8008cb0:	f7ff fed6 	bl	8008a60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8008cb4:	6862      	ldr	r2, [r4, #4]
 8008cb6:	9b08      	ldr	r3, [sp, #32]
 8008cb8:	1bd2      	subs	r2, r2, r7
 8008cba:	42aa      	cmp	r2, r5
 8008cbc:	4601      	mov	r1, r0
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	bf28      	it	cs
 8008cc2:	462a      	movcs	r2, r5
 8008cc4:	4633      	mov	r3, r6
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f7ff ff70 	bl	8008bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8008ccc:	b003      	add	sp, #12
 8008cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cd0:	08009933 	.word	0x08009933

08008cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 8008cd4:	b507      	push	{r0, r1, r2, lr}
 8008cd6:	6853      	ldr	r3, [r2, #4]
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	6813      	ldr	r3, [r2, #0]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f7ff ffe1 	bl	8008ca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8008ce2:	b003      	add	sp, #12
 8008ce4:	f85d fb04 	ldr.w	pc, [sp], #4

08008ce8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8008ce8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cea:	4605      	mov	r5, r0
 8008cec:	4610      	mov	r0, r2
 8008cee:	4614      	mov	r4, r2
 8008cf0:	460e      	mov	r6, r1
 8008cf2:	f7f7 fa2b 	bl	800014c <strlen>
 8008cf6:	4623      	mov	r3, r4
 8008cf8:	9000      	str	r0, [sp, #0]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f7ff ffd0 	bl	8008ca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8008d04:	b002      	add	sp, #8
 8008d06:	bd70      	pop	{r4, r5, r6, pc}

08008d08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8008d08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	4623      	mov	r3, r4
 8008d0e:	f853 6b08 	ldr.w	r6, [r3], #8
 8008d12:	6840      	ldr	r0, [r0, #4]
 8008d14:	429e      	cmp	r6, r3
 8008d16:	bf0c      	ite	eq
 8008d18:	230f      	moveq	r3, #15
 8008d1a:	68a3      	ldrne	r3, [r4, #8]
 8008d1c:	1885      	adds	r5, r0, r2
 8008d1e:	429d      	cmp	r5, r3
 8008d20:	d80a      	bhi.n	8008d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 8008d22:	b112      	cbz	r2, 8008d2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 8008d24:	4430      	add	r0, r6
 8008d26:	f7ff fec1 	bl	8008aac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	6065      	str	r5, [r4, #4]
 8008d32:	555a      	strb	r2, [r3, r5]
 8008d34:	b002      	add	sp, #8
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	460b      	mov	r3, r1
 8008d3a:	9200      	str	r2, [sp, #0]
 8008d3c:	4601      	mov	r1, r0
 8008d3e:	2200      	movs	r2, #0
 8008d40:	4620      	mov	r0, r4
 8008d42:	f7ff fecd 	bl	8008ae0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8008d46:	e7f0      	b.n	8008d2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

08008d48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8008d48:	b508      	push	{r3, lr}
 8008d4a:	e9d1 1200 	ldrd	r1, r2, [r1]
 8008d4e:	f7ff ffdb 	bl	8008d08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8008d52:	bd08      	pop	{r3, pc}

08008d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	4604      	mov	r4, r0
 8008d58:	4608      	mov	r0, r1
 8008d5a:	460d      	mov	r5, r1
 8008d5c:	f7f7 f9f6 	bl	800014c <strlen>
 8008d60:	4606      	mov	r6, r0
 8008d62:	4602      	mov	r2, r0
 8008d64:	2100      	movs	r1, #0
 8008d66:	4620      	mov	r0, r4
 8008d68:	4b04      	ldr	r3, [pc, #16]	; (8008d7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8008d6a:	f7ff fe87 	bl	8008a7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8008d6e:	4632      	mov	r2, r6
 8008d70:	4629      	mov	r1, r5
 8008d72:	4620      	mov	r0, r4
 8008d74:	f7ff ffc8 	bl	8008d08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8008d78:	bd70      	pop	{r4, r5, r6, pc}
 8008d7a:	bf00      	nop
 8008d7c:	08009962 	.word	0x08009962

08008d80 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8008d80:	6800      	ldr	r0, [r0, #0]
 8008d82:	4770      	bx	lr

08008d84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8008d84:	6001      	str	r1, [r0, #0]
 8008d86:	4770      	bx	lr

08008d88 <_ZdlPv>:
 8008d88:	f000 b854 	b.w	8008e34 <free>

08008d8c <_Znwj>:
 8008d8c:	2801      	cmp	r0, #1
 8008d8e:	bf38      	it	cc
 8008d90:	2001      	movcc	r0, #1
 8008d92:	b510      	push	{r4, lr}
 8008d94:	4604      	mov	r4, r0
 8008d96:	4620      	mov	r0, r4
 8008d98:	f000 f844 	bl	8008e24 <malloc>
 8008d9c:	b930      	cbnz	r0, 8008dac <_Znwj+0x20>
 8008d9e:	f000 f807 	bl	8008db0 <_ZSt15get_new_handlerv>
 8008da2:	b908      	cbnz	r0, 8008da8 <_Znwj+0x1c>
 8008da4:	f000 f80c 	bl	8008dc0 <abort>
 8008da8:	4780      	blx	r0
 8008daa:	e7f4      	b.n	8008d96 <_Znwj+0xa>
 8008dac:	bd10      	pop	{r4, pc}
	...

08008db0 <_ZSt15get_new_handlerv>:
 8008db0:	4b02      	ldr	r3, [pc, #8]	; (8008dbc <_ZSt15get_new_handlerv+0xc>)
 8008db2:	6818      	ldr	r0, [r3, #0]
 8008db4:	f3bf 8f5b 	dmb	ish
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	20000500 	.word	0x20000500

08008dc0 <abort>:
 8008dc0:	2006      	movs	r0, #6
 8008dc2:	b508      	push	{r3, lr}
 8008dc4:	f000 f95a 	bl	800907c <raise>
 8008dc8:	2001      	movs	r0, #1
 8008dca:	f7f8 f98e 	bl	80010ea <_exit>
	...

08008dd0 <__errno>:
 8008dd0:	4b01      	ldr	r3, [pc, #4]	; (8008dd8 <__errno+0x8>)
 8008dd2:	6818      	ldr	r0, [r3, #0]
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	2000017c 	.word	0x2000017c

08008ddc <__libc_init_array>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	2600      	movs	r6, #0
 8008de0:	4d0c      	ldr	r5, [pc, #48]	; (8008e14 <__libc_init_array+0x38>)
 8008de2:	4c0d      	ldr	r4, [pc, #52]	; (8008e18 <__libc_init_array+0x3c>)
 8008de4:	1b64      	subs	r4, r4, r5
 8008de6:	10a4      	asrs	r4, r4, #2
 8008de8:	42a6      	cmp	r6, r4
 8008dea:	d109      	bne.n	8008e00 <__libc_init_array+0x24>
 8008dec:	f000 fcca 	bl	8009784 <_init>
 8008df0:	2600      	movs	r6, #0
 8008df2:	4d0a      	ldr	r5, [pc, #40]	; (8008e1c <__libc_init_array+0x40>)
 8008df4:	4c0a      	ldr	r4, [pc, #40]	; (8008e20 <__libc_init_array+0x44>)
 8008df6:	1b64      	subs	r4, r4, r5
 8008df8:	10a4      	asrs	r4, r4, #2
 8008dfa:	42a6      	cmp	r6, r4
 8008dfc:	d105      	bne.n	8008e0a <__libc_init_array+0x2e>
 8008dfe:	bd70      	pop	{r4, r5, r6, pc}
 8008e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e04:	4798      	blx	r3
 8008e06:	3601      	adds	r6, #1
 8008e08:	e7ee      	b.n	8008de8 <__libc_init_array+0xc>
 8008e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e0e:	4798      	blx	r3
 8008e10:	3601      	adds	r6, #1
 8008e12:	e7f2      	b.n	8008dfa <__libc_init_array+0x1e>
 8008e14:	080099ac 	.word	0x080099ac
 8008e18:	080099ac 	.word	0x080099ac
 8008e1c:	080099ac 	.word	0x080099ac
 8008e20:	080099b8 	.word	0x080099b8

08008e24 <malloc>:
 8008e24:	4b02      	ldr	r3, [pc, #8]	; (8008e30 <malloc+0xc>)
 8008e26:	4601      	mov	r1, r0
 8008e28:	6818      	ldr	r0, [r3, #0]
 8008e2a:	f000 b895 	b.w	8008f58 <_malloc_r>
 8008e2e:	bf00      	nop
 8008e30:	2000017c 	.word	0x2000017c

08008e34 <free>:
 8008e34:	4b02      	ldr	r3, [pc, #8]	; (8008e40 <free+0xc>)
 8008e36:	4601      	mov	r1, r0
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	f000 b841 	b.w	8008ec0 <_free_r>
 8008e3e:	bf00      	nop
 8008e40:	2000017c 	.word	0x2000017c

08008e44 <memchr>:
 8008e44:	4603      	mov	r3, r0
 8008e46:	b510      	push	{r4, lr}
 8008e48:	b2c9      	uxtb	r1, r1
 8008e4a:	4402      	add	r2, r0
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	d101      	bne.n	8008e56 <memchr+0x12>
 8008e52:	2000      	movs	r0, #0
 8008e54:	e003      	b.n	8008e5e <memchr+0x1a>
 8008e56:	7804      	ldrb	r4, [r0, #0]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	428c      	cmp	r4, r1
 8008e5c:	d1f6      	bne.n	8008e4c <memchr+0x8>
 8008e5e:	bd10      	pop	{r4, pc}

08008e60 <memcpy>:
 8008e60:	440a      	add	r2, r1
 8008e62:	4291      	cmp	r1, r2
 8008e64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e68:	d100      	bne.n	8008e6c <memcpy+0xc>
 8008e6a:	4770      	bx	lr
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e72:	4291      	cmp	r1, r2
 8008e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e78:	d1f9      	bne.n	8008e6e <memcpy+0xe>
 8008e7a:	bd10      	pop	{r4, pc}

08008e7c <memmove>:
 8008e7c:	4288      	cmp	r0, r1
 8008e7e:	b510      	push	{r4, lr}
 8008e80:	eb01 0402 	add.w	r4, r1, r2
 8008e84:	d902      	bls.n	8008e8c <memmove+0x10>
 8008e86:	4284      	cmp	r4, r0
 8008e88:	4623      	mov	r3, r4
 8008e8a:	d807      	bhi.n	8008e9c <memmove+0x20>
 8008e8c:	1e43      	subs	r3, r0, #1
 8008e8e:	42a1      	cmp	r1, r4
 8008e90:	d008      	beq.n	8008ea4 <memmove+0x28>
 8008e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e9a:	e7f8      	b.n	8008e8e <memmove+0x12>
 8008e9c:	4601      	mov	r1, r0
 8008e9e:	4402      	add	r2, r0
 8008ea0:	428a      	cmp	r2, r1
 8008ea2:	d100      	bne.n	8008ea6 <memmove+0x2a>
 8008ea4:	bd10      	pop	{r4, pc}
 8008ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eae:	e7f7      	b.n	8008ea0 <memmove+0x24>

08008eb0 <memset>:
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	4402      	add	r2, r0
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d100      	bne.n	8008eba <memset+0xa>
 8008eb8:	4770      	bx	lr
 8008eba:	f803 1b01 	strb.w	r1, [r3], #1
 8008ebe:	e7f9      	b.n	8008eb4 <memset+0x4>

08008ec0 <_free_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	2900      	cmp	r1, #0
 8008ec6:	d043      	beq.n	8008f50 <_free_r+0x90>
 8008ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ecc:	1f0c      	subs	r4, r1, #4
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	bfb8      	it	lt
 8008ed2:	18e4      	addlt	r4, r4, r3
 8008ed4:	f000 f928 	bl	8009128 <__malloc_lock>
 8008ed8:	4a1e      	ldr	r2, [pc, #120]	; (8008f54 <_free_r+0x94>)
 8008eda:	6813      	ldr	r3, [r2, #0]
 8008edc:	4610      	mov	r0, r2
 8008ede:	b933      	cbnz	r3, 8008eee <_free_r+0x2e>
 8008ee0:	6063      	str	r3, [r4, #4]
 8008ee2:	6014      	str	r4, [r2, #0]
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eea:	f000 b923 	b.w	8009134 <__malloc_unlock>
 8008eee:	42a3      	cmp	r3, r4
 8008ef0:	d90a      	bls.n	8008f08 <_free_r+0x48>
 8008ef2:	6821      	ldr	r1, [r4, #0]
 8008ef4:	1862      	adds	r2, r4, r1
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	bf01      	itttt	eq
 8008efa:	681a      	ldreq	r2, [r3, #0]
 8008efc:	685b      	ldreq	r3, [r3, #4]
 8008efe:	1852      	addeq	r2, r2, r1
 8008f00:	6022      	streq	r2, [r4, #0]
 8008f02:	6063      	str	r3, [r4, #4]
 8008f04:	6004      	str	r4, [r0, #0]
 8008f06:	e7ed      	b.n	8008ee4 <_free_r+0x24>
 8008f08:	461a      	mov	r2, r3
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	b10b      	cbz	r3, 8008f12 <_free_r+0x52>
 8008f0e:	42a3      	cmp	r3, r4
 8008f10:	d9fa      	bls.n	8008f08 <_free_r+0x48>
 8008f12:	6811      	ldr	r1, [r2, #0]
 8008f14:	1850      	adds	r0, r2, r1
 8008f16:	42a0      	cmp	r0, r4
 8008f18:	d10b      	bne.n	8008f32 <_free_r+0x72>
 8008f1a:	6820      	ldr	r0, [r4, #0]
 8008f1c:	4401      	add	r1, r0
 8008f1e:	1850      	adds	r0, r2, r1
 8008f20:	4283      	cmp	r3, r0
 8008f22:	6011      	str	r1, [r2, #0]
 8008f24:	d1de      	bne.n	8008ee4 <_free_r+0x24>
 8008f26:	6818      	ldr	r0, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	4401      	add	r1, r0
 8008f2c:	6011      	str	r1, [r2, #0]
 8008f2e:	6053      	str	r3, [r2, #4]
 8008f30:	e7d8      	b.n	8008ee4 <_free_r+0x24>
 8008f32:	d902      	bls.n	8008f3a <_free_r+0x7a>
 8008f34:	230c      	movs	r3, #12
 8008f36:	602b      	str	r3, [r5, #0]
 8008f38:	e7d4      	b.n	8008ee4 <_free_r+0x24>
 8008f3a:	6820      	ldr	r0, [r4, #0]
 8008f3c:	1821      	adds	r1, r4, r0
 8008f3e:	428b      	cmp	r3, r1
 8008f40:	bf01      	itttt	eq
 8008f42:	6819      	ldreq	r1, [r3, #0]
 8008f44:	685b      	ldreq	r3, [r3, #4]
 8008f46:	1809      	addeq	r1, r1, r0
 8008f48:	6021      	streq	r1, [r4, #0]
 8008f4a:	6063      	str	r3, [r4, #4]
 8008f4c:	6054      	str	r4, [r2, #4]
 8008f4e:	e7c9      	b.n	8008ee4 <_free_r+0x24>
 8008f50:	bd38      	pop	{r3, r4, r5, pc}
 8008f52:	bf00      	nop
 8008f54:	20000504 	.word	0x20000504

08008f58 <_malloc_r>:
 8008f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5a:	1ccd      	adds	r5, r1, #3
 8008f5c:	f025 0503 	bic.w	r5, r5, #3
 8008f60:	3508      	adds	r5, #8
 8008f62:	2d0c      	cmp	r5, #12
 8008f64:	bf38      	it	cc
 8008f66:	250c      	movcc	r5, #12
 8008f68:	2d00      	cmp	r5, #0
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	db01      	blt.n	8008f72 <_malloc_r+0x1a>
 8008f6e:	42a9      	cmp	r1, r5
 8008f70:	d903      	bls.n	8008f7a <_malloc_r+0x22>
 8008f72:	230c      	movs	r3, #12
 8008f74:	6033      	str	r3, [r6, #0]
 8008f76:	2000      	movs	r0, #0
 8008f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f7a:	f000 f8d5 	bl	8009128 <__malloc_lock>
 8008f7e:	4921      	ldr	r1, [pc, #132]	; (8009004 <_malloc_r+0xac>)
 8008f80:	680a      	ldr	r2, [r1, #0]
 8008f82:	4614      	mov	r4, r2
 8008f84:	b99c      	cbnz	r4, 8008fae <_malloc_r+0x56>
 8008f86:	4f20      	ldr	r7, [pc, #128]	; (8009008 <_malloc_r+0xb0>)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	b923      	cbnz	r3, 8008f96 <_malloc_r+0x3e>
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f000 f83c 	bl	800900c <_sbrk_r>
 8008f94:	6038      	str	r0, [r7, #0]
 8008f96:	4629      	mov	r1, r5
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f000 f837 	bl	800900c <_sbrk_r>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	d123      	bne.n	8008fea <_malloc_r+0x92>
 8008fa2:	230c      	movs	r3, #12
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	6033      	str	r3, [r6, #0]
 8008fa8:	f000 f8c4 	bl	8009134 <__malloc_unlock>
 8008fac:	e7e3      	b.n	8008f76 <_malloc_r+0x1e>
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	1b5b      	subs	r3, r3, r5
 8008fb2:	d417      	bmi.n	8008fe4 <_malloc_r+0x8c>
 8008fb4:	2b0b      	cmp	r3, #11
 8008fb6:	d903      	bls.n	8008fc0 <_malloc_r+0x68>
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	441c      	add	r4, r3
 8008fbc:	6025      	str	r5, [r4, #0]
 8008fbe:	e004      	b.n	8008fca <_malloc_r+0x72>
 8008fc0:	6863      	ldr	r3, [r4, #4]
 8008fc2:	42a2      	cmp	r2, r4
 8008fc4:	bf0c      	ite	eq
 8008fc6:	600b      	streq	r3, [r1, #0]
 8008fc8:	6053      	strne	r3, [r2, #4]
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f000 f8b2 	bl	8009134 <__malloc_unlock>
 8008fd0:	f104 000b 	add.w	r0, r4, #11
 8008fd4:	1d23      	adds	r3, r4, #4
 8008fd6:	f020 0007 	bic.w	r0, r0, #7
 8008fda:	1ac2      	subs	r2, r0, r3
 8008fdc:	d0cc      	beq.n	8008f78 <_malloc_r+0x20>
 8008fde:	1a1b      	subs	r3, r3, r0
 8008fe0:	50a3      	str	r3, [r4, r2]
 8008fe2:	e7c9      	b.n	8008f78 <_malloc_r+0x20>
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	6864      	ldr	r4, [r4, #4]
 8008fe8:	e7cc      	b.n	8008f84 <_malloc_r+0x2c>
 8008fea:	1cc4      	adds	r4, r0, #3
 8008fec:	f024 0403 	bic.w	r4, r4, #3
 8008ff0:	42a0      	cmp	r0, r4
 8008ff2:	d0e3      	beq.n	8008fbc <_malloc_r+0x64>
 8008ff4:	1a21      	subs	r1, r4, r0
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f000 f808 	bl	800900c <_sbrk_r>
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d1dd      	bne.n	8008fbc <_malloc_r+0x64>
 8009000:	e7cf      	b.n	8008fa2 <_malloc_r+0x4a>
 8009002:	bf00      	nop
 8009004:	20000504 	.word	0x20000504
 8009008:	20000508 	.word	0x20000508

0800900c <_sbrk_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	2300      	movs	r3, #0
 8009010:	4d05      	ldr	r5, [pc, #20]	; (8009028 <_sbrk_r+0x1c>)
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	602b      	str	r3, [r5, #0]
 8009018:	f7f8 f872 	bl	8001100 <_sbrk>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_sbrk_r+0x1a>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	b103      	cbz	r3, 8009026 <_sbrk_r+0x1a>
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	20001490 	.word	0x20001490

0800902c <_raise_r>:
 800902c:	291f      	cmp	r1, #31
 800902e:	b538      	push	{r3, r4, r5, lr}
 8009030:	4604      	mov	r4, r0
 8009032:	460d      	mov	r5, r1
 8009034:	d904      	bls.n	8009040 <_raise_r+0x14>
 8009036:	2316      	movs	r3, #22
 8009038:	6003      	str	r3, [r0, #0]
 800903a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009042:	b112      	cbz	r2, 800904a <_raise_r+0x1e>
 8009044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009048:	b94b      	cbnz	r3, 800905e <_raise_r+0x32>
 800904a:	4620      	mov	r0, r4
 800904c:	f000 f830 	bl	80090b0 <_getpid_r>
 8009050:	462a      	mov	r2, r5
 8009052:	4601      	mov	r1, r0
 8009054:	4620      	mov	r0, r4
 8009056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800905a:	f000 b817 	b.w	800908c <_kill_r>
 800905e:	2b01      	cmp	r3, #1
 8009060:	d00a      	beq.n	8009078 <_raise_r+0x4c>
 8009062:	1c59      	adds	r1, r3, #1
 8009064:	d103      	bne.n	800906e <_raise_r+0x42>
 8009066:	2316      	movs	r3, #22
 8009068:	6003      	str	r3, [r0, #0]
 800906a:	2001      	movs	r0, #1
 800906c:	e7e7      	b.n	800903e <_raise_r+0x12>
 800906e:	2400      	movs	r4, #0
 8009070:	4628      	mov	r0, r5
 8009072:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009076:	4798      	blx	r3
 8009078:	2000      	movs	r0, #0
 800907a:	e7e0      	b.n	800903e <_raise_r+0x12>

0800907c <raise>:
 800907c:	4b02      	ldr	r3, [pc, #8]	; (8009088 <raise+0xc>)
 800907e:	4601      	mov	r1, r0
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	f7ff bfd3 	b.w	800902c <_raise_r>
 8009086:	bf00      	nop
 8009088:	2000017c 	.word	0x2000017c

0800908c <_kill_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	2300      	movs	r3, #0
 8009090:	4d06      	ldr	r5, [pc, #24]	; (80090ac <_kill_r+0x20>)
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	4611      	mov	r1, r2
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	f7f8 f816 	bl	80010ca <_kill>
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	d102      	bne.n	80090a8 <_kill_r+0x1c>
 80090a2:	682b      	ldr	r3, [r5, #0]
 80090a4:	b103      	cbz	r3, 80090a8 <_kill_r+0x1c>
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	bd38      	pop	{r3, r4, r5, pc}
 80090aa:	bf00      	nop
 80090ac:	20001490 	.word	0x20001490

080090b0 <_getpid_r>:
 80090b0:	f7f8 b804 	b.w	80010bc <_getpid>

080090b4 <_vsniprintf_r>:
 80090b4:	b530      	push	{r4, r5, lr}
 80090b6:	1e14      	subs	r4, r2, #0
 80090b8:	4605      	mov	r5, r0
 80090ba:	b09b      	sub	sp, #108	; 0x6c
 80090bc:	4618      	mov	r0, r3
 80090be:	da05      	bge.n	80090cc <_vsniprintf_r+0x18>
 80090c0:	238b      	movs	r3, #139	; 0x8b
 80090c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	b01b      	add	sp, #108	; 0x6c
 80090ca:	bd30      	pop	{r4, r5, pc}
 80090cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80090d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80090d4:	bf0c      	ite	eq
 80090d6:	4623      	moveq	r3, r4
 80090d8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80090dc:	9302      	str	r3, [sp, #8]
 80090de:	9305      	str	r3, [sp, #20]
 80090e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090e4:	4602      	mov	r2, r0
 80090e6:	9100      	str	r1, [sp, #0]
 80090e8:	9104      	str	r1, [sp, #16]
 80090ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80090ee:	4669      	mov	r1, sp
 80090f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80090f2:	4628      	mov	r0, r5
 80090f4:	f000 f880 	bl	80091f8 <_svfiprintf_r>
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	bfbc      	itt	lt
 80090fc:	238b      	movlt	r3, #139	; 0x8b
 80090fe:	602b      	strlt	r3, [r5, #0]
 8009100:	2c00      	cmp	r4, #0
 8009102:	d0e1      	beq.n	80090c8 <_vsniprintf_r+0x14>
 8009104:	2200      	movs	r2, #0
 8009106:	9b00      	ldr	r3, [sp, #0]
 8009108:	701a      	strb	r2, [r3, #0]
 800910a:	e7dd      	b.n	80090c8 <_vsniprintf_r+0x14>

0800910c <vsniprintf>:
 800910c:	b507      	push	{r0, r1, r2, lr}
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	4613      	mov	r3, r2
 8009112:	460a      	mov	r2, r1
 8009114:	4601      	mov	r1, r0
 8009116:	4803      	ldr	r0, [pc, #12]	; (8009124 <vsniprintf+0x18>)
 8009118:	6800      	ldr	r0, [r0, #0]
 800911a:	f7ff ffcb 	bl	80090b4 <_vsniprintf_r>
 800911e:	b003      	add	sp, #12
 8009120:	f85d fb04 	ldr.w	pc, [sp], #4
 8009124:	2000017c 	.word	0x2000017c

08009128 <__malloc_lock>:
 8009128:	4801      	ldr	r0, [pc, #4]	; (8009130 <__malloc_lock+0x8>)
 800912a:	f000 bafb 	b.w	8009724 <__retarget_lock_acquire_recursive>
 800912e:	bf00      	nop
 8009130:	20001498 	.word	0x20001498

08009134 <__malloc_unlock>:
 8009134:	4801      	ldr	r0, [pc, #4]	; (800913c <__malloc_unlock+0x8>)
 8009136:	f000 baf6 	b.w	8009726 <__retarget_lock_release_recursive>
 800913a:	bf00      	nop
 800913c:	20001498 	.word	0x20001498

08009140 <__ssputs_r>:
 8009140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009144:	688e      	ldr	r6, [r1, #8]
 8009146:	4682      	mov	sl, r0
 8009148:	429e      	cmp	r6, r3
 800914a:	460c      	mov	r4, r1
 800914c:	4690      	mov	r8, r2
 800914e:	461f      	mov	r7, r3
 8009150:	d838      	bhi.n	80091c4 <__ssputs_r+0x84>
 8009152:	898a      	ldrh	r2, [r1, #12]
 8009154:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009158:	d032      	beq.n	80091c0 <__ssputs_r+0x80>
 800915a:	6825      	ldr	r5, [r4, #0]
 800915c:	6909      	ldr	r1, [r1, #16]
 800915e:	3301      	adds	r3, #1
 8009160:	eba5 0901 	sub.w	r9, r5, r1
 8009164:	6965      	ldr	r5, [r4, #20]
 8009166:	444b      	add	r3, r9
 8009168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800916c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009170:	106d      	asrs	r5, r5, #1
 8009172:	429d      	cmp	r5, r3
 8009174:	bf38      	it	cc
 8009176:	461d      	movcc	r5, r3
 8009178:	0553      	lsls	r3, r2, #21
 800917a:	d531      	bpl.n	80091e0 <__ssputs_r+0xa0>
 800917c:	4629      	mov	r1, r5
 800917e:	f7ff feeb 	bl	8008f58 <_malloc_r>
 8009182:	4606      	mov	r6, r0
 8009184:	b950      	cbnz	r0, 800919c <__ssputs_r+0x5c>
 8009186:	230c      	movs	r3, #12
 8009188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800918c:	f8ca 3000 	str.w	r3, [sl]
 8009190:	89a3      	ldrh	r3, [r4, #12]
 8009192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009196:	81a3      	strh	r3, [r4, #12]
 8009198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919c:	464a      	mov	r2, r9
 800919e:	6921      	ldr	r1, [r4, #16]
 80091a0:	f7ff fe5e 	bl	8008e60 <memcpy>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	6126      	str	r6, [r4, #16]
 80091b2:	444e      	add	r6, r9
 80091b4:	6026      	str	r6, [r4, #0]
 80091b6:	463e      	mov	r6, r7
 80091b8:	6165      	str	r5, [r4, #20]
 80091ba:	eba5 0509 	sub.w	r5, r5, r9
 80091be:	60a5      	str	r5, [r4, #8]
 80091c0:	42be      	cmp	r6, r7
 80091c2:	d900      	bls.n	80091c6 <__ssputs_r+0x86>
 80091c4:	463e      	mov	r6, r7
 80091c6:	4632      	mov	r2, r6
 80091c8:	4641      	mov	r1, r8
 80091ca:	6820      	ldr	r0, [r4, #0]
 80091cc:	f7ff fe56 	bl	8008e7c <memmove>
 80091d0:	68a3      	ldr	r3, [r4, #8]
 80091d2:	6822      	ldr	r2, [r4, #0]
 80091d4:	1b9b      	subs	r3, r3, r6
 80091d6:	4432      	add	r2, r6
 80091d8:	2000      	movs	r0, #0
 80091da:	60a3      	str	r3, [r4, #8]
 80091dc:	6022      	str	r2, [r4, #0]
 80091de:	e7db      	b.n	8009198 <__ssputs_r+0x58>
 80091e0:	462a      	mov	r2, r5
 80091e2:	f000 faa1 	bl	8009728 <_realloc_r>
 80091e6:	4606      	mov	r6, r0
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d1e1      	bne.n	80091b0 <__ssputs_r+0x70>
 80091ec:	4650      	mov	r0, sl
 80091ee:	6921      	ldr	r1, [r4, #16]
 80091f0:	f7ff fe66 	bl	8008ec0 <_free_r>
 80091f4:	e7c7      	b.n	8009186 <__ssputs_r+0x46>
	...

080091f8 <_svfiprintf_r>:
 80091f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fc:	4698      	mov	r8, r3
 80091fe:	898b      	ldrh	r3, [r1, #12]
 8009200:	4607      	mov	r7, r0
 8009202:	061b      	lsls	r3, r3, #24
 8009204:	460d      	mov	r5, r1
 8009206:	4614      	mov	r4, r2
 8009208:	b09d      	sub	sp, #116	; 0x74
 800920a:	d50e      	bpl.n	800922a <_svfiprintf_r+0x32>
 800920c:	690b      	ldr	r3, [r1, #16]
 800920e:	b963      	cbnz	r3, 800922a <_svfiprintf_r+0x32>
 8009210:	2140      	movs	r1, #64	; 0x40
 8009212:	f7ff fea1 	bl	8008f58 <_malloc_r>
 8009216:	6028      	str	r0, [r5, #0]
 8009218:	6128      	str	r0, [r5, #16]
 800921a:	b920      	cbnz	r0, 8009226 <_svfiprintf_r+0x2e>
 800921c:	230c      	movs	r3, #12
 800921e:	603b      	str	r3, [r7, #0]
 8009220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009224:	e0d1      	b.n	80093ca <_svfiprintf_r+0x1d2>
 8009226:	2340      	movs	r3, #64	; 0x40
 8009228:	616b      	str	r3, [r5, #20]
 800922a:	2300      	movs	r3, #0
 800922c:	9309      	str	r3, [sp, #36]	; 0x24
 800922e:	2320      	movs	r3, #32
 8009230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009234:	2330      	movs	r3, #48	; 0x30
 8009236:	f04f 0901 	mov.w	r9, #1
 800923a:	f8cd 800c 	str.w	r8, [sp, #12]
 800923e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093e4 <_svfiprintf_r+0x1ec>
 8009242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009246:	4623      	mov	r3, r4
 8009248:	469a      	mov	sl, r3
 800924a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800924e:	b10a      	cbz	r2, 8009254 <_svfiprintf_r+0x5c>
 8009250:	2a25      	cmp	r2, #37	; 0x25
 8009252:	d1f9      	bne.n	8009248 <_svfiprintf_r+0x50>
 8009254:	ebba 0b04 	subs.w	fp, sl, r4
 8009258:	d00b      	beq.n	8009272 <_svfiprintf_r+0x7a>
 800925a:	465b      	mov	r3, fp
 800925c:	4622      	mov	r2, r4
 800925e:	4629      	mov	r1, r5
 8009260:	4638      	mov	r0, r7
 8009262:	f7ff ff6d 	bl	8009140 <__ssputs_r>
 8009266:	3001      	adds	r0, #1
 8009268:	f000 80aa 	beq.w	80093c0 <_svfiprintf_r+0x1c8>
 800926c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800926e:	445a      	add	r2, fp
 8009270:	9209      	str	r2, [sp, #36]	; 0x24
 8009272:	f89a 3000 	ldrb.w	r3, [sl]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 80a2 	beq.w	80093c0 <_svfiprintf_r+0x1c8>
 800927c:	2300      	movs	r3, #0
 800927e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009286:	f10a 0a01 	add.w	sl, sl, #1
 800928a:	9304      	str	r3, [sp, #16]
 800928c:	9307      	str	r3, [sp, #28]
 800928e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009292:	931a      	str	r3, [sp, #104]	; 0x68
 8009294:	4654      	mov	r4, sl
 8009296:	2205      	movs	r2, #5
 8009298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800929c:	4851      	ldr	r0, [pc, #324]	; (80093e4 <_svfiprintf_r+0x1ec>)
 800929e:	f7ff fdd1 	bl	8008e44 <memchr>
 80092a2:	9a04      	ldr	r2, [sp, #16]
 80092a4:	b9d8      	cbnz	r0, 80092de <_svfiprintf_r+0xe6>
 80092a6:	06d0      	lsls	r0, r2, #27
 80092a8:	bf44      	itt	mi
 80092aa:	2320      	movmi	r3, #32
 80092ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092b0:	0711      	lsls	r1, r2, #28
 80092b2:	bf44      	itt	mi
 80092b4:	232b      	movmi	r3, #43	; 0x2b
 80092b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ba:	f89a 3000 	ldrb.w	r3, [sl]
 80092be:	2b2a      	cmp	r3, #42	; 0x2a
 80092c0:	d015      	beq.n	80092ee <_svfiprintf_r+0xf6>
 80092c2:	4654      	mov	r4, sl
 80092c4:	2000      	movs	r0, #0
 80092c6:	f04f 0c0a 	mov.w	ip, #10
 80092ca:	9a07      	ldr	r2, [sp, #28]
 80092cc:	4621      	mov	r1, r4
 80092ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092d2:	3b30      	subs	r3, #48	; 0x30
 80092d4:	2b09      	cmp	r3, #9
 80092d6:	d94e      	bls.n	8009376 <_svfiprintf_r+0x17e>
 80092d8:	b1b0      	cbz	r0, 8009308 <_svfiprintf_r+0x110>
 80092da:	9207      	str	r2, [sp, #28]
 80092dc:	e014      	b.n	8009308 <_svfiprintf_r+0x110>
 80092de:	eba0 0308 	sub.w	r3, r0, r8
 80092e2:	fa09 f303 	lsl.w	r3, r9, r3
 80092e6:	4313      	orrs	r3, r2
 80092e8:	46a2      	mov	sl, r4
 80092ea:	9304      	str	r3, [sp, #16]
 80092ec:	e7d2      	b.n	8009294 <_svfiprintf_r+0x9c>
 80092ee:	9b03      	ldr	r3, [sp, #12]
 80092f0:	1d19      	adds	r1, r3, #4
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	9103      	str	r1, [sp, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bfbb      	ittet	lt
 80092fa:	425b      	neglt	r3, r3
 80092fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009300:	9307      	strge	r3, [sp, #28]
 8009302:	9307      	strlt	r3, [sp, #28]
 8009304:	bfb8      	it	lt
 8009306:	9204      	strlt	r2, [sp, #16]
 8009308:	7823      	ldrb	r3, [r4, #0]
 800930a:	2b2e      	cmp	r3, #46	; 0x2e
 800930c:	d10c      	bne.n	8009328 <_svfiprintf_r+0x130>
 800930e:	7863      	ldrb	r3, [r4, #1]
 8009310:	2b2a      	cmp	r3, #42	; 0x2a
 8009312:	d135      	bne.n	8009380 <_svfiprintf_r+0x188>
 8009314:	9b03      	ldr	r3, [sp, #12]
 8009316:	3402      	adds	r4, #2
 8009318:	1d1a      	adds	r2, r3, #4
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	9203      	str	r2, [sp, #12]
 800931e:	2b00      	cmp	r3, #0
 8009320:	bfb8      	it	lt
 8009322:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009326:	9305      	str	r3, [sp, #20]
 8009328:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093f4 <_svfiprintf_r+0x1fc>
 800932c:	2203      	movs	r2, #3
 800932e:	4650      	mov	r0, sl
 8009330:	7821      	ldrb	r1, [r4, #0]
 8009332:	f7ff fd87 	bl	8008e44 <memchr>
 8009336:	b140      	cbz	r0, 800934a <_svfiprintf_r+0x152>
 8009338:	2340      	movs	r3, #64	; 0x40
 800933a:	eba0 000a 	sub.w	r0, r0, sl
 800933e:	fa03 f000 	lsl.w	r0, r3, r0
 8009342:	9b04      	ldr	r3, [sp, #16]
 8009344:	3401      	adds	r4, #1
 8009346:	4303      	orrs	r3, r0
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934e:	2206      	movs	r2, #6
 8009350:	4825      	ldr	r0, [pc, #148]	; (80093e8 <_svfiprintf_r+0x1f0>)
 8009352:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009356:	f7ff fd75 	bl	8008e44 <memchr>
 800935a:	2800      	cmp	r0, #0
 800935c:	d038      	beq.n	80093d0 <_svfiprintf_r+0x1d8>
 800935e:	4b23      	ldr	r3, [pc, #140]	; (80093ec <_svfiprintf_r+0x1f4>)
 8009360:	bb1b      	cbnz	r3, 80093aa <_svfiprintf_r+0x1b2>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	3307      	adds	r3, #7
 8009366:	f023 0307 	bic.w	r3, r3, #7
 800936a:	3308      	adds	r3, #8
 800936c:	9303      	str	r3, [sp, #12]
 800936e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009370:	4433      	add	r3, r6
 8009372:	9309      	str	r3, [sp, #36]	; 0x24
 8009374:	e767      	b.n	8009246 <_svfiprintf_r+0x4e>
 8009376:	460c      	mov	r4, r1
 8009378:	2001      	movs	r0, #1
 800937a:	fb0c 3202 	mla	r2, ip, r2, r3
 800937e:	e7a5      	b.n	80092cc <_svfiprintf_r+0xd4>
 8009380:	2300      	movs	r3, #0
 8009382:	f04f 0c0a 	mov.w	ip, #10
 8009386:	4619      	mov	r1, r3
 8009388:	3401      	adds	r4, #1
 800938a:	9305      	str	r3, [sp, #20]
 800938c:	4620      	mov	r0, r4
 800938e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009392:	3a30      	subs	r2, #48	; 0x30
 8009394:	2a09      	cmp	r2, #9
 8009396:	d903      	bls.n	80093a0 <_svfiprintf_r+0x1a8>
 8009398:	2b00      	cmp	r3, #0
 800939a:	d0c5      	beq.n	8009328 <_svfiprintf_r+0x130>
 800939c:	9105      	str	r1, [sp, #20]
 800939e:	e7c3      	b.n	8009328 <_svfiprintf_r+0x130>
 80093a0:	4604      	mov	r4, r0
 80093a2:	2301      	movs	r3, #1
 80093a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80093a8:	e7f0      	b.n	800938c <_svfiprintf_r+0x194>
 80093aa:	ab03      	add	r3, sp, #12
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	462a      	mov	r2, r5
 80093b0:	4638      	mov	r0, r7
 80093b2:	4b0f      	ldr	r3, [pc, #60]	; (80093f0 <_svfiprintf_r+0x1f8>)
 80093b4:	a904      	add	r1, sp, #16
 80093b6:	f3af 8000 	nop.w
 80093ba:	1c42      	adds	r2, r0, #1
 80093bc:	4606      	mov	r6, r0
 80093be:	d1d6      	bne.n	800936e <_svfiprintf_r+0x176>
 80093c0:	89ab      	ldrh	r3, [r5, #12]
 80093c2:	065b      	lsls	r3, r3, #25
 80093c4:	f53f af2c 	bmi.w	8009220 <_svfiprintf_r+0x28>
 80093c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093ca:	b01d      	add	sp, #116	; 0x74
 80093cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d0:	ab03      	add	r3, sp, #12
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	462a      	mov	r2, r5
 80093d6:	4638      	mov	r0, r7
 80093d8:	4b05      	ldr	r3, [pc, #20]	; (80093f0 <_svfiprintf_r+0x1f8>)
 80093da:	a904      	add	r1, sp, #16
 80093dc:	f000 f87c 	bl	80094d8 <_printf_i>
 80093e0:	e7eb      	b.n	80093ba <_svfiprintf_r+0x1c2>
 80093e2:	bf00      	nop
 80093e4:	08009977 	.word	0x08009977
 80093e8:	08009981 	.word	0x08009981
 80093ec:	00000000 	.word	0x00000000
 80093f0:	08009141 	.word	0x08009141
 80093f4:	0800997d 	.word	0x0800997d

080093f8 <_printf_common>:
 80093f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093fc:	4616      	mov	r6, r2
 80093fe:	4699      	mov	r9, r3
 8009400:	688a      	ldr	r2, [r1, #8]
 8009402:	690b      	ldr	r3, [r1, #16]
 8009404:	4607      	mov	r7, r0
 8009406:	4293      	cmp	r3, r2
 8009408:	bfb8      	it	lt
 800940a:	4613      	movlt	r3, r2
 800940c:	6033      	str	r3, [r6, #0]
 800940e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009412:	460c      	mov	r4, r1
 8009414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009418:	b10a      	cbz	r2, 800941e <_printf_common+0x26>
 800941a:	3301      	adds	r3, #1
 800941c:	6033      	str	r3, [r6, #0]
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	0699      	lsls	r1, r3, #26
 8009422:	bf42      	ittt	mi
 8009424:	6833      	ldrmi	r3, [r6, #0]
 8009426:	3302      	addmi	r3, #2
 8009428:	6033      	strmi	r3, [r6, #0]
 800942a:	6825      	ldr	r5, [r4, #0]
 800942c:	f015 0506 	ands.w	r5, r5, #6
 8009430:	d106      	bne.n	8009440 <_printf_common+0x48>
 8009432:	f104 0a19 	add.w	sl, r4, #25
 8009436:	68e3      	ldr	r3, [r4, #12]
 8009438:	6832      	ldr	r2, [r6, #0]
 800943a:	1a9b      	subs	r3, r3, r2
 800943c:	42ab      	cmp	r3, r5
 800943e:	dc28      	bgt.n	8009492 <_printf_common+0x9a>
 8009440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009444:	1e13      	subs	r3, r2, #0
 8009446:	6822      	ldr	r2, [r4, #0]
 8009448:	bf18      	it	ne
 800944a:	2301      	movne	r3, #1
 800944c:	0692      	lsls	r2, r2, #26
 800944e:	d42d      	bmi.n	80094ac <_printf_common+0xb4>
 8009450:	4649      	mov	r1, r9
 8009452:	4638      	mov	r0, r7
 8009454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009458:	47c0      	blx	r8
 800945a:	3001      	adds	r0, #1
 800945c:	d020      	beq.n	80094a0 <_printf_common+0xa8>
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	68e5      	ldr	r5, [r4, #12]
 8009462:	f003 0306 	and.w	r3, r3, #6
 8009466:	2b04      	cmp	r3, #4
 8009468:	bf18      	it	ne
 800946a:	2500      	movne	r5, #0
 800946c:	6832      	ldr	r2, [r6, #0]
 800946e:	f04f 0600 	mov.w	r6, #0
 8009472:	68a3      	ldr	r3, [r4, #8]
 8009474:	bf08      	it	eq
 8009476:	1aad      	subeq	r5, r5, r2
 8009478:	6922      	ldr	r2, [r4, #16]
 800947a:	bf08      	it	eq
 800947c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009480:	4293      	cmp	r3, r2
 8009482:	bfc4      	itt	gt
 8009484:	1a9b      	subgt	r3, r3, r2
 8009486:	18ed      	addgt	r5, r5, r3
 8009488:	341a      	adds	r4, #26
 800948a:	42b5      	cmp	r5, r6
 800948c:	d11a      	bne.n	80094c4 <_printf_common+0xcc>
 800948e:	2000      	movs	r0, #0
 8009490:	e008      	b.n	80094a4 <_printf_common+0xac>
 8009492:	2301      	movs	r3, #1
 8009494:	4652      	mov	r2, sl
 8009496:	4649      	mov	r1, r9
 8009498:	4638      	mov	r0, r7
 800949a:	47c0      	blx	r8
 800949c:	3001      	adds	r0, #1
 800949e:	d103      	bne.n	80094a8 <_printf_common+0xb0>
 80094a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094a8:	3501      	adds	r5, #1
 80094aa:	e7c4      	b.n	8009436 <_printf_common+0x3e>
 80094ac:	2030      	movs	r0, #48	; 0x30
 80094ae:	18e1      	adds	r1, r4, r3
 80094b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094ba:	4422      	add	r2, r4
 80094bc:	3302      	adds	r3, #2
 80094be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094c2:	e7c5      	b.n	8009450 <_printf_common+0x58>
 80094c4:	2301      	movs	r3, #1
 80094c6:	4622      	mov	r2, r4
 80094c8:	4649      	mov	r1, r9
 80094ca:	4638      	mov	r0, r7
 80094cc:	47c0      	blx	r8
 80094ce:	3001      	adds	r0, #1
 80094d0:	d0e6      	beq.n	80094a0 <_printf_common+0xa8>
 80094d2:	3601      	adds	r6, #1
 80094d4:	e7d9      	b.n	800948a <_printf_common+0x92>
	...

080094d8 <_printf_i>:
 80094d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094dc:	460c      	mov	r4, r1
 80094de:	7e27      	ldrb	r7, [r4, #24]
 80094e0:	4691      	mov	r9, r2
 80094e2:	2f78      	cmp	r7, #120	; 0x78
 80094e4:	4680      	mov	r8, r0
 80094e6:	469a      	mov	sl, r3
 80094e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80094ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094ee:	d807      	bhi.n	8009500 <_printf_i+0x28>
 80094f0:	2f62      	cmp	r7, #98	; 0x62
 80094f2:	d80a      	bhi.n	800950a <_printf_i+0x32>
 80094f4:	2f00      	cmp	r7, #0
 80094f6:	f000 80d9 	beq.w	80096ac <_printf_i+0x1d4>
 80094fa:	2f58      	cmp	r7, #88	; 0x58
 80094fc:	f000 80a4 	beq.w	8009648 <_printf_i+0x170>
 8009500:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009508:	e03a      	b.n	8009580 <_printf_i+0xa8>
 800950a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800950e:	2b15      	cmp	r3, #21
 8009510:	d8f6      	bhi.n	8009500 <_printf_i+0x28>
 8009512:	a001      	add	r0, pc, #4	; (adr r0, 8009518 <_printf_i+0x40>)
 8009514:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009518:	08009571 	.word	0x08009571
 800951c:	08009585 	.word	0x08009585
 8009520:	08009501 	.word	0x08009501
 8009524:	08009501 	.word	0x08009501
 8009528:	08009501 	.word	0x08009501
 800952c:	08009501 	.word	0x08009501
 8009530:	08009585 	.word	0x08009585
 8009534:	08009501 	.word	0x08009501
 8009538:	08009501 	.word	0x08009501
 800953c:	08009501 	.word	0x08009501
 8009540:	08009501 	.word	0x08009501
 8009544:	08009693 	.word	0x08009693
 8009548:	080095b5 	.word	0x080095b5
 800954c:	08009675 	.word	0x08009675
 8009550:	08009501 	.word	0x08009501
 8009554:	08009501 	.word	0x08009501
 8009558:	080096b5 	.word	0x080096b5
 800955c:	08009501 	.word	0x08009501
 8009560:	080095b5 	.word	0x080095b5
 8009564:	08009501 	.word	0x08009501
 8009568:	08009501 	.word	0x08009501
 800956c:	0800967d 	.word	0x0800967d
 8009570:	680b      	ldr	r3, [r1, #0]
 8009572:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009576:	1d1a      	adds	r2, r3, #4
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	600a      	str	r2, [r1, #0]
 800957c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009580:	2301      	movs	r3, #1
 8009582:	e0a4      	b.n	80096ce <_printf_i+0x1f6>
 8009584:	6825      	ldr	r5, [r4, #0]
 8009586:	6808      	ldr	r0, [r1, #0]
 8009588:	062e      	lsls	r6, r5, #24
 800958a:	f100 0304 	add.w	r3, r0, #4
 800958e:	d50a      	bpl.n	80095a6 <_printf_i+0xce>
 8009590:	6805      	ldr	r5, [r0, #0]
 8009592:	600b      	str	r3, [r1, #0]
 8009594:	2d00      	cmp	r5, #0
 8009596:	da03      	bge.n	80095a0 <_printf_i+0xc8>
 8009598:	232d      	movs	r3, #45	; 0x2d
 800959a:	426d      	negs	r5, r5
 800959c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095a0:	230a      	movs	r3, #10
 80095a2:	485e      	ldr	r0, [pc, #376]	; (800971c <_printf_i+0x244>)
 80095a4:	e019      	b.n	80095da <_printf_i+0x102>
 80095a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80095aa:	6805      	ldr	r5, [r0, #0]
 80095ac:	600b      	str	r3, [r1, #0]
 80095ae:	bf18      	it	ne
 80095b0:	b22d      	sxthne	r5, r5
 80095b2:	e7ef      	b.n	8009594 <_printf_i+0xbc>
 80095b4:	680b      	ldr	r3, [r1, #0]
 80095b6:	6825      	ldr	r5, [r4, #0]
 80095b8:	1d18      	adds	r0, r3, #4
 80095ba:	6008      	str	r0, [r1, #0]
 80095bc:	0628      	lsls	r0, r5, #24
 80095be:	d501      	bpl.n	80095c4 <_printf_i+0xec>
 80095c0:	681d      	ldr	r5, [r3, #0]
 80095c2:	e002      	b.n	80095ca <_printf_i+0xf2>
 80095c4:	0669      	lsls	r1, r5, #25
 80095c6:	d5fb      	bpl.n	80095c0 <_printf_i+0xe8>
 80095c8:	881d      	ldrh	r5, [r3, #0]
 80095ca:	2f6f      	cmp	r7, #111	; 0x6f
 80095cc:	bf0c      	ite	eq
 80095ce:	2308      	moveq	r3, #8
 80095d0:	230a      	movne	r3, #10
 80095d2:	4852      	ldr	r0, [pc, #328]	; (800971c <_printf_i+0x244>)
 80095d4:	2100      	movs	r1, #0
 80095d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095da:	6866      	ldr	r6, [r4, #4]
 80095dc:	2e00      	cmp	r6, #0
 80095de:	bfa8      	it	ge
 80095e0:	6821      	ldrge	r1, [r4, #0]
 80095e2:	60a6      	str	r6, [r4, #8]
 80095e4:	bfa4      	itt	ge
 80095e6:	f021 0104 	bicge.w	r1, r1, #4
 80095ea:	6021      	strge	r1, [r4, #0]
 80095ec:	b90d      	cbnz	r5, 80095f2 <_printf_i+0x11a>
 80095ee:	2e00      	cmp	r6, #0
 80095f0:	d04d      	beq.n	800968e <_printf_i+0x1b6>
 80095f2:	4616      	mov	r6, r2
 80095f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80095f8:	fb03 5711 	mls	r7, r3, r1, r5
 80095fc:	5dc7      	ldrb	r7, [r0, r7]
 80095fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009602:	462f      	mov	r7, r5
 8009604:	42bb      	cmp	r3, r7
 8009606:	460d      	mov	r5, r1
 8009608:	d9f4      	bls.n	80095f4 <_printf_i+0x11c>
 800960a:	2b08      	cmp	r3, #8
 800960c:	d10b      	bne.n	8009626 <_printf_i+0x14e>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	07df      	lsls	r7, r3, #31
 8009612:	d508      	bpl.n	8009626 <_printf_i+0x14e>
 8009614:	6923      	ldr	r3, [r4, #16]
 8009616:	6861      	ldr	r1, [r4, #4]
 8009618:	4299      	cmp	r1, r3
 800961a:	bfde      	ittt	le
 800961c:	2330      	movle	r3, #48	; 0x30
 800961e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009622:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009626:	1b92      	subs	r2, r2, r6
 8009628:	6122      	str	r2, [r4, #16]
 800962a:	464b      	mov	r3, r9
 800962c:	4621      	mov	r1, r4
 800962e:	4640      	mov	r0, r8
 8009630:	f8cd a000 	str.w	sl, [sp]
 8009634:	aa03      	add	r2, sp, #12
 8009636:	f7ff fedf 	bl	80093f8 <_printf_common>
 800963a:	3001      	adds	r0, #1
 800963c:	d14c      	bne.n	80096d8 <_printf_i+0x200>
 800963e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009642:	b004      	add	sp, #16
 8009644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009648:	4834      	ldr	r0, [pc, #208]	; (800971c <_printf_i+0x244>)
 800964a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800964e:	680e      	ldr	r6, [r1, #0]
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	f856 5b04 	ldr.w	r5, [r6], #4
 8009656:	061f      	lsls	r7, r3, #24
 8009658:	600e      	str	r6, [r1, #0]
 800965a:	d514      	bpl.n	8009686 <_printf_i+0x1ae>
 800965c:	07d9      	lsls	r1, r3, #31
 800965e:	bf44      	itt	mi
 8009660:	f043 0320 	orrmi.w	r3, r3, #32
 8009664:	6023      	strmi	r3, [r4, #0]
 8009666:	b91d      	cbnz	r5, 8009670 <_printf_i+0x198>
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	f023 0320 	bic.w	r3, r3, #32
 800966e:	6023      	str	r3, [r4, #0]
 8009670:	2310      	movs	r3, #16
 8009672:	e7af      	b.n	80095d4 <_printf_i+0xfc>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	f043 0320 	orr.w	r3, r3, #32
 800967a:	6023      	str	r3, [r4, #0]
 800967c:	2378      	movs	r3, #120	; 0x78
 800967e:	4828      	ldr	r0, [pc, #160]	; (8009720 <_printf_i+0x248>)
 8009680:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009684:	e7e3      	b.n	800964e <_printf_i+0x176>
 8009686:	065e      	lsls	r6, r3, #25
 8009688:	bf48      	it	mi
 800968a:	b2ad      	uxthmi	r5, r5
 800968c:	e7e6      	b.n	800965c <_printf_i+0x184>
 800968e:	4616      	mov	r6, r2
 8009690:	e7bb      	b.n	800960a <_printf_i+0x132>
 8009692:	680b      	ldr	r3, [r1, #0]
 8009694:	6826      	ldr	r6, [r4, #0]
 8009696:	1d1d      	adds	r5, r3, #4
 8009698:	6960      	ldr	r0, [r4, #20]
 800969a:	600d      	str	r5, [r1, #0]
 800969c:	0635      	lsls	r5, r6, #24
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	d501      	bpl.n	80096a6 <_printf_i+0x1ce>
 80096a2:	6018      	str	r0, [r3, #0]
 80096a4:	e002      	b.n	80096ac <_printf_i+0x1d4>
 80096a6:	0671      	lsls	r1, r6, #25
 80096a8:	d5fb      	bpl.n	80096a2 <_printf_i+0x1ca>
 80096aa:	8018      	strh	r0, [r3, #0]
 80096ac:	2300      	movs	r3, #0
 80096ae:	4616      	mov	r6, r2
 80096b0:	6123      	str	r3, [r4, #16]
 80096b2:	e7ba      	b.n	800962a <_printf_i+0x152>
 80096b4:	680b      	ldr	r3, [r1, #0]
 80096b6:	1d1a      	adds	r2, r3, #4
 80096b8:	600a      	str	r2, [r1, #0]
 80096ba:	681e      	ldr	r6, [r3, #0]
 80096bc:	2100      	movs	r1, #0
 80096be:	4630      	mov	r0, r6
 80096c0:	6862      	ldr	r2, [r4, #4]
 80096c2:	f7ff fbbf 	bl	8008e44 <memchr>
 80096c6:	b108      	cbz	r0, 80096cc <_printf_i+0x1f4>
 80096c8:	1b80      	subs	r0, r0, r6
 80096ca:	6060      	str	r0, [r4, #4]
 80096cc:	6863      	ldr	r3, [r4, #4]
 80096ce:	6123      	str	r3, [r4, #16]
 80096d0:	2300      	movs	r3, #0
 80096d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096d6:	e7a8      	b.n	800962a <_printf_i+0x152>
 80096d8:	4632      	mov	r2, r6
 80096da:	4649      	mov	r1, r9
 80096dc:	4640      	mov	r0, r8
 80096de:	6923      	ldr	r3, [r4, #16]
 80096e0:	47d0      	blx	sl
 80096e2:	3001      	adds	r0, #1
 80096e4:	d0ab      	beq.n	800963e <_printf_i+0x166>
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	079b      	lsls	r3, r3, #30
 80096ea:	d413      	bmi.n	8009714 <_printf_i+0x23c>
 80096ec:	68e0      	ldr	r0, [r4, #12]
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	4298      	cmp	r0, r3
 80096f2:	bfb8      	it	lt
 80096f4:	4618      	movlt	r0, r3
 80096f6:	e7a4      	b.n	8009642 <_printf_i+0x16a>
 80096f8:	2301      	movs	r3, #1
 80096fa:	4632      	mov	r2, r6
 80096fc:	4649      	mov	r1, r9
 80096fe:	4640      	mov	r0, r8
 8009700:	47d0      	blx	sl
 8009702:	3001      	adds	r0, #1
 8009704:	d09b      	beq.n	800963e <_printf_i+0x166>
 8009706:	3501      	adds	r5, #1
 8009708:	68e3      	ldr	r3, [r4, #12]
 800970a:	9903      	ldr	r1, [sp, #12]
 800970c:	1a5b      	subs	r3, r3, r1
 800970e:	42ab      	cmp	r3, r5
 8009710:	dcf2      	bgt.n	80096f8 <_printf_i+0x220>
 8009712:	e7eb      	b.n	80096ec <_printf_i+0x214>
 8009714:	2500      	movs	r5, #0
 8009716:	f104 0619 	add.w	r6, r4, #25
 800971a:	e7f5      	b.n	8009708 <_printf_i+0x230>
 800971c:	08009988 	.word	0x08009988
 8009720:	08009999 	.word	0x08009999

08009724 <__retarget_lock_acquire_recursive>:
 8009724:	4770      	bx	lr

08009726 <__retarget_lock_release_recursive>:
 8009726:	4770      	bx	lr

08009728 <_realloc_r>:
 8009728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972a:	4607      	mov	r7, r0
 800972c:	4614      	mov	r4, r2
 800972e:	460e      	mov	r6, r1
 8009730:	b921      	cbnz	r1, 800973c <_realloc_r+0x14>
 8009732:	4611      	mov	r1, r2
 8009734:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009738:	f7ff bc0e 	b.w	8008f58 <_malloc_r>
 800973c:	b922      	cbnz	r2, 8009748 <_realloc_r+0x20>
 800973e:	f7ff fbbf 	bl	8008ec0 <_free_r>
 8009742:	4625      	mov	r5, r4
 8009744:	4628      	mov	r0, r5
 8009746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009748:	f000 f814 	bl	8009774 <_malloc_usable_size_r>
 800974c:	42a0      	cmp	r0, r4
 800974e:	d20f      	bcs.n	8009770 <_realloc_r+0x48>
 8009750:	4621      	mov	r1, r4
 8009752:	4638      	mov	r0, r7
 8009754:	f7ff fc00 	bl	8008f58 <_malloc_r>
 8009758:	4605      	mov	r5, r0
 800975a:	2800      	cmp	r0, #0
 800975c:	d0f2      	beq.n	8009744 <_realloc_r+0x1c>
 800975e:	4631      	mov	r1, r6
 8009760:	4622      	mov	r2, r4
 8009762:	f7ff fb7d 	bl	8008e60 <memcpy>
 8009766:	4631      	mov	r1, r6
 8009768:	4638      	mov	r0, r7
 800976a:	f7ff fba9 	bl	8008ec0 <_free_r>
 800976e:	e7e9      	b.n	8009744 <_realloc_r+0x1c>
 8009770:	4635      	mov	r5, r6
 8009772:	e7e7      	b.n	8009744 <_realloc_r+0x1c>

08009774 <_malloc_usable_size_r>:
 8009774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009778:	1f18      	subs	r0, r3, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	bfbc      	itt	lt
 800977e:	580b      	ldrlt	r3, [r1, r0]
 8009780:	18c0      	addlt	r0, r0, r3
 8009782:	4770      	bx	lr

08009784 <_init>:
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	bf00      	nop
 8009788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978a:	bc08      	pop	{r3}
 800978c:	469e      	mov	lr, r3
 800978e:	4770      	bx	lr

08009790 <_fini>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	bf00      	nop
 8009794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009796:	bc08      	pop	{r3}
 8009798:	469e      	mov	lr, r3
 800979a:	4770      	bx	lr
